/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:04:22 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.ISimplifier;
import org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy;
import org.sat4j.minisat.core.LearnedConstraintsEvaluationType;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.Pair;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SimplificationType;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.SearchListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.RupSearchListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solver_ESTest extends Solver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(1, 1082);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0.0, 343);
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      solver1.isSatisfiable((IVecInt) vecInt0, true);
      PureOrder pureOrder0 = new PureOrder(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ILogAble iLogAble0 = solver1.out;
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, fixedPeriodRestarts0, iLogAble0);
      solver2.findModel((IVecInt) vecInt0);
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder1 = new PureOrder(1071);
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, pureOrder1, fixedPeriodRestarts0, (ILogAble) null);
      solver3.setLearningStrategy(miniSATLearning0);
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, fixedPeriodRestarts0);
      solver4.isDBSimplificationAllowed();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(7);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, arminRestarts0);
      solver0.getOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      solver0.unset(209);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams1 = null;
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("jE=VoPWAqd{<");
      solver1.setSearchListener((SearchListener<Solver<MixedDataStructureSingleWL>>) rupSearchListener0);
      solver1.cancelUntilTrailLevel(769);
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      PureOrder pureOrder0 = new PureOrder(209);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver2 = null;
      try {
        solver2 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      solver0.decayActivities();
      // Undeclared exception!
      try { 
        solver0.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      glucose21Restarts0.onRestart();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, clausalDataStructureWL0, naturalStaticOrder0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      SearchParams searchParams0 = new SearchParams(4);
      PureOrder pureOrder0 = new PureOrder(50);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, pureOrder0, fixedPeriodRestarts0);
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      MUSLauncher mUSLauncher1 = (MUSLauncher)solver1.out;
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams1 = new SearchParams();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      int int0 = 3;
      VecInt vecInt0 = new VecInt(3580, 3);
      solver1.isSatisfiable((IVecInt) vecInt0, true);
      PureOrder pureOrder1 = new PureOrder(int0);
      MUSLauncher mUSLauncher2 = (MUSLauncher)solver2.out;
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, glucose21Restarts0, mUSLauncher0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      solver0.findModel(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      int int0 = (-399);
      PureOrder pureOrder0 = new PureOrder((-399));
      clauseOnlyLearning0.init();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, pureOrder0, miniSATRestarts0);
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      solver0.addAllClauses(vec0);
      clauseOnlyLearning0.setVarActivityListener(solver0);
      int int1 = 2032;
      // Undeclared exception!
      try { 
        solver0.enqueue(2032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1069;
      intArray0[1] = 0;
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) arminRestarts0, learnedConstraintsEvaluationType0);
      intArray0[2] = (-307);
      intArray0[3] = 1171;
      intArray0[4] = 1000;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, 1069);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, arminRestarts0);
      VecInt vecInt0 = (VecInt)solver1.decisions;
      solver0.addExactly(vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(3738);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(1000.0, 1000.0, (-784.5384374), 3738);
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      EMARestarts eMARestarts0 = new EMARestarts();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(3738);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams1 = new SearchParams(3738);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams1, pureOrder0, eMARestarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, eMARestarts0, iLogAble0);
      percentLengthLearning0.setSolver(solver1);
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      percentLengthLearning0.toString();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure1, levelBasedVarOrderHeap0, arminRestarts0);
      solver2.nVars();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver3 = null;
      try {
        solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, (CardinalityDataStructureYanMax) null, levelBasedVarOrderHeap0, arminRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(99);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = (-4321);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 99);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, eMARestarts0);
      solver0.getTimeoutMs();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, eMARestarts0);
      // Undeclared exception!
      try { 
        solver1.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[7];
      intArray0[0] = (-5261);
      intArray0[1] = (-791);
      intArray0[2] = 1032;
      intArray0[3] = 0;
      intArray0[4] = 112;
      intArray0[5] = 2745;
      intArray0[6] = (-191);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, subsetVarOrder0, arminRestarts0);
      solver0.setNeedToReduceDB(false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams((-2140));
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>(1433.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      IOrder iOrder0 = solver0.getOrder();
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, iOrder0, miniSATRestarts0);
      ILogAble iLogAble0 = solver1.getLogger();
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, iOrder0, miniSATRestarts0, iLogAble0);
      solver2.getVariableHeuristics();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 6;
      intArray0[4] = 1004;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SearchParams searchParams0 = new SearchParams((-1962.2888439), 1004);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      solver0.getLogPrefix();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1004);
      // Undeclared exception!
      try { 
        solver0.findModel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-1866.858104));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(1745, 0.0, 0.0, 194);
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = naturalStaticOrder0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, (-1559));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        solver0.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(7);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      solver0.isSatisfiable(true);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      solver1.isVerbose();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SearchParams searchParams0 = solver0.getSearchParams();
      searchParams0.setClaDecay((-2540.2905663530046));
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      naturalStaticOrder0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      searchParams0.setClaDecay((-2540.2905663530046));
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, noRestarts0);
      solver1.sortOnActivity();
      // Undeclared exception!
      try { 
        solver0.toString(",|VK&NpaD#]SU2h");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      SearchParams searchParams0 = solver1.getSearchParams();
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0);
      UnitClause unitClause0 = new UnitClause(15);
      solver2.record(unitClause0);
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      solver3.decayActivities();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielWL> solver4 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      Pair pair0 = new Pair();
      // Undeclared exception!
      try { 
        solver4.analyze(unitClause0, pair0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 16;
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(16, 0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      // Undeclared exception!
      try { 
        solver0.primeImplicant(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      IOrder iOrder0 = solver0.getOrder();
      int int0 = 0;
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, searchParams0, iOrder0, arminRestarts0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int1 = 46;
      // Undeclared exception!
      try { 
        solver0.primeImplicant(46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      lubyRestarts0.setFactor(5);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 206);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(7);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoRestarts noRestarts0 = new NoRestarts();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap1);
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, restartStrategy0);
      UnitClause unitClause0 = new UnitClause(528);
      // Undeclared exception!
      try { 
        solver2.record(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      SearchParams searchParams0 = new SearchParams();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>(1094);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      searchParams0.toString();
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, searchParams0, varOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 1094);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2911);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 20;
      intArray0[4] = 2;
      intArray0[5] = (-2289);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {0, (-2911), Integer.MAX_VALUE, 20, 2, (-2289)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {0, (-2911), Integer.MAX_VALUE, 20, 2, (-2289)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {0, (-2911), Integer.MAX_VALUE, 20, 2, (-2289)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      UnitClause unitClause0 = new UnitClause(15);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      
      solver0.record(unitClause0);
      assertArrayEquals(new int[] {0, (-2911), Integer.MAX_VALUE, 20, 2, (-2289)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, eMARestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {0, (-2911), Integer.MAX_VALUE, 20, 2, (-2289)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      int int0 = solver1.newVar();
      assertEquals(3, int0);
      assertArrayEquals(new int[] {0, (-2911), Integer.MAX_VALUE, 20, 2, (-2289)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(4, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.newVar());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, glucose21Restarts0, iLogAble0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-3870);
      intArray0[1] = 3;
      intArray0[2] = 2343;
      intArray0[3] = 0;
      intArray0[4] = (-2373);
      solver1.prime = intArray0;
      solver1.getVocabulary();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1919));
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      solver3.nAssigns();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver4 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      solver4.getVocabulary();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver5 = null;
      try {
        solver5 = new Solver<MixedDataStructureSingleWL>((LearningStrategy<MixedDataStructureSingleWL>) null, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      solver1.getOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      SearchParams searchParams0 = new SearchParams(0, 0, 0.0, 3731);
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, arminRestarts0);
      int[] intArray0 = new int[0];
      solver2.addClauseOnTheFly(intArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 16;
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(16, 16);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 16;
      // Undeclared exception!
      try { 
        solver0.backtrack(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.out;
      glucose21Restarts0.onRestart();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VecInt vecInt0 = new VecInt(1096, 9);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, glucose21Restarts1, iLogAble0);
      solver0.fromLastDecisionLevel(vecInt0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      SearchParams searchParams0 = solver1.getSearchParams();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      MUSLauncher mUSLauncher1 = new MUSLauncher();
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, naturalStaticOrder0, noRestarts0);
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary2 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary2, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher1);
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
      ISolver iSolver0 = solver4.getSolvingEngine();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(iVecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      IVecInt iVecInt1 = minOneDecorator0.createBlockingClauseForCurrentModel();
      solver3.analyzeFinalConflictInTermsOfAssumptions(constr0, iVecInt1, (-3411));
      VecInt vecInt0 = new VecInt(16);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1.0E20, 0.0, (-154.14847), (-438));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, miniSATRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, restartStrategy0);
      solver1.propagate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      ISimplifier iSimplifier0 = Solver.NO_SIMPLIFICATION;
      solver0.setSimplifier(iSimplifier0);
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 1451);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1226.3394);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
      SearchParams searchParams1 = solver0.getSearchParams();
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, (ClausalDataStructureWL) null, searchParams1, naturalStaticOrder0, fixedPeriodRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      int int0 = (-1234);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1234));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-1234), (-1234), (-2783.75436341), (-1234));
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning2, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0);
      SearchParams searchParams1 = solver1.getSearchParams();
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, searchParams1, randomWalkDecorator0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        solver2.toString("TehIaq");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      SearchParams searchParams1 = new SearchParams(1.0E100, 1117);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(1.0E100, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1117, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, iLogAble0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver2);
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.newVar());
      assertEquals(4, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(4, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      
      VecInt vecInt0 = new VecInt(1805, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(1805, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Set<Integer> set0 = solver1.fromLastDecisionLevel(vecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertNotSame(solver1, solver2);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver1.equals((Object)solver2));
      assertNotNull(set0);
      assertFalse(set0.contains(1117));
      assertTrue(set0.contains(0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, vecInt0.last());
      assertEquals(1805, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        solver2.findModel((IVecInt) vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(99);
      assertNotNull(percentLengthLearning0);
      assertEquals(99, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = (-4321);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 99);
      assertNotNull(tabuListDecorator0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, eMARestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(99, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, subsetVarOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      SearchParams searchParams0 = solver1.getSearchParams();
      assertNull(searchParams0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax1, (SearchParams) null, tabuListDecorator0, eMARestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      boolean boolean0 = solver2.assume(99);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver2, solver1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(solver2.isVerbose());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(1, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      
      int[] intArray0 = new int[0];
      solver0.backtrack(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("U,~0vi");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U,~0vi");
      assertNotNull(mockPrintWriter0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver1.getRestartStrategy();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, noRestarts0);
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      
      VecInt vecInt0 = (VecInt)solver2.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver2);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(vecInt1);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertSame(arminRestarts0, arminRestarts1);
      assertNotNull(lits0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, lits0.realnVars());
      assertEquals(5, lits0.nVars());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      solver1.reset();
      assertSame(arminRestarts0, arminRestarts1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure1, searchParams0, varOrderHeap0, noRestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertNotNull(solver3);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, eMARestarts0);
      assertNotNull(solver4);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(2, solver4.newVar());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>((-3213));
      assertNotNull(percentLengthLearning0);
      assertEquals((-3213), percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver5 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, arminRestarts1, mUSLauncher0);
      assertNotNull(solver5);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-3213), percentLengthLearning0.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.nConstraints());
      assertEquals(2, solver5.newVar());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      
      String string0 = solver5.getLogPrefix();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-3213), percentLengthLearning0.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals(3, solver5.nVars());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(4, solver5.newVar());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VecInt vecInt0 = new VecInt(1096, 9);
      assertNotNull(vecInt0);
      assertEquals(1096, vecInt0.size());
      assertEquals(9, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      vecInt0.shrink(3295);
      assertEquals((-2199), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertNotNull(glucose21Restarts1);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, glucose21Restarts1, iLogAble0);
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      VecInt vecInt1 = (VecInt)solver1.learnedLiterals;
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(vecInt0);
      assertNotSame(glucose21Restarts0, glucose21Restarts1);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(set0);
      assertFalse(set0.contains(0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals((-2199), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics1);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1094);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      String string0 = searchParams0.toString();
      assertNotNull(string0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      solver1.setTimeoutMs(0L);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver0, solver1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver1, solver0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(749);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(749, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 749;
      intArray0[1] = 749;
      intArray0[2] = 749;
      intArray0[3] = (-887);
      intArray0[4] = 749;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(749, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(749, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver1.fixedSize(749);
      assertNotNull(learnedConstraintsDeletionStrategy0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(749, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsDeletionStrategy0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-613));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      NaturalStaticOrder naturalStaticOrder1 = (NaturalStaticOrder)solver1.getOrder();
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotNull(naturalStaticOrder1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      SearchParams searchParams1 = new SearchParams(32, 1655);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1655, searchParams1.getInitConflictBound());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams2 = new SearchParams(1117, 1655);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotNull(searchParams2);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams2, naturalStaticOrder1, lubyRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      
      ILogAble iLogAble0 = solver2.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder1, glucose21Restarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(4, solver3.realNumberOfVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(4, solver3.nVars());
      assertEquals(5, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      
      VecInt vecInt0 = new VecInt(1805, 213);
      assertNotNull(vecInt0);
      assertEquals(213, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1805, vecInt0.size());
      
      PureOrder pureOrder0 = new PureOrder((-613));
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ILogAble iLogAble1 = solver3.out;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, fixedPeriodRestarts0, iLogAble1);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver3));
      assertNotNull(solver4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals(12, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(11, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isVerbose());
      assertEquals(10, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(10, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(11, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(9, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(9, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(10, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      
      Set<Integer> set0 = solver4.fromLastDecisionLevel(vecInt0);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver3, solver2);
      assertNotSame(solver3, solver4);
      assertSame(iLogAble1, iLogAble0);
      assertNotSame(solver4, solver2);
      assertNotSame(solver4, solver3);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver4));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver3));
      assertNotNull(set0);
      assertTrue(set0.contains(213));
      assertFalse(set0.contains(1655));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(15, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(12, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(17, solver2.nVars());
      assertEquals(17, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(18, solver2.newVar());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(16, solver3.realNumberOfVariables());
      assertEquals(16, solver3.nVars());
      assertEquals(17, solver3.newVar());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(213, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1805, vecInt0.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(15, solver4.nVars());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(15, solver4.realNumberOfVariables());
      assertEquals(16, solver4.newVar());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      int[] intArray0 = solver2.findModel((IVecInt) vecInt0);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertNotNull(intArray0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {213}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(17, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(18, solver0.newVar());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(14, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(13, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(13, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(214, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(214, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(215, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(213, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1805, vecInt0.size());
      
      solver4.clearLearntClauses();
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver3, solver2);
      assertNotSame(solver3, solver4);
      assertSame(iLogAble1, iLogAble0);
      assertNotSame(solver4, solver2);
      assertNotSame(solver4, solver3);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver4));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver3));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(20, solver0.newVar());
      assertEquals(19, solver0.realNumberOfVariables());
      assertEquals(19, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(16, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(15, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(15, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(221, solver2.newVar());
      assertEquals(220, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(220, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isVerbose());
      assertEquals(219, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(219, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(220, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(218, solver4.nVars());
      assertEquals(219, solver4.newVar());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(218, solver4.realNumberOfVariables());
      
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver5 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams2, pureOrder0, miniSATRestarts0);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotNull(solver5);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver5.isVerbose());
      assertEquals(2, solver5.newVar());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.decisionLevel());
      assertEquals("c ", solver5.getLogPrefix());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.nConstraints());
      assertEquals(1, solver5.realNumberOfVariables());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      solver5.modelFound();
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver5.isVerbose());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.decisionLevel());
      assertEquals("c ", solver5.getLogPrefix());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(4, solver5.newVar());
      assertEquals(0, solver5.nConstraints());
      assertEquals(3, solver5.nVars());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      int int0 = solver0.decisionLevel();
      assertEquals(0, int0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      
      solver1.initStats(solverStats0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-1866.858104));
      assertNotNull(activeLearning0);
      assertEquals((-1866.858104), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1559));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1559), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-1866.858104), 1.0E-20, 0.0, 1745);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.858104), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1745, searchParams0.getInitConflictBound());
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1745);
      assertNotNull(tabuListDecorator0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals((-1559), fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.858104), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1745, searchParams0.getInitConflictBound());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      IOrder iOrder0 = solver0.getOrder();
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertNotNull(iOrder0);
      assertEquals((-1559), fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.858104), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1745, searchParams0.getInitConflictBound());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, iOrder0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals((-1866.858104), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1559), fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.858104), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1745, searchParams0.getInitConflictBound());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      
      // Undeclared exception!
      try { 
        solver1.setLearner(activeLearning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(7, 1785);
      assertNotNull(searchParams0);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(7);
      assertNotNull(percentLengthLearning0);
      assertEquals(7, percentLengthLearning0.getLimit());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, (SearchParams) null, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt0, iVecInt1);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      // Undeclared exception!
      try { 
        clausalDataStructureWL0.createClause(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(99);
      assertNotNull(percentLengthLearning0);
      assertEquals(99, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = (-4321);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 99);
      assertNotNull(tabuListDecorator0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, eMARestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {99, 99, 99, 99, (-4321)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(99, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        solver0.addAtLeast(vecInt0, (-4321));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver1.getRestartStrategy();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, noRestarts0);
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      
      VecInt vecInt0 = (VecInt)solver2.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      assertNotNull(activeLearning0);
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver2);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(vecInt1);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertSame(arminRestarts0, arminRestarts1);
      assertNotNull(lits0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lits0.realnVars());
      assertEquals(5, lits0.nVars());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(9, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(7, lits0.nVars());
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2, learntBinaryClause0.size());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.locked());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      
      solver1.reset();
      assertSame(arminRestarts0, arminRestarts1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      LearntBinaryClause learntBinaryClause1 = (LearntBinaryClause)learntBinaryClause0.toConstraint();
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver2, solver0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(learntBinaryClause0, learntBinaryClause1);
      assertSame(learntBinaryClause1, learntBinaryClause0);
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals(12, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(11, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(3, lits0.nVars());
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2, learntBinaryClause0.size());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.locked());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertTrue(learntBinaryClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntBinaryClause1.getActivity(), 0.01);
      assertFalse(learntBinaryClause1.isSatisfied());
      assertFalse(learntBinaryClause1.locked());
      assertEquals(2, learntBinaryClause1.size());
      assertFalse(learntBinaryClause1.canBePropagatedMultipleTimes());
      assertFalse(learntBinaryClause1.simplify());
      assertEquals(1, learntBinaryClause1.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntBinaryClause1.learnt());
      
      solver1.claBumpActivity(learntBinaryClause0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver2, solver0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(learntBinaryClause0, learntBinaryClause1);
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(14, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(13, solver2.nVars());
      assertEquals(13, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(5, lits0.nVars());
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2, learntBinaryClause0.size());
      assertEquals(1.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.locked());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure1, searchParams0, varOrderHeap0, noRestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertNotNull(solver3);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver3.getLiteralsPropagatedAt(500);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1432));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(500);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams0, pureOrder0, noRestarts0);
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(solver1);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(500);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(500.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, noRestarts1);
      assertNotNull(solver2);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(500.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      AtLeast atLeast0 = (AtLeast)solver1.addAtMost(vecInt1, 500);
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(atLeast0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals((-500), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(1, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = manyCore0.addClause(vecInt0);
      assertNotNull(iConstr0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, stringArray0.length);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, eMARestarts0);
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      solver2.setLearnedConstraintsDeletionStrategy((ConflictTimer) eMARestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(solver2, solver0);
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 32;
      intArray0[7] = 32;
      intArray0[8] = 32;
      // Undeclared exception!
      try { 
        solver2.addAtMostOnTheFly(intArray0, 32);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotNull(iVecInt0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, iVecInt0.size());
      assertEquals(4, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotSame(iLits0, lits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertNotNull(originalWLClause0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertEquals(4, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertNotNull(naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder1, fixedPeriodRestarts0, mUSLauncher0);
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertNotNull(solver1);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder1, fixedPeriodRestarts0);
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertNotNull(solver2);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      solver2.reset();
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder1, fixedPeriodRestarts0, mUSLauncher0);
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertNotNull(solver3);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      Lbool lbool0 = solver3.truthValue(0);
      assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertNotNull(lbool0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(4, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("U", lbool0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-682));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-682), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-682), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      String string0 = solver0.getLogPrefix();
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-682), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1418);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1418, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(1418, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("c ");
      assertNotNull(mockPrintStream0);
      
      solver1.printStat((PrintStream) mockPrintStream0, "c ");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(1418, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 5);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(6, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      
      boolean boolean0 = solver1.assume(5);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(11, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.decisionLevel());
      assertEquals(1, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0);
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(16, solver0.newVar());
      assertEquals(15, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(15, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      // Undeclared exception!
      try { 
        solver3.model(32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, (-3443.79638997237), 1014);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1014, searchParams0.getInitConflictBound());
      assertEquals((-3443.79638997237), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1014, searchParams0.getInitConflictBound());
      assertEquals((-3443.79638997237), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        solver0.assume(1014);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1263.582834979314);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1263.582834979314, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-333));
      assertNotNull(searchParams0);
      assertEquals((-333), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder((-333));
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-333), pureOrder0.getPeriod());
      
      SearchParams searchParams1 = new SearchParams((-333));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-333), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver0);
      assertEquals((-333), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.setNeedToReduceDB(false);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals((-333), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-333), pureOrder0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, searchParams1, pureOrder0, miniSATRestarts0, (ILogAble) null);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-333), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      
      // Undeclared exception!
      try { 
        solver2.getLiteralsPropagatedAt(48);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(3572);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(iVecInt0, 5);
      assertNotNull(constr0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertFalse(constr0.learnt());
      assertFalse(constr0.simplify());
      assertTrue(constr0.locked());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(5, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      
      noLearningButHeuristics0.claBumpActivity(constr0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertFalse(constr0.learnt());
      assertFalse(constr0.simplify());
      assertTrue(constr0.locked());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(5, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      
      int int0 = solver0.newVar(1206);
      assertEquals(1206, int0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1208, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1207, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(3576);
      assertNotNull(learnedConstraintsDeletionStrategy0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1210, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1209, solver0.realNumberOfVariables());
      
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(1212, solver0.newVar());
      assertEquals(1211, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(1214, solver0.newVar());
      assertEquals(1213, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      solver2.reset();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1216, solver0.newVar());
      assertEquals(1215, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(917);
      assertNotNull(percentLengthLearning0);
      assertEquals(917, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(917, percentLengthLearning0.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1218, solver0.newVar());
      assertEquals(1217, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      
      ILogAble iLogAble0 = solver3.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertFalse(solver4.equals((Object)solver3));
      assertNotNull(solver4);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(917, percentLengthLearning0.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1220, solver0.newVar());
      assertEquals(1219, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals(5, solver3.nVars());
      assertEquals(6, solver3.newVar());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(4, solver4.nVars());
      assertEquals(4, solver4.realNumberOfVariables());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(5, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      
      boolean boolean1 = solver4.isSolverKeptHot();
      assertNotSame(solver3, solver4);
      assertNotSame(solver4, solver3);
      assertFalse(solver3.equals((Object)solver4));
      assertFalse(solver4.equals((Object)solver3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3572, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(917, percentLengthLearning0.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1206, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1222, solver0.newVar());
      assertEquals(1221, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(9, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(10, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(9, solver3.realNumberOfVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(8, solver4.realNumberOfVariables());
      assertEquals(9, solver4.newVar());
      assertEquals(8, solver4.nVars());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<CardinalityDataStructure> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, (CardinalityDataStructure) null, levelBasedVarOrderHeap0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      int int0 = 526;
      SearchParams searchParams1 = new SearchParams(0.0, 0.0, 0.0, 526);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(526, searchParams1.getInitConflictBound());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"_Jruv");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("\"_Jruv", (Object[]) null);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MUSLauncher mUSLauncher1 = new MUSLauncher();
      assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
      assertNotNull(mUSLauncher1);
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams1, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher1);
      assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(526, searchParams1.getInitConflictBound());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Constr constr0 = solver1.sharedConflict;
      assertNull(constr0);
      
      // Undeclared exception!
      try { 
        solver0.analyzeFinalConflictInTermsOfAssumptions((Constr) null, (IVecInt) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      solver1.setOrder(subsetVarOrder0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IConstr iConstr0 = solver0.addExactly(vecInt0, 0);
      assertNotNull(iConstr0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(2, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      
      try { 
        solver1.addExactly(vecInt0, (-347));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int int0 = (-438);
      SearchParams searchParams0 = new SearchParams(1.0E20, 0.0, (-154.14847), (-438));
      assertNotNull(searchParams0);
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-154.14847), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-154.14847), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertNotNull(miniSATRestarts1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-154.14847), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertTrue(miniSATRestarts1.shouldRestart());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, miniSATRestarts1);
      assertNotNull(solver1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-154.14847), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      Constr constr0 = solver1.propagate();
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertNull(constr0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-154.14847), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(500);
      assertNotNull(percentLengthLearning0);
      assertEquals(500, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver2);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-154.14847), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(500, percentLengthLearning0.getLimit());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      
      // Undeclared exception!
      try { 
        solver2.enqueue(500, (Constr) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      UnitClause unitClause0 = new UnitClause(15);
      assertNotNull(unitClause0);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      solver0.record(unitClause0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      solver1.decayActivities();
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      int int0 = solver0.nextFreeVarId(true);
      assertEquals(5, int0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.realNumberOfVariables());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      IVecInt iVecInt1 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      
      // Undeclared exception!
      try { 
        solver2.forget(417);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      double double0 = (-916.10032206983);
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-916.10032206983), 48);
      assertNotNull(searchParams0);
      assertEquals((-916.10032206983), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(48, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals((-916.10032206983), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(48, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      IVecInt[] iVecIntArray0 = new IVecInt[3];
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 48;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {48, 48, 48}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.size());
      assertEquals(48, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      iVecIntArray0[0] = (IVecInt) vecInt0;
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(48);
      assertNotNull(activeLearning0);
      assertEquals(48.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(48.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals((-916.10032206983), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(48, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      IVecInt iVecInt0 = solver1.dimacs2internal(vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertArrayEquals(new int[] {48, 48, 48}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.size());
      assertEquals(48, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(48.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(49, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(49, solver1.realNumberOfVariables());
      assertEquals(50, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(96, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3, iVecInt0.size());
      assertEquals((-916.10032206983), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(48, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      iVecIntArray0[1] = iVecInt0;
      VecInt vecInt1 = (VecInt)solver0.learnedLiterals;
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      iVecIntArray0[2] = (IVecInt) vecInt1;
      Vec<IVecInt> vec0 = new Vec<IVecInt>(iVecIntArray0);
      assertNotNull(vec0);
      assertEquals(3, iVecIntArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      try { 
        solver0.addAllClauses(vec0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      SearchParams searchParams0 = new SearchParams(500);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(noRestarts1);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      VecInt vecInt0 = new VecInt(500, 2180);
      assertNotNull(vecInt0);
      assertEquals(500, vecInt0.size());
      assertEquals(2180, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(500);
      assertNotNull(fixedLengthLearning0);
      assertEquals(500, fixedLengthLearning0.getMaxLength());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(solver2);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(500, fixedLengthLearning0.getMaxLength());
      
      IVecInt iVecInt0 = solver2.analyzeFinalConflictInTermsOfAssumptions((Constr) null, vecInt0, (-1013));
      assertNotSame(noRestarts0, noRestarts1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(500, vecInt0.size());
      assertEquals(2180, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(500, fixedLengthLearning0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      searchParams0.setClaDecay((-2540.2905663530046));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      naturalStaticOrder0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      searchParams0.setClaDecay((-2540.2905663530046));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      solver1.sortOnActivity();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver2);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      cardinalityDataStructureYanMax0.conflictDetectedInWatchesFor(849, 206);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, naturalStaticOrder0, fixedPeriodRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertNotNull(solver3);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      
      IVec<Constr> iVec0 = solver0.getLearnedConstraints();
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(solver0, solver3);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver0.equals((Object)solver3));
      assertNotNull(iVec0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(13, solver0.nVars());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver3.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      solver1.printInfos((PrintWriter) mockPrintWriter1, "c ");
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      Pair pair0 = new Pair();
      assertNotNull(pair0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      pair0.setBacktrackLevel(0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      pair0.setBacktrackLevel((-2229));
      assertEquals((-2229), pair0.getBacktrackLevel());
      
      Constr constr0 = pair0.getReason();
      assertNull(constr0);
      assertEquals((-2229), pair0.getBacktrackLevel());
      
      // Undeclared exception!
      try { 
        solver1.analyze((Constr) null, pair0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 5);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams1 = new SearchParams(5);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.setNeedToReduceDB(false);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      
      // Undeclared exception!
      try { 
        solver1.getLiteralsPropagatedAt(1000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(16, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(16, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q^vS?c eUzF#@tPS");
      assertNotNull(mockPrintWriter0);
      
      solver1.printStat((PrintWriter) mockPrintWriter0, "Q^vS?c eUzF#@tPS");
      assertEquals(16, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1769);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1769, fixedLengthLearning0.getMaxLength());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1769, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      
      SearchParams searchParams1 = solver2.getSearchParams();
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1769, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      assertNotNull(positiveLiteralSelectionStrategy0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams1, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1769, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(6, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(6, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(7, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      
      // Undeclared exception!
      try { 
        solver3.setLearnedConstraintsDeletionStrategy(solver2.activity_based_low_memory);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1432));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(500);
      assertNotNull(searchParams0);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      int[] intArray0 = solver0.findModel();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-764.60587), (-764.60587), (-437.78649914224), 500);
      assertNotNull(searchParams0);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals((-764.60587), searchParams0.getClaDecay(), 0.01);
      assertEquals((-437.78649914224), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-764.60587), searchParams0.getVarDecay(), 0.01);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertNotNull(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals((-764.60587), searchParams0.getClaDecay(), 0.01);
      assertEquals((-437.78649914224), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-764.60587), searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.enqueue(470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning1, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = solver1.findModel((IVecInt) vecInt0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(7);
      assertNotNull(percentLengthLearning0);
      assertEquals(7, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(7, 1785);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 7;
      intArray0[3] = 1785;
      intArray0[4] = 7;
      intArray0[5] = 32;
      intArray0[6] = 7;
      intArray0[7] = 32;
      intArray0[8] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {32, 32, 7, 1785, 7, 32, 7, 32, 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(32, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertArrayEquals(new int[] {32, 32, 7, 1785, 7, 32, 7, 32, 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(32, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(64, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(9, iVecInt0.size());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1786, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1786, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1787, solver0.newVar());
      
      // Undeclared exception!
      try { 
        clausalDataStructureWL0.createClause(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3570
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, glucose21Restarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver1.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      int int0 = (-3075);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-3075));
      assertNotNull(tabuListDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      IOrder iOrder0 = solver0.getOrder();
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertNotNull(iOrder0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, iOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      ILits iLits0 = null;
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertNotNull(iVecInt0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      int[] intArray0 = solver1.findModel();
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      assertNotNull(readOnlyVecInt0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, readOnlyVecInt0.size());
      assertFalse(readOnlyVecInt0.isEmpty());
      
      LearntBinaryClause learntBinaryClause0 = null;
      try {
        learntBinaryClause0 = new LearntBinaryClause(readOnlyVecInt0, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(16, 0);
      assertNotNull(searchParams0);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(16, percentLengthLearning0.getLimit());
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q^vS?c eUzF#@tPS");
      assertNotNull(mockPrintWriter0);
      
      solver1.printStat((PrintWriter) mockPrintWriter0, "Q^vS?c eUzF#@tPS");
      assertEquals(16, percentLengthLearning0.getLimit());
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        solver1.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-806.1), 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-806.1), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, arminRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-806.1), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-806.1), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, arminRestarts1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      int int0 = 1;
      SearchParams searchParams0 = new SearchParams(0.0, (-2685.719436), 1.0E20, 1);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2685.719436), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder(1);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, pureOrder0.getPeriod());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, (CardinalityDataStructure) null, searchParams0, pureOrder0, (RestartStrategy) null, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        solver0.backtrack(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-5095));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-5095), (-5095));
      assertNotNull(searchParams0);
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals((-5095.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-5095), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertSame(searchParams0, searchParams1);
      assertNotNull(iLogAble0);
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, searchParams1, naturalStaticOrder0, eMARestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals((-5095.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-5095), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      
      solver0.varBumpActivity((-5095));
      assertSame(searchParams0, searchParams1);
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, false);
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals((-5095), fixedLengthLearning0.getMaxLength());
      assertEquals((-5095.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-5095), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      // Undeclared exception!
      try { 
        cardinalityDataStructureYanMax0.createUnregisteredClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams((-2195.819), 5);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertNotNull(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      boolean boolean1 = solver0.isSatisfiable(false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      solver1.reset();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      Lbool lbool0 = solver0.truthValue(5);
      assertNotNull(lbool0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("U", lbool0.toString());
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, (ILogAble) null);
      assertNotNull(solver2);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {5, 5, 5}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.last());
      assertEquals(3, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertArrayEquals(new int[] {5, 5, 5}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertEquals(3, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(5, iVecInt0.last());
      
      boolean boolean2 = solver2.isSatisfiable(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {5, 5, 5}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, solver2.nVars());
      assertEquals(6, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(7, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals((-2195.819), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertEquals(3, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(5, iVecInt0.last());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, randomWalkDecorator0, noRestarts0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      
      Solver solver4 = (Solver)solver3.getSolvingEngine();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver3, solver2);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver4);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.nConstraints());
      assertEquals(5, solver4.newVar());
      assertEquals(4, solver4.realNumberOfVariables());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(4, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      SearchParams searchParams1 = new SearchParams((-710.55135618), 0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator1, arminRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.nVars());
      
      VecInt vecInt0 = new VecInt(0, 209);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Set<Integer> set0 = solver2.fromLastDecisionLevel(vecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver2, solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(set0);
      assertFalse(set0.contains(0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(9, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(8, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(8, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      Lits lits0 = (Lits)solver0.getVocabulary();
      assertSame(noRestarts0, noRestarts1);
      assertNotNull(lits0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, lits0.realnVars());
      assertEquals(9, lits0.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, lits0.realnVars());
      assertEquals(11, lits0.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(learntBinaryClause0.locked());
      assertEquals(2, learntBinaryClause0.size());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.isSatisfied());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertFalse(learntBinaryClause0.simplify());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntBinaryClause0.learnt());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      LearntBinaryClause learntBinaryClause1 = (LearntBinaryClause)learntBinaryClause0.toConstraint();
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(vecInt0, vecInt1);
      assertSame(learntBinaryClause0, learntBinaryClause1);
      assertSame(learntBinaryClause1, learntBinaryClause0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(13, lits0.nVars());
      assertFalse(learntBinaryClause0.locked());
      assertEquals(2, learntBinaryClause0.size());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.isSatisfied());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertFalse(learntBinaryClause0.simplify());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntBinaryClause0.learnt());
      assertFalse(learntBinaryClause1.simplify());
      assertEquals(1, learntBinaryClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, learntBinaryClause1.size());
      assertFalse(learntBinaryClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntBinaryClause1.getActivity(), 0.01);
      assertTrue(learntBinaryClause1.learnt());
      assertFalse(learntBinaryClause1.isSatisfied());
      assertTrue(learntBinaryClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntBinaryClause1.locked());
      
      solver0.claBumpActivity(learntBinaryClause1);
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(vecInt0, vecInt1);
      assertSame(learntBinaryClause0, learntBinaryClause1);
      assertSame(learntBinaryClause1, learntBinaryClause0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(15, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.nVars());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(15, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntBinaryClause0.locked());
      assertEquals(2, learntBinaryClause0.size());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.isSatisfied());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertFalse(learntBinaryClause0.simplify());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntBinaryClause0.learnt());
      assertFalse(learntBinaryClause1.simplify());
      assertEquals(1, learntBinaryClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, learntBinaryClause1.size());
      assertFalse(learntBinaryClause1.canBePropagatedMultipleTimes());
      assertEquals(1.0, learntBinaryClause1.getActivity(), 0.01);
      assertTrue(learntBinaryClause1.learnt());
      assertFalse(learntBinaryClause1.isSatisfied());
      assertTrue(learntBinaryClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntBinaryClause1.locked());
      
      // Undeclared exception!
      try { 
        solver1.getLiteralsPropagatedAt(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 5);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver2);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      
      boolean boolean0 = solver2.simplifyDB();
      assertTrue(boolean0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning2 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning2);
      assertEquals(0, activeLearning2.getLimit());
      assertEquals(0.95, activeLearning2.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(vecInt0, 7);
      assertNotNull(constr0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertFalse(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(7, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.locked());
      assertFalse(constr0.simplify());
      
      AtLeast atLeast0 = (AtLeast)maxSatDecorator0.addConstr(constr0);
      assertSame(constr0, atLeast0);
      assertSame(atLeast0, constr0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertFalse(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(7, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.locked());
      assertFalse(constr0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(7, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      assertNotNull(unitClauses0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(unitClauses0.simplify());
      assertFalse(unitClauses0.canBePropagatedMultipleTimes());
      assertTrue(unitClauses0.isSatisfied());
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(unitClauses0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove latest added constraint!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(activeLearning0);
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      Lits lits0 = (Lits)solver0.getVocabulary();
      assertSame(noRestarts0, noRestarts1);
      assertNotNull(lits0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(9, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(11, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2, learntBinaryClause0.size());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.locked());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      LearntBinaryClause learntBinaryClause1 = (LearntBinaryClause)learntBinaryClause0.toConstraint();
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(vecInt0, vecInt1);
      assertSame(learntBinaryClause0, learntBinaryClause1);
      assertSame(learntBinaryClause1, learntBinaryClause0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(13, solver0.nVars());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(13, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(2, learntBinaryClause0.size());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.locked());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2, learntBinaryClause1.size());
      assertFalse(learntBinaryClause1.locked());
      assertTrue(learntBinaryClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntBinaryClause1.simplify());
      assertFalse(learntBinaryClause1.isSatisfied());
      assertEquals(0.0, learntBinaryClause1.getActivity(), 0.01);
      assertTrue(learntBinaryClause1.learnt());
      assertFalse(learntBinaryClause1.canBePropagatedMultipleTimes());
      assertEquals(1, learntBinaryClause1.requiredNumberOfSatisfiedLiterals());
      
      solver0.claBumpActivity(learntBinaryClause1);
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(vecInt0, vecInt1);
      assertSame(learntBinaryClause0, learntBinaryClause1);
      assertSame(learntBinaryClause1, learntBinaryClause0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(15, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(15, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(2, learntBinaryClause0.size());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(1.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(learntBinaryClause0.locked());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2, learntBinaryClause1.size());
      assertFalse(learntBinaryClause1.locked());
      assertTrue(learntBinaryClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntBinaryClause1.simplify());
      assertFalse(learntBinaryClause1.isSatisfied());
      assertEquals(1.0, learntBinaryClause1.getActivity(), 0.01);
      assertTrue(learntBinaryClause1.learnt());
      assertFalse(learntBinaryClause1.canBePropagatedMultipleTimes());
      assertEquals(1, learntBinaryClause1.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        solver1.getLiteralsPropagatedAt(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap1, miniSATRestarts0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      int int0 = (-2216);
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      assertNotNull(activeLearning0);
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>(2.0);
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2.0, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
      assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
      assertNotNull(mixedDataStructureDanielHT1);
      
      SearchParams searchParams0 = new SearchParams(483.4207185877027, 1789);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1789, searchParams0.getInitConflictBound());
      assertEquals(483.4207185877027, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT1, searchParams0, naturalStaticOrder0, noRestarts0, (ILogAble) null);
      assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
      assertNotNull(solver1);
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1789, searchParams0.getInitConflictBound());
      assertEquals(483.4207185877027, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      solver1.setTimeoutMs(1789);
      assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT0);
      assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1789, searchParams0.getInitConflictBound());
      assertEquals(483.4207185877027, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      solver1.decayActivities();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(3486);
      assertNotNull(searchParams0);
      assertEquals(3486, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1.0);
      assertNotNull(activeLearning0);
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(3486, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      Glucose21Restarts glucose21Restarts1 = (Glucose21Restarts)solver0.getRestartStrategy();
      assertSame(glucose21Restarts0, glucose21Restarts1);
      assertSame(glucose21Restarts1, glucose21Restarts0);
      assertNotNull(glucose21Restarts1);
      assertEquals(3486, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, glucose21Restarts1);
      assertNotNull(solver1);
      assertEquals(3486, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      solver1.cancelUntilTrailLevel(3486);
      assertSame(glucose21Restarts0, glucose21Restarts1);
      assertSame(glucose21Restarts1, glucose21Restarts0);
      assertEquals(3486, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertFalse(noLearningButHeuristics1.equals((Object)noLearningButHeuristics0));
      assertNotNull(noLearningButHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(noRestarts1);
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, noRestarts0);
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(solver1);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      NoRestarts noRestarts2 = (NoRestarts)solver1.getRestartStrategy();
      assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
      assertNotSame(noRestarts2, noRestarts1);
      assertSame(noRestarts2, noRestarts0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(noRestarts0, noRestarts1);
      assertSame(noRestarts0, noRestarts2);
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertFalse(noRestarts2.equals((Object)noRestarts1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(noRestarts2);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("NoRestarts", noRestarts2.toString());
      assertEquals(9223372036854775807L, noRestarts2.nextRestartNumberOfConflict());
      assertFalse(noRestarts2.shouldRestart());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0);
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(solver2);
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      
      VecInt vecInt0 = (VecInt)solver2.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ISimplifier iSimplifier0 = solver2.getSimplifier();
      assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(noRestarts0, noRestarts1);
      assertSame(noRestarts0, noRestarts2);
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(iSimplifier0);
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams((-1744.72656047944), 195);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1744.72656047944), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(195, searchParams0.getInitConflictBound());
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertNotNull(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1744.72656047944), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(195, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      boolean boolean1 = solver0.isSatisfiable(false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1744.72656047944), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(195, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1744.72656047944), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(195, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      solver1.reset();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1744.72656047944), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(195, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.truthValue(195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 390
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = new SearchParams(500);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(noRestarts1);
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, noRestarts1, mUSLauncher0);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(solver2);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      
      Lbool lbool0 = solver2.truthValue((-98));
      assertNotSame(noRestarts1, noRestarts0);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(lbool0);
      assertEquals("U", lbool0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(16, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.forget((-1178));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(3580);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(3570);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3570, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 50;
      intArray0[1] = 3580;
      intArray0[2] = 3580;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {50, 3580, 3580}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, pureOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3570, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, glucose21Restarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertArrayEquals(new int[] {50, 3580, 3580}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.newVar());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3570, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      VecInt vecInt0 = new VecInt(50, (-1214));
      assertNotNull(vecInt0);
      assertEquals(50, vecInt0.size());
      assertEquals((-1214), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, true);
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertTrue(boolean0);
      assertEquals(50, vecInt0.size());
      assertEquals((-1214), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3570, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(1215, solver0.realNumberOfVariables());
      assertEquals(1216, solver0.newVar());
      assertEquals(1215, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      PureOrder pureOrder1 = new PureOrder(3580);
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertNotNull(pureOrder1);
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(3580, pureOrder1.getPeriod());
      
      ILogAble iLogAble1 = solver1.out;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      assertArrayEquals(new int[] {50, 3580, 3580}, intArray0);
      assertEquals(3, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, eMARestarts0, iLogAble0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver2);
      assertArrayEquals(new int[] {50, 3580, 3580}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3570, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1219, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1218, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1218, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1219, solver0.realNumberOfVariables());
      assertEquals(1220, solver0.newVar());
      assertEquals(1219, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertNotSame(pureOrder0, pureOrder1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(solver0, solver1);
      assertNotSame(solver0, solver2);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1214)}, intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(50, vecInt0.size());
      assertEquals((-1214), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3570, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1221, solver0.nVars());
      assertEquals(1221, solver0.realNumberOfVariables());
      assertEquals(1222, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams1 = new SearchParams((-1497.54751), 7, 1.0E20, (-438));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(7.0, searchParams1.getClaDecay(), 0.01);
      assertEquals((-438), searchParams1.getInitConflictBound());
      assertEquals((-1497.54751), searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E20, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-762));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, miniSATRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
      assertNotSame(searchParams0, searchParams1);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(miniSATRestarts1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(44);
      assertNotNull(fixedLengthLearning1);
      assertEquals(44, fixedLengthLearning1.getMaxLength());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, miniSATRestarts1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(44, fixedLengthLearning1.getMaxLength());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, miniSATRestarts1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(44, fixedLengthLearning1.getMaxLength());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      
      Constr constr0 = solver2.propagate();
      assertNotSame(searchParams0, searchParams1);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertNotSame(solver2, solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver1));
      assertNull(constr0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(44, fixedLengthLearning1.getMaxLength());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(500);
      assertNotNull(percentLengthLearning1);
      assertEquals(500, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams1, tabuListDecorator0, miniSATRestarts1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver3);
      assertEquals(500, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertEquals(7.0, searchParams1.getClaDecay(), 0.01);
      assertEquals((-438), searchParams1.getInitConflictBound());
      assertEquals((-1497.54751), searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E20, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-762), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(12, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.realNumberOfVariables());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      
      // Undeclared exception!
      try { 
        solver3.enqueue((-258), (Constr) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1094);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(iLogAble0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      String string0 = searchParams1.toString();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(string0);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams1, varOrderHeap0, arminRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.nVars());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      MockFile mockFile0 = new MockFile("]80zwliE[", "(<~U+/++j4FrqYBJ3");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("++j4FrqYBJ3", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/]80zwliE[/(<~U+", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/]80zwliE[/(<~U+/++j4FrqYBJ3", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      solver1.printLearntClausesInfos(printWriter0, "(<~U+/++j4FrqYBJ3");
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver0, solver1);
      assertNotSame(solver1, solver0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(10, solver1.nVars());
      assertEquals(10, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("++j4FrqYBJ3", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/]80zwliE[/(<~U+", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/]80zwliE[/(<~U+/++j4FrqYBJ3", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 1069);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(15, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(14, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(14, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver2.setLearnedConstraintsDeletionStrategy((ConflictTimer) arminRestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver0, solver1);
      assertNotSame(solver0, solver2);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(18, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(19, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(18, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1094, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(20, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(19, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(19, solver0.realNumberOfVariables());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1069;
      intArray0[1] = 1094;
      intArray0[2] = 1094;
      intArray0[3] = 1094;
      intArray0[4] = 1069;
      intArray0[5] = 1094;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 1069);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      SearchParams searchParams1 = new SearchParams((-710.55135618), 0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator1, arminRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-710.55135618), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(4, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      
      VecInt vecInt0 = new VecInt(0, 209);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator1, arminRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver3);
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 46;
      intArray0[2] = 0;
      intArray0[3] = 209;
      // Undeclared exception!
      try { 
        solver3.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 419
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = (-754);
      PureOrder pureOrder0 = new PureOrder((-754));
      assertNotNull(pureOrder0);
      assertEquals((-754), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-754), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning1 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning1, mixedDataStructureDanielWLConciseBinary0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals((-754), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver1);
      assertNotNull(minOneDecorator0);
      assertEquals((-754), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertEquals((-754), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        solver1.addParity(iVecInt0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(4290.702905987912);
      assertNotNull(activeLearning0);
      assertEquals(4290.702905987912, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(906.2594, 5);
      assertNotNull(searchParams0);
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(4290.702905987912, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(4290.702905987912, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(906.2594, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(4290.702905987912);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(4290.702905987912, activeLearning1.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax1, searchParams1, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertFalse(activeLearning0.equals((Object)activeLearning1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(4290.702905987912, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(906.2594, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(4290.702905987912, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      boolean boolean0 = solver1.undertimeout;
      assertFalse(boolean0);
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertFalse(activeLearning0.equals((Object)activeLearning1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver2);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4290.702905987912, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(906.2594, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertNotNull(solver3);
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(10, solver3.newVar());
      assertEquals(9, solver3.realNumberOfVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(9, solver3.nVars());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(4290.702905987912, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      int int0 = solver3.nAssigns();
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver3, solver0);
      assertNotSame(solver3, solver1);
      assertNotSame(activeLearning1, activeLearning0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals(0, int0);
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(11, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(11, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(12, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(4290.702905987912, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      solver1.setTimeoutOnConflicts(4);
      assertNotSame(activeLearning0, activeLearning1);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver3);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(activeLearning1, activeLearning0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertNotSame(solver1, solver3);
      assertFalse(activeLearning0.equals((Object)activeLearning1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver0.equals((Object)solver3));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.equals((Object)solver3));
      assertEquals(4290.702905987912, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(906.2594, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(906.2594, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(4290.702905987912, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning1, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = solver1.findModel((IVecInt) vecInt0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.verbose = true;
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotNull(iVecInt0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertTrue(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, iVecInt0.size());
      assertEquals(6, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotSame(iLits0, lits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertNotNull(originalWLClause0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertTrue(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertEquals(6, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.learnt());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      solver1.decayActivities();
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      IConstr iConstr0 = solver1.getIthConstr(4);
      assertNull(iConstr0);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      // Undeclared exception!
      try { 
        solver1.suggestNextLiteralToBranchOn(3475);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, (SearchParams) null, varOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        solver0.suggestNextLiteralToBranchOn(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      // Undeclared exception!
      try { 
        solver0.unset(500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, varOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      
      SearchParams searchParams0 = solver2.getSearchParams();
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver2, solver1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(searchParams0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MUSLauncher mUSLauncher1 = new MUSLauncher();
      assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
      assertNotNull(mUSLauncher1);
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher1);
      assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertEquals(1, solver3.nVars());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(7, solver2.nVars());
      assertEquals(8, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<MixedDataStructureDanielHT> solver4 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver4);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.nVars());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertNotNull(mixedDataStructureDanielWLConciseBinary1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver5 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary1, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(2, solver5.newVar());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.nConstraints());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(10, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(9, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver4);
      assertNotNull(iVecInt0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(4, solver4.newVar());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(3, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertNotNull(originalWLClause0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(6, solver4.newVar());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(5, solver4.nVars());
      assertEquals(5, solver4.realNumberOfVariables());
      assertFalse(solver4.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(2, originalWLClause0.size());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      
      IVecInt iVecInt1 = solver5.analyzeFinalConflictInTermsOfAssumptions(originalWLClause0, iVecInt0, (-463));
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver2, solver1);
      assertNotSame(mUSLauncher0, mUSLauncher1);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertNull(iVecInt1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(11, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(12, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(7, solver4.nVars());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(8, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(7, solver4.realNumberOfVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(3, solver5.nVars());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(4, solver5.newVar());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(2, originalWLClause0.size());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      
      IVecInt iVecInt2 = solver4.dimacs2internal(iVecInt0);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt0, iVecInt2);
      assertTrue(iVecInt2.equals((Object)iVecInt0));
      assertNotNull(iVecInt2);
      assertEquals(0, iVecInt2.size());
      assertTrue(iVecInt2.isEmpty());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(9, solver4.realNumberOfVariables());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals(10, solver4.newVar());
      assertEquals(9, solver4.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      IConstr iConstr0 = solver3.addAtMost(iVecInt0, 3598);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver2, solver1);
      assertNotSame(mUSLauncher1, mUSLauncher0);
      assertNotSame(iVecInt0, iVecInt2);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
      assertTrue(iVecInt0.equals((Object)iVecInt2));
      assertNull(iConstr0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(13, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(14, solver2.newVar());
      assertEquals(13, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertEquals(3, solver3.nVars());
      assertEquals(4, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(12, solver4.newVar());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(11, solver4.realNumberOfVariables());
      assertEquals(11, solver4.nVars());
      assertFalse(solver4.isVerbose());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(activeLearning0);
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver2);
      assertNotNull(minOneDecorator0);
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      try { 
        solver2.addExactly(vecInt0, 1789);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VecInt vecInt0 = new VecInt(3064, 1096);
      assertNotNull(vecInt0);
      assertEquals(1096, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3064, vecInt0.size());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3064);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3064, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertNotNull(glucose21Restarts1);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, glucose21Restarts1, iLogAble0);
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3064, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      VecInt vecInt1 = (VecInt)solver1.learnedLiterals;
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      // Undeclared exception!
      try { 
        solver0.fromLastDecisionLevel(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      clauseOnlyLearning0.init();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      solver1.decayActivities();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      
      Map<String, Number> map0 = solver1.getStat();
      assertNotNull(map0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning2);
      assertEquals(10, percentLengthLearning2.getLimit());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.nVars());
      assertEquals(5, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      
      VecInt vecInt0 = new VecInt(1, 1028);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1028, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, false);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver1));
      assertTrue(boolean0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, vecInt0.size());
      assertEquals(1028, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(7L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1029, solver0.nVars());
      assertEquals(1029, solver0.realNumberOfVariables());
      assertEquals(1030, solver0.newVar());
      
      PureOrder pureOrder0 = new PureOrder(112);
      assertNotNull(pureOrder0);
      assertEquals(112, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ILogAble iLogAble1 = solver0.out;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning2, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(112, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1032, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1033, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1032, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(7L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1033, solver0.nVars());
      assertEquals(1033, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1034, solver0.newVar());
      
      int[] intArray0 = solver0.findModel((IVecInt) vecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver2);
      assertNotSame(solver0, solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1028}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, vecInt0.size());
      assertEquals(1028, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(7L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1035, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1035, solver0.realNumberOfVariables());
      assertEquals(1036, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      UnitClause unitClause0 = new UnitClause(32);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      Constr constr0 = lits0.getReason(32);
      assertNull(constr0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      // Undeclared exception!
      try { 
        solver0.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(2105);
      assertNotNull(fixedLengthLearning0);
      assertEquals(2105, fixedLengthLearning0.getMaxLength());
      
      String string0 = levelBasedVarOrderHeap0.toString();
      assertEquals("Level and activity based heuristics using a heap phase appearing in latest learned clause", string0);
      assertNotNull(string0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2105, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2105, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      String string1 = searchParams0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics1 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics1);
      
      ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertNotNull(clausalDataStructureWL2);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics1, clausalDataStructureWL2, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL2));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2105, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL2);
      assertNotSame(solver0, solver1);
      assertNotSame(clausalDataStructureWL2, clausalDataStructureWL0);
      assertNotSame(clausalDataStructureWL2, clausalDataStructureWL1);
      assertNotSame(solver1, solver0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL2));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2105, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      int[] intArray0 = new int[12];
      intArray0[0] = 1069;
      intArray0[1] = 1069;
      intArray0[2] = 1094;
      intArray0[3] = 2105;
      intArray0[4] = 16;
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, 202);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      SearchParams searchParams1 = new SearchParams(0.0, 0.0, 0.0, 526);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(526, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"_Jruv");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("\"_Jruv", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      SearchParams searchParams2 = new SearchParams(0.0, 0.0, 0.0, 2026);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertNotNull(searchParams2);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
      assertEquals(2026, searchParams2.getInitConflictBound());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams2, levelBasedVarOrderHeap0, noRestarts0);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertNotNull(solver0);
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
      assertEquals(2026, searchParams2.getInitConflictBound());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      solver0.printInfos((PrintWriter) mockPrintWriter0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(searchParams2, searchParams1);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
      assertEquals(2026, searchParams2.getInitConflictBound());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(526, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      // Undeclared exception!
      try { 
        solver1.model(526);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      SearchParams searchParams0 = new SearchParams(1.5, 4238.60325634733, 0.0, 43);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(43, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(4238.60325634733, searchParams0.getClaDecay(), 0.01);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertNotNull(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertNull(restartStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureSingleWL> solver1 = null;
      try {
        solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, (MixedDataStructureSingleWL) null, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      Pair pair0 = new Pair();
      assertNotNull(pair0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      pair0.setBacktrackLevel(0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      pair0.setBacktrackLevel((-2229));
      assertEquals((-2229), pair0.getBacktrackLevel());
      
      Constr constr0 = pair0.getReason();
      assertNull(constr0);
      assertEquals((-2229), pair0.getBacktrackLevel());
      
      // Undeclared exception!
      try { 
        solver1.analyze((Constr) null, pair0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(16, 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        solver0.primeImplicant((-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(16, 0);
      assertNotNull(searchParams0);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureDanielHT>(3199);
      assertNotNull(percentLengthLearning2);
      assertEquals(3199, percentLengthLearning2.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(noRestarts1);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning2, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, noRestarts1);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(solver0);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3199, percentLengthLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      NoRestarts noRestarts2 = (NoRestarts)solver0.getRestartStrategy();
      assertNotSame(noRestarts1, noRestarts0);
      assertSame(noRestarts1, noRestarts2);
      assertNotSame(noRestarts2, noRestarts0);
      assertSame(noRestarts2, noRestarts1);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertFalse(noRestarts2.equals((Object)noRestarts0));
      assertNotNull(noRestarts2);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3199, percentLengthLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("NoRestarts", noRestarts2.toString());
      assertEquals(9223372036854775807L, noRestarts2.nextRestartNumberOfConflict());
      assertFalse(noRestarts2.shouldRestart());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, noRestarts1);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(solver1);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-61.3775979926));
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-61.3775979926), activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts1);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(solver2);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-61.3775979926), activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(minOneDecorator0);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3199, percentLengthLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(minOneDecorator0);
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(minOneDecorator1);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertEquals(3199, percentLengthLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      VecInt vecInt1 = (VecInt)minOneDecorator1.createBlockingClauseForCurrentModel();
      assertNotSame(minOneDecorator0, minOneDecorator1);
      assertNotSame(minOneDecorator1, minOneDecorator0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(noRestarts1, noRestarts0);
      assertSame(noRestarts1, noRestarts2);
      assertFalse(minOneDecorator0.equals((Object)minOneDecorator1));
      assertFalse(minOneDecorator1.equals((Object)minOneDecorator0));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(vecInt1);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(minOneDecorator1.hasNoObjectiveFunction());
      assertFalse(minOneDecorator1.isOptimal());
      assertTrue(minOneDecorator1.nonOptimalMeansSatisfiable());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(3199, percentLengthLearning2.getLimit());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      try { 
        solver2.addExactly(vecInt0, 1787);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(762);
      assertNotNull(percentLengthLearning0);
      assertEquals(762, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, varOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, varOrderHeap0, noRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(762, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertSame(searchParams0, searchParams1);
      assertNotNull(iVecInt0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-6), iVecInt0.last());
      assertEquals(6, iVecInt0.size());
      
      cardinalityDataStructureYanMin0.createUnregisteredCardinalityConstraint(iVecInt0, 762);
      solver2.setDBSimplificationAllowed(false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q^vS?c eUzF#@tPS");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b$)Nl4K}acB\"m;");
      assertNotNull(mockPrintWriter0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      VecInt vecInt0 = new VecInt(3, 500);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(500, vecInt0.last());
      assertEquals(3, vecInt0.size());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-440.048134141266));
      assertNotNull(activeLearning0);
      assertEquals((-440.048134141266), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin1, randomWalkDecorator0, miniSATRestarts0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-440.048134141266), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, miniSATRestarts0);
      assertNotNull(solver2);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      int int0 = solver2.getPropagationLevel();
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      UnitClause unitClause0 = new UnitClause(15);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      
      solver0.record(unitClause0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      boolean boolean0 = solver1.simplifyDB();
      assertTrue(boolean0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1716);
      assertNotNull(percentLengthLearning0);
      assertEquals(1716, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      ArminRestarts arminRestarts1 = new ArminRestarts();
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertNotNull(arminRestarts1);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL1, searchParams0, subsetVarOrder0, arminRestarts1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertNotNull(solver2);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      
      int int0 = solver2.nVars();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(2, int0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      
      int int1 = solver0.realNumberOfVariables();
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1716, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      
      ILogAble iLogAble0 = solver3.getLogger();
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver3, solver2);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(iLogAble0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1716, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      
      Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, arminRestarts0, iLogAble0);
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver4);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1716, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(5, solver3.realNumberOfVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(5, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(1, solver4.realNumberOfVariables());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(2, solver4.newVar());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.decisionLevel());
      
      int int2 = solver4.nVars();
      assertNotSame(arminRestarts0, arminRestarts1);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver3, solver2);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, int2);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1716, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(7, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals(8, solver3.newVar());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(4, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(3, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      
      int int0 = solver1.decisionLevel();
      assertEquals(0, int0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      
      solver2.cancelUntilTrailLevel(85);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver3 = null;
      try {
        solver3 = new Solver<MixedDataStructureDanielWL>((LearningStrategy<MixedDataStructureDanielWL>) null, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap1, glucose21Restarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(solver1);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(iLogAble0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(11, solver2.newVar());
      assertEquals(10, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(10, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      
      percentLengthLearning0.setSolver(solver2);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(solver0, solver2);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertNotSame(solver2, solver0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(15, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(14, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(15, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(14, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, naturalStaticOrder0, lubyRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      
      SearchParams searchParams1 = solver3.getSearchParams();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver3, solver0);
      assertNotSame(solver3, solver2);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver5 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics1, mixedDataStructureDanielHT0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.decisionLevel());
      assertFalse(solver5.isVerbose());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(0, solver5.nConstraints());
      assertEquals(2, solver5.newVar());
      assertEquals("c ", solver5.getLogPrefix());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver6 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver6);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(8, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(7, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver6.getTimeout());
      assertEquals(0, solver6.nConstraints());
      assertFalse(solver6.isSolverKeptHot());
      assertFalse(solver6.isVerbose());
      assertEquals(2, solver6.newVar());
      assertEquals(1, solver6.realNumberOfVariables());
      assertEquals(0, solver6.decisionLevel());
      assertEquals(1, solver6.nVars());
      assertEquals(0, solver6.currentDecisionLevel());
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(0, solver6.getPropagationLevel());
      assertEquals("c ", solver6.getLogPrefix());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver6);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver3, solver0);
      assertNotSame(solver3, solver2);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(9, solver3.realNumberOfVariables());
      assertEquals(10, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(9, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver6.getTimeout());
      assertEquals(0, solver6.nConstraints());
      assertFalse(solver6.isSolverKeptHot());
      assertFalse(solver6.isVerbose());
      assertEquals(0, solver6.decisionLevel());
      assertEquals(0, solver6.currentDecisionLevel());
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(3, solver6.nVars());
      assertEquals(0, solver6.getPropagationLevel());
      assertEquals(4, solver6.newVar());
      assertEquals(3, solver6.realNumberOfVariables());
      assertEquals("c ", solver6.getLogPrefix());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(originalWLClause0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(12, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(11, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(11, solver3.realNumberOfVariables());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver6.getTimeout());
      assertEquals(0, solver6.nConstraints());
      assertFalse(solver6.isSolverKeptHot());
      assertFalse(solver6.isVerbose());
      assertEquals(0, solver6.decisionLevel());
      assertEquals(0, solver6.currentDecisionLevel());
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(0, solver6.getPropagationLevel());
      assertEquals(5, solver6.nVars());
      assertEquals(6, solver6.newVar());
      assertEquals("c ", solver6.getLogPrefix());
      assertEquals(5, solver6.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt1 = solver6.analyzeFinalConflictInTermsOfAssumptions(originalWLClause0, iVecInt0, 0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver3, solver0);
      assertNotSame(solver3, solver2);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNull(iVecInt1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(13, solver3.realNumberOfVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(14, solver3.newVar());
      assertEquals(13, solver3.nVars());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver6.getTimeout());
      assertEquals(0, solver6.nConstraints());
      assertFalse(solver6.isSolverKeptHot());
      assertFalse(solver6.isVerbose());
      assertEquals(0, solver6.decisionLevel());
      assertEquals(8, solver6.newVar());
      assertEquals(7, solver6.realNumberOfVariables());
      assertEquals(0, solver6.currentDecisionLevel());
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(0, solver6.getPropagationLevel());
      assertEquals("c ", solver6.getLogPrefix());
      assertEquals(7, solver6.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      // Undeclared exception!
      try { 
        solver5.dimacs2internal((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      VecInt vecInt0 = new VecInt(1037, 7);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1037, vecInt0.size());
      assertEquals(7, vecInt0.last());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ILogAble iLogAble0 = solver2.out;
      assertNotNull(iLogAble0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 9);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielWL> solver3 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      
      int int0 = solver3.getTimeout();
      assertSame(noRestarts0, noRestarts1);
      assertEquals(2147483, int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, noRestarts1);
      assertNotNull(solver4);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver4.realNumberOfVariables());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(2, solver4.newVar());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver4.isSatisfiable();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertTrue(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(4, solver4.newVar());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(3, solver4.nVars());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      int int1 = solver0.decisionLevel();
      assertSame(noRestarts0, noRestarts1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 202);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, glucose21Restarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.newVar());
      assertEquals(4, solver1.nVars());
      
      VecInt vecInt0 = new VecInt(0, (-1671));
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int1 = 2059;
      try { 
        solver0.addClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertTrue(boolean0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      int int0 = 0;
      double double0 = 1.0E100;
      SearchParams searchParams1 = new SearchParams(1.0E100, 1117);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1117, searchParams1.getInitConflictBound());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      VecInt vecInt0 = (VecInt)solver0.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8);
      solverArray0[0] = solver0;
      solverArray0[1] = solver0;
      solverArray0[2] = solver0;
      solverArray0[3] = solver0;
      solverArray0[4] = solver0;
      solverArray0[5] = solver0;
      solverArray0[6] = solver0;
      solverArray0[7] = solver0;
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(solverArray0);
      assertNotNull(manyCore0);
      assertEquals(8, solverArray0.length);
      
      try { 
        manyCore0.addClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 5);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.nVars());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      
      boolean boolean0 = solver1.assume(5);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(11, solver1.newVar());
      assertEquals(1, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.nVars());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        solver1.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-4608.4), (-4608.4), (-3015.119575338321), (-3797));
      assertNotNull(searchParams0);
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder(299);
      assertNotNull(pureOrder0);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(4195);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, pureOrder0, lubyRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertNotSame(searchParams1, searchParams0);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(4195, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotNull(iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, lubyRestarts1, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(4195, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(7, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(6, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(6, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      IVecInt iVecInt0 = solver3.unsatExplanation();
      assertNull(iVecInt0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielHT> solver4 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0, mUSLauncher0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver4.equals((Object)solver0));
      assertNotNull(solver4);
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(7, solver4.nVars());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(7, solver4.realNumberOfVariables());
      assertEquals(8, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      
      MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver4.getRestartStrategy();
      assertNotSame(searchParams0, searchParams1);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertNotSame(solver4, solver0);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver4.equals((Object)solver0));
      assertNotNull(miniSATRestarts1);
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(9, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(9, solver4.realNumberOfVariables());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(10, solver4.newVar());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts1.shouldRestart());
      
      Solver<CardinalityDataStructure> solver5 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver4.equals((Object)solver0));
      assertNotNull(solver5);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(11, solver4.nVars());
      assertEquals(11, solver4.realNumberOfVariables());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(12, solver4.newVar());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(1, solver5.nVars());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.getPropagationLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.nConstraints());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(2, solver5.newVar());
      
      solver5.setDataStructureFactory(cardinalityDataStructure0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertNotSame(solver4, solver0);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver4.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(13, solver4.realNumberOfVariables());
      assertEquals(14, solver4.newVar());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(13, solver4.nVars());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.getPropagationLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.nConstraints());
      assertEquals(3, solver5.nVars());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(4, solver5.newVar());
      
      // Undeclared exception!
      try { 
        solver2.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, varOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      VarOrderHeap varOrderHeap1 = (VarOrderHeap)solver0.getOrder();
      assertSame(varOrderHeap0, varOrderHeap1);
      assertSame(varOrderHeap1, varOrderHeap0);
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      SearchParams searchParams1 = new SearchParams((-582.449), 0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-582.449), searchParams1.getConflictBoundIncFactor(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-582.449), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(4, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      
      VecInt vecInt0 = new VecInt(1814, 7);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertEquals(1814, vecInt0.size());
      
      Set<Integer> set0 = solver2.fromLastDecisionLevel(vecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver2, solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(set0);
      assertTrue(set0.contains(7));
      assertFalse(set0.contains(0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-582.449), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(8, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(8, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertEquals(1814, vecInt0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      naturalStaticOrder0.init();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      solver0.setSimplifier(simplificationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Issue when assigning simplifier: disabling simplification");
      assertNotNull(mockPrintWriter0);
      
      solver1.printStat((PrintWriter) mockPrintWriter0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1432));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(500);
      assertNotNull(searchParams0);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-2267));
      assertNotNull(tabuListDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      
      IVecInt iVecInt1 = minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt1);
      assertEquals((-1432), fixedLengthLearning0.getMaxLength());
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      
      try { 
        solver0.addAtMost(iVecInt1, (-1432));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      VecInt vecInt0 = new VecInt(1024, 7);
      assertNotNull(vecInt0);
      assertEquals(1024, vecInt0.size());
      assertEquals(7, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ILogAble iLogAble0 = solver2.out;
      assertNotNull(iLogAble0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 3428);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielWL> solver3 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      
      int int0 = solver3.getTimeout();
      assertSame(noRestarts0, noRestarts1);
      assertEquals(2147483, int0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, noRestarts1);
      assertNotNull(solver4);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver4.nVars());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(2, solver4.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver4.isSatisfiable();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertTrue(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(3, solver4.nVars());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(4, solver4.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      int int1 = solver0.decisionLevel();
      assertSame(noRestarts0, noRestarts1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(7);
      assertNotNull(percentLengthLearning0);
      assertEquals(7, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(7, 1785);
      assertNotNull(searchParams0);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(7, lubyRestarts0.getFactor());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(7, lubyRestarts0.getFactor());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      int[] intArray0 = new int[27];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 32;
      intArray0[3] = (-975);
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 32;
      intArray0[7] = 7;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(27, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(27, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver0.dimacs2internal(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      VecInt vecInt0 = (VecInt)solver0.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      // Undeclared exception!
      try { 
        solver0.getLiteralsPropagatedAt(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      SearchParams searchParams0 = new SearchParams(3580);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(50);
      assertNotNull(pureOrder0);
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      VecInt vecInt0 = new VecInt(3, 3580);
      assertNotNull(vecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3580, vecInt0.last());
      
      boolean boolean0 = solver1.isSatisfiable((IVecInt) vecInt0, true);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3581, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3581, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3582, solver1.newVar());
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3580, vecInt0.last());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      PureOrder pureOrder1 = new PureOrder(1805);
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertNotNull(pureOrder1);
      assertEquals(1805, pureOrder1.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      ILogAble iLogAble1 = solver0.out;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      solver1.isSatisfiable(true);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, varOrderHeap0, miniSATRestarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertNotNull(solver0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertNotNull(iLogAble0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, miniSATRestarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertNotNull(solver1);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      varOrderHeap0.updateVarAtDecisionLevel((-2995));
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver1.isSatisfiable(true);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertTrue(boolean0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap1, miniSATRestarts0, iLogAble0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(solver2);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver2.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams(7, 1785);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(7, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      searchParams0.setVarDecay(32);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VecInt vecInt0 = new VecInt(32, (-1352));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1352), vecInt0.last());
      assertEquals(32, vecInt0.size());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(32, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      Constr constr0 = learntHTClause0.toConstraint();
      assertSame(learntHTClause0, constr0);
      assertSame(constr0, learntHTClause0);
      assertNotNull(constr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(32, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertEquals(32, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        solver0.record(constr0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-5261);
      intArray0[1] = (-836);
      intArray0[2] = 1032;
      intArray0[3] = 0;
      intArray0[4] = 112;
      intArray0[5] = 112;
      intArray0[6] = (-191);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {(-5261), (-836), 1032, 0, 112, 112, (-191)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {(-5261), (-836), 1032, 0, 112, 112, (-191)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setNeedToReduceDB(false);
      assertArrayEquals(new int[] {(-5261), (-836), 1032, 0, 112, 112, (-191)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-5261));
      assertNotNull(percentLengthLearning0);
      assertEquals((-5261), percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(112);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(112, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {(-5261), (-836), 1032, 0, 112, 112, (-191)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(112, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals((-5261), percentLengthLearning0.getLimit());
      
      // Undeclared exception!
      try { 
        solver1.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reference to the constraint to remove needed!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(7);
      assertNotNull(percentLengthLearning0);
      assertEquals(7, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder(1794);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1794, pureOrder0.getPeriod());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 7);
      assertNotNull(tabuListDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1794, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1794, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVec<Constr> iVec0 = solver0.getLearnedConstraints();
      assertNotNull(iVec0);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1794, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = solver1.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(6, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(6, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      
      UnitClause unitClause0 = new UnitClause(15);
      assertNotNull(unitClause0);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      solver2.record(unitClause0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver2, solver1);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(12, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(11, solver2.newVar());
      assertEquals(10, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(14, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(13, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(13, solver1.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      
      solver3.decayActivities();
      assertNotSame(solver1, solver2);
      assertNotSame(solver3, solver0);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(16, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(15, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(15, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      
      boolean boolean0 = solver1.isVerbose();
      assertNotSame(solver1, solver2);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(18, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(17, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(17, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(maxSatDecorator0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(minOneDecorator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNull(iVecInt0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(fixedLengthLearning0);
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(4, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(13, solver0.nVars());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver2.addExactly((IVecInt) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder(1838);
      assertNotNull(pureOrder0);
      assertEquals(1838, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1838, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      solver0.addAllClauses(vec0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1838, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1838;
      // Undeclared exception!
      try { 
        solver0.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(749);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(749, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 749;
      intArray0[1] = 749;
      intArray0[2] = 749;
      intArray0[3] = (-887);
      intArray0[4] = 749;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {749, 749, 749, (-887), 749}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(749, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver0.findModel(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 749
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-360.982), 16);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {16, 16, 16}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, eMARestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {16, 16, 16}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertArrayEquals(new int[] {16, 16, 16}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(16, searchParams1.getInitConflictBound());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {16, 16, 16}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(16, searchParams1.getInitConflictBound());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      solver1.setSearchParams(searchParams0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertArrayEquals(new int[] {16, 16, 16}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(16, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-360.982), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(16, searchParams1.getInitConflictBound());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1069;
      intArray0[1] = 0;
      intArray0[2] = (-307);
      intArray0[3] = 1171;
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1171);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1171.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertNotNull(glucose21Restarts1);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts1);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertNotNull(solver2);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1171.0, activeLearning0.getActivityPercent(), 0.01);
      
      glucose21Restarts1.reset();
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      SearchParams searchParams1 = solver2.getSearchParams();
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1171.0, activeLearning0.getActivityPercent(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertNotNull(solver3);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1171.0, activeLearning0.getActivityPercent(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver4.equals((Object)solver3));
      assertNotNull(solver4);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(7, solver2.nVars());
      assertEquals(8, solver2.newVar());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(4, solver4.newVar());
      assertEquals(3, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1171.0, activeLearning0.getActivityPercent(), 0.01);
      
      int int0 = solver4.nextFreeVarId(true);
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver4, solver3);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver4.equals((Object)solver3));
      assertEquals(5, int0);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(10, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(9, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(6, solver4.realNumberOfVariables());
      assertEquals(7, solver4.newVar());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(6, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1171.0, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      SearchParams searchParams0 = new SearchParams(3580);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(50);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(50);
      assertNotNull(percentLengthLearning0);
      assertEquals(50, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver1);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(50, percentLengthLearning0.getLimit());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      
      VecInt vecInt0 = new VecInt(1714, 1714);
      assertNotNull(vecInt0);
      assertEquals(1714, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1714, vecInt0.last());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1089);
      assertNotNull(fixedLengthLearning1);
      assertEquals(1089, fixedLengthLearning1.getMaxLength());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1089, fixedLengthLearning1.getMaxLength());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      boolean boolean0 = solver2.isSatisfiable((IVecInt) vecInt0, true);
      assertNotSame(solver2, solver1);
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1714, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1714, vecInt0.last());
      assertEquals(1089, fixedLengthLearning1.getMaxLength());
      assertEquals(1715, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1716, solver2.newVar());
      assertEquals(1715, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      PureOrder pureOrder1 = new PureOrder((-3665));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertNotNull(pureOrder1);
      assertEquals((-3665), pureOrder1.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      VecInt vecInt1 = new VecInt(3580);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-307);
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 46);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(7);
      assertNotNull(percentLengthLearning0);
      assertEquals(7, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(7, 1785);
      assertNotNull(searchParams0);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(7, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      
      UnitClause unitClause0 = new UnitClause(7);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.simplify());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(7, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      IVecInt iVecInt0 = solver2.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      UnitClauses unitClauses0 = new UnitClauses(iVecInt0);
      assertNotNull(unitClauses0);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(unitClauses0.isSatisfied());
      assertFalse(unitClauses0.canBePropagatedMultipleTimes());
      assertFalse(unitClauses0.simplify());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      // Undeclared exception!
      try { 
        solver1.record(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 0;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DwelX~z)#GE");
      assertFalse(boolean0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      int int1 = solver1.currentDecisionLevel();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, clausalDataStructureWL0, naturalStaticOrder0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-613));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      NaturalStaticOrder naturalStaticOrder1 = (NaturalStaticOrder)solver1.getOrder();
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotNull(naturalStaticOrder1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      SearchParams searchParams1 = new SearchParams(32, 1655);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1655, searchParams1.getInitConflictBound());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams2 = new SearchParams(1117, 1655);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotNull(searchParams2);
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams2, naturalStaticOrder1, lubyRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver2.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder1, glucose21Restarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(5, solver2.nVars());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(4, solver3.nVars());
      assertEquals(4, solver3.realNumberOfVariables());
      assertEquals(5, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      
      VecInt vecInt0 = new VecInt(1805, 213);
      assertNotNull(vecInt0);
      assertEquals(1805, vecInt0.size());
      assertEquals(213, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      PureOrder pureOrder0 = new PureOrder((-613));
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      
      ILogAble iLogAble1 = solver3.out;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, fixedPeriodRestarts0, iLogAble1);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertNotNull(solver4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.nVars());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(9, solver1.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(11, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(12, solver2.newVar());
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(10, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(10, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(11, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(9, solver4.realNumberOfVariables());
      assertFalse(solver4.isVerbose());
      assertEquals(10, solver4.newVar());
      assertEquals(9, solver4.nVars());
      
      Set<Integer> set0 = solver4.fromLastDecisionLevel(vecInt0);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver3, solver4);
      assertNotSame(solver3, solver2);
      assertSame(iLogAble1, iLogAble0);
      assertNotSame(solver4, solver3);
      assertNotSame(solver4, solver2);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver4));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertNotNull(set0);
      assertFalse(set0.contains((-613)));
      assertTrue(set0.contains(213));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(12, solver1.newVar());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(17, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(18, solver2.newVar());
      assertEquals(17, solver2.realNumberOfVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(16, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(16, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(17, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1805, vecInt0.size());
      assertEquals(213, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-613), pureOrder0.getPeriod());
      assertEquals(16, solver4.newVar());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(15, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(15, solver4.realNumberOfVariables());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      int[] intArray0 = solver2.findModel((IVecInt) vecInt0);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertNotNull(intArray0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {213}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(18, solver0.newVar());
      assertEquals(17, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(13, solver1.nVars());
      assertEquals(14, solver1.newVar());
      assertEquals(13, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1117.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1655, searchParams2.getInitConflictBound());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(215, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(214, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(214, solver2.nVars());
      assertEquals(1805, vecInt0.size());
      assertEquals(213, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      solver1.setLogPrefix("z5swS?cM_-+q4");
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(19, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(19, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(20, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(15, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(16, solver1.newVar());
      assertEquals("z5swS?cM_-+q4", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(15, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      int int0 = solver0.newVar();
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(21, int0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(22, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(22, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(23, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.nVars());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1069;
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      intArray0[1] = 0;
      intArray0[2] = (-307);
      intArray0[3] = 1171;
      intArray0[4] = 1000;
      intArray0[5] = 0;
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      
      solver2.modelFound();
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, 1069);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      searchParams0.setClaDecay((-2540.2905663530046));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      naturalStaticOrder0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      searchParams0.setClaDecay((-2540.2905663530046));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      
      boolean boolean1 = solver1.isSatisfiable();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      
      solver1.sortOnActivity();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals((-2540.2905663530046), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.toString(",|VK&NpaD#]SU2h");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1263.582834979314);
      assertNotNull(activeLearning0);
      assertEquals(1263.582834979314, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-333));
      assertNotNull(searchParams0);
      assertEquals((-333), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder((-333));
      assertNotNull(pureOrder0);
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1107);
      assertNotNull(tabuListDecorator0);
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(1263.582834979314, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-333), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(1263.582834979314, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-333), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-333), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver0.dimacs2internal(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(tabuListDecorator0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL1 = new MixedDataStructureDanielWL();
      assertFalse(mixedDataStructureDanielWL1.equals((Object)mixedDataStructureDanielWL0));
      assertNotNull(mixedDataStructureDanielWL1);
      
      SearchParams searchParams0 = null;
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics1, mixedDataStructureDanielWL1, (SearchParams) null, randomWalkDecorator0, glucose21Restarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(mixedDataStructureDanielWL1.equals((Object)mixedDataStructureDanielWL0));
      assertNotNull(solver0);
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      solver0.setOrder(varOrderHeap0);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(mixedDataStructureDanielWL1, mixedDataStructureDanielWL0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(mixedDataStructureDanielWL1.equals((Object)mixedDataStructureDanielWL0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      // Undeclared exception!
      try { 
        solver0.forget(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams((-3190));
      assertNotNull(searchParams0);
      assertEquals((-3190), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver0 = null;
      try {
        solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, (IOrder) null, arminRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 1987;
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1987);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1987, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      String string0 = fixedLengthLearning0.toString();
      assertEquals("Limit learning to clauses of size smaller or equal to 1987", string0);
      assertNotNull(string0);
      assertEquals(1987, fixedLengthLearning0.getMaxLength());
      
      RestartStrategy restartStrategy0 = null;
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(1987, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1987;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, (-2131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3974
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1.0), 5);
      assertNotNull(searchParams0);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      boolean boolean0 = solver1.assume(5);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.nVars());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(11, solver1.newVar());
      assertEquals(1, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(2604);
      assertNotNull(percentLengthLearning0);
      assertEquals(2604, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2604, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2604, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2604, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotNull(iVecInt0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2604, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(6, iVecInt0.size());
      
      Set<Integer> set0 = solver1.fromLastDecisionLevel(iVecInt0);
      assertNotNull(set0);
      assertFalse(set0.contains(2604));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2604, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(6, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(6, iVecInt0.size());
      assertFalse(set0.isEmpty());
      assertEquals(6, set0.size());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver2);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      
      IVecInt iVecInt1 = solver2.getOutLearnt();
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver3);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver3.isSatisfiable(false);
      assertTrue(boolean0);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(3, solver3.nVars());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int int0 = 7;
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 7);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      double[] doubleArray0 = solver0.getVariableHeuristics();
      assertNotNull(doubleArray0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNull(iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotNull(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.last());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        dimacsOutputSolver0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(vecInt0, 7);
      assertNotNull(constr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(7, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.locked());
      assertEquals(0, constr0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.learnt());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      
      AtLeast atLeast0 = (AtLeast)maxSatDecorator0.addConstr(constr0);
      assertSame(constr0, atLeast0);
      assertSame(atLeast0, constr0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(7, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.locked());
      assertEquals(0, constr0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.learnt());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(7, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      boolean boolean1 = solver0.removeSubsumedConstr(atLeast0);
      assertSame(constr0, atLeast0);
      assertSame(atLeast0, constr0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertTrue(boolean1 == boolean0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertTrue(boolean1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(7, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.locked());
      assertEquals(0, constr0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.learnt());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(7, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(1.0E-100, (-255));
      assertNotNull(searchParams0);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(percentLengthLearning0);
      assertEquals(32, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, varOrderHeap0, lubyRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals(5, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      VecInt vecInt0 = new VecInt(1805, 1);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1805, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      boolean boolean0 = solver1.isSatisfiable((IVecInt) vecInt0, true);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(8, solver1.nVars());
      assertEquals(8, solver1.realNumberOfVariables());
      assertEquals(9, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1805, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      PureOrder pureOrder0 = new PureOrder(205);
      assertNotNull(pureOrder0);
      assertEquals(205, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ILogAble iLogAble1 = solver1.out;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, varOrderHeap0, glucose21Restarts0, iLogAble1);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(14, solver2.newVar());
      assertEquals(13, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(13, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(14, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(14, solver1.realNumberOfVariables());
      assertEquals(15, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      int[] intArray0 = solver1.findModel((IVecInt) vecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver2);
      assertNotSame(solver0, solver1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertNotSame(solver1, solver2);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.equals((Object)solver2));
      assertNotNull(intArray0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(19, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(20, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(19, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(18, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(19, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(18, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1805, vecInt0.size());
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c ");
      assertFalse(boolean0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-4608.4), (-4608.4), (-3015.119575338321), (-3797));
      assertNotNull(searchParams0);
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(299);
      assertNotNull(pureOrder0);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(4195);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, pureOrder0, lubyRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertNotSame(searchParams1, searchParams0);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(4195, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotNull(iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, lubyRestarts1, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-3015.119575338321), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4608.4), searchParams0.getVarDecay(), 0.01);
      assertEquals((-3797), searchParams0.getInitConflictBound());
      assertEquals((-4608.4), searchParams0.getClaDecay(), 0.01);
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4195, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(4195, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver2.realNumberOfVariables());
      assertEquals(7, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(6, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertNotNull(solver3);
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      IVecInt iVecInt0 = solver3.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(299, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      // Undeclared exception!
      try { 
        solver2.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      String[] stringArray0 = new String[0];
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = (-255);
      SearchParams searchParams0 = new SearchParams(1.0E-100, (-255));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(percentLengthLearning0);
      assertEquals(32, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, varOrderHeap0, lubyRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        solver0.model(Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      UnitClause unitClause0 = new UnitClause(15);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      solver0.record(unitClause0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      solver1.decayActivities();
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams1 = new SearchParams(15, 3, 1.0, 3);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(3.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(15.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver2);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(3.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(15.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      boolean boolean1 = solver2.isDBSimplificationAllowed();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(3.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(15.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      assertNotNull(percentLengthLearning0);
      assertEquals(16, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(16, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(16, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q^vS?c eUzF#@tPS");
      assertNotNull(mockPrintWriter0);
      
      solver1.printStat((PrintWriter) mockPrintWriter0, "Q^vS?c eUzF#@tPS");
      assertEquals(16, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(16);
      assertNotNull(percentLengthLearning2);
      assertEquals(16, percentLengthLearning2.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning2, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, miniSATRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(16, percentLengthLearning2.getLimit());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      
      boolean boolean0 = solver2.enqueue(16);
      assertTrue(boolean0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(16.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(16, percentLengthLearning2.getLimit());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics1 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics1, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver2);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      
      ILogAble iLogAble1 = solver2.getLogger();
      assertSame(searchParams0, searchParams1);
      assertSame(iLogAble0, iLogAble1);
      assertSame(searchParams1, searchParams0);
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      
      SearchParams searchParams2 = solver1.getSearchParams();
      assertSame(searchParams0, searchParams2);
      assertSame(searchParams0, searchParams1);
      assertSame(iLogAble0, iLogAble1);
      assertSame(searchParams2, searchParams1);
      assertSame(searchParams2, searchParams0);
      assertNotNull(searchParams2);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(10, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics1, clausalDataStructureWL0, searchParams2, levelBasedVarOrderHeap0, eMARestarts0, iLogAble1);
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(14, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(12, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(6, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(7, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(6, solver3.realNumberOfVariables());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        solver2.addAtMostOnTheFly(intArray0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      clauseOnlyLearning0.init();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, varOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, varOrderHeap0, fixedPeriodRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(3656);
      assertNotNull(percentLengthLearning0);
      assertEquals(3656, percentLengthLearning0.getLimit());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, varOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver2);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3656, percentLengthLearning0.getLimit());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      
      VecInt vecInt0 = (VecInt)solver2.implied;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(99);
      assertNotNull(percentLengthLearning0);
      assertEquals(99, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-851));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>(195);
      assertNotNull(percentLengthLearning2);
      assertEquals(195, percentLengthLearning2.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning2, cardinalityDataStructureYanMax0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(195, percentLengthLearning2.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 5);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(6, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      boolean boolean0 = solver1.assume(5);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(10, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(11, solver1.newVar());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(14, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(13, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver2, true);
      assertFalse(solver0.equals((Object)solver1));
      assertNotNull(maxSatDecorator0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      IVecInt iVecInt0 = maxSatDecorator0.unsatExplanation();
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertFalse(solver0.equals((Object)solver1));
      assertNull(iVecInt0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(18, solver0.newVar());
      assertEquals(17, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(6, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      // Undeclared exception!
      try { 
        solver2.addAtLeast((IVecInt) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(10);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(10, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(10, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(10, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      // Undeclared exception!
      try { 
        solver1.fromLastDecisionLevel((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(5);
      assertNotNull(activeLearning1);
      assertEquals(5.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(4);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      // Undeclared exception!
      try { 
        solver0.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = manyCore0.addClause(vecInt0);
      assertNotNull(iConstr0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, stringArray0.length);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, iConstr0.size());
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(iConstr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      SearchParams searchParams0 = new SearchParams(192);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(192, searchParams0.getInitConflictBound());
      
      String string0 = searchParams0.toString();
      assertNotNull(string0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(192, searchParams0.getInitConflictBound());
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, varOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(192, searchParams0.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(7, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(6, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(10, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(9, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(9, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(192, searchParams0.getInitConflictBound());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver2.setLearnedConstraintsDeletionStrategy((ConflictTimer) noRestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(12, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(11, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(192, searchParams0.getInitConflictBound());
      
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly((int[]) null, (-538));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(99);
      assertNotNull(percentLengthLearning0);
      assertEquals(99, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-851));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, (SearchParams) null, subsetVarOrder0, arminRestarts1);
      assertNotNull(solver1);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-851));
      assertNotNull(activeLearning0);
      assertEquals((-851.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver2);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-851.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(arminRestarts0, arminRestarts1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertArrayEquals(new int[] {99, 99, 99, 99, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-851), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.nVars());
      
      try { 
        solver2.addExactly(vecInt1, 1336);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap1, glucose21Restarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(solver1);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(iLogAble0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(10, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(11, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      
      percentLengthLearning0.setSolver(solver2);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(solver0, solver2);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertNotSame(solver2, solver0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(15, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(14, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(15, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(14, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, naturalStaticOrder0, lubyRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      
      SearchParams searchParams1 = solver3.getSearchParams();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver3, solver2);
      assertNotSame(solver3, solver0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.nConstraints());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.decisionLevel());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver5 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics1, mixedDataStructureDanielHT0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(2, solver5.newVar());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.decisionLevel());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver6 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver0.equals((Object)solver3));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver6);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(17, solver0.nVars());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(18, solver0.newVar());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(1, solver6.nVars());
      assertEquals(0, solver6.currentDecisionLevel());
      assertEquals(2147483, solver6.getTimeout());
      assertEquals(0, solver6.decisionLevel());
      assertFalse(solver6.isSolverKeptHot());
      assertEquals(1, solver6.realNumberOfVariables());
      assertFalse(solver6.isVerbose());
      assertEquals(0, solver6.getPropagationLevel());
      assertEquals(2, solver6.newVar());
      assertEquals(0, solver6.nConstraints());
      assertEquals("c ", solver6.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver6.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(4);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      searchParams0.setClaDecay(4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      
      solver2.setVerbose(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(4.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver2.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams1, pureOrder0, lubyRestarts0, iLogAble0);
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(5, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(4.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null, false);
      assertNotNull(cBClause0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(15, solver0.nVars());
      assertFalse(cBClause0.learnt());
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
      assertEquals(0, cBClause0.size());
      assertFalse(cBClause0.simplify());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver3.removeSubsumedConstr(cBClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-100);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
      
      SearchParams searchParams0 = new SearchParams(1.0E-100, 500);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(500);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(500, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = 500;
      intArray0[2] = 500;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {32, 500, 500}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.size());
      assertEquals(500, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {32, 500, 500}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.size());
      assertEquals(500, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3, iVecInt0.size());
      assertEquals(1000, iVecInt0.last());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(501, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(502, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(501, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        clausalDataStructureWL0.createClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver1.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      solver0.sortOnActivity();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      eMARestarts0.reset();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver0.isNeedToReduceDB();
      assertFalse(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertNotNull(iVecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      boolean boolean1 = solver0.isVerbose();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      SearchParams searchParams0 = new SearchParams(1.0, 1.0, 1.0, 3539);
      assertNotNull(searchParams0);
      assertEquals(3539, searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>((-3831));
      assertNotNull(percentLengthLearning1);
      assertEquals((-3831), percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(3539, searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3831), percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(3539, searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3831), percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver2 = null;
      try {
        solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, (CardinalityDataStructureYanMax) null, searchParams0, naturalStaticOrder0, eMARestarts0, iLogAble0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertNotNull(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      solver0.stop();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(5);
      assertNotNull(percentLengthLearning0);
      assertEquals(5, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(2.0, (-1598.79568), 4363.593030067948, (-4230));
      assertNotNull(searchParams0);
      assertEquals((-1598.79568), searchParams0.getClaDecay(), 0.01);
      assertEquals(2.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-4230), searchParams0.getInitConflictBound());
      assertEquals(4363.593030067948, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, clausalDataStructureWL0, varOrderHeap0, noRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams1, naturalStaticOrder0, arminRestarts0, iLogAble0);
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(6, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(6, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      
      double[] doubleArray0 = solver2.getVariableHeuristics();
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver2);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver2, solver0);
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(11, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(10, solver2.nVars());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 207;
      intArray0[1] = 128;
      intArray0[2] = (-1);
      intArray0[3] = 2578;
      intArray0[4] = 3542;
      intArray0[5] = 1979;
      intArray0[6] = 4202;
      // Undeclared exception!
      try { 
        solver2.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      Pair pair0 = new Pair();
      assertNotNull(pair0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      pair0.setBacktrackLevel(0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      pair0.setBacktrackLevel((-2229));
      assertEquals((-2229), pair0.getBacktrackLevel());
      
      Constr constr0 = pair0.getReason();
      assertNull(constr0);
      assertEquals((-2229), pair0.getBacktrackLevel());
      
      // Undeclared exception!
      try { 
        solver1.analyze((Constr) null, pair0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(1.0E-100, (-255));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(percentLengthLearning0);
      assertEquals(32, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, varOrderHeap0, lubyRestarts0, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.newVar());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      VecInt vecInt0 = new VecInt(1805, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1805, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = solver1.isSatisfiable((IVecInt) vecInt0, true);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(8, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.realNumberOfVariables());
      assertEquals(1, vecInt0.last());
      assertEquals(1805, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      PureOrder pureOrder0 = new PureOrder(205);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(205, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      VecInt vecInt1 = new VecInt(1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"_Jruv");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"_Jruv");
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SearchParams searchParams0 = new SearchParams((-1153.674), (-1153.674), 7, 7);
      assertNotNull(searchParams0);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1153.674), searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals((-1153.674), searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1153.674), searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals((-1153.674), searchParams0.getClaDecay(), 0.01);
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      solver0.printInfos((PrintWriter) mockPrintWriter0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1153.674), searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals((-1153.674), searchParams0.getClaDecay(), 0.01);
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams((-295.4782853564827), (-295.4782853564827), (-2432.122932), (-438));
      assertNotNull(searchParams0);
      assertEquals((-2432.122932), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-295.4782853564827), searchParams0.getVarDecay(), 0.01);
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals((-295.4782853564827), searchParams0.getClaDecay(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2432.122932), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-295.4782853564827), searchParams0.getVarDecay(), 0.01);
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals((-295.4782853564827), searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertNotNull(miniSATRestarts1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2432.122932), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-295.4782853564827), searchParams0.getVarDecay(), 0.01);
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals((-295.4782853564827), searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics1, cardinalityDataStructure0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2432.122932), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-295.4782853564827), searchParams0.getVarDecay(), 0.01);
      assertEquals((-438), searchParams0.getInitConflictBound());
      assertEquals((-295.4782853564827), searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver1.truthValue((-438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 877
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics1);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics1, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      Lits lits0 = (Lits)solver0.voc;
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(2, lits0.nVars());
      
      VecInt vecInt0 = new VecInt(47);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 47);
      assertNotNull(atLeast0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertEquals(47, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      noLearningButHeuristics0.claBumpActivity(atLeast0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(5, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertEquals(47, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      RestartStrategy restartStrategy0 = null;
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      
      long long0 = solver1.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      boolean boolean0 = solver1.simplifyDB();
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      solver0.unset(209);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      solver1.cancelUntilTrailLevel((-897));
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, randomWalkDecorator1, eMARestarts0);
      assertNotNull(solver2);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      SearchParams searchParams1 = solver2.getSearchParams();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      RandomWalkDecorator randomWalkDecorator2 = new RandomWalkDecorator(varOrderHeap0);
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator1));
      assertNotNull(randomWalkDecorator2);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator2.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator2, glucose21Restarts0);
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator2));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator1));
      assertNotNull(solver3);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.01, randomWalkDecorator2.getProbability(), 0.01);
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.nVars());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver3.out;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams1, randomWalkDecorator1, glucose21Restarts0, iLogAble0);
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator2));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator1));
      assertNotNull(solver4);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(14, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.01, randomWalkDecorator2.getProbability(), 0.01);
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(3, solver3.nVars());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals(2, solver4.newVar());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      
      Solver<ClausalDataStructureWL>[] solverArray0 = (Solver<ClausalDataStructureWL>[]) Array.newInstance(Solver.class, 6);
      solverArray0[0] = solver4;
      solverArray0[1] = solver4;
      solverArray0[2] = solver4;
      solverArray0[3] = solver4;
      solverArray0[4] = solver4;
      solverArray0[5] = solver4;
      ManyCore<Solver<ClausalDataStructureWL>> manyCore0 = new ManyCore<Solver<ClausalDataStructureWL>>(false, solverArray0);
      assertNotNull(manyCore0);
      assertEquals(6, solverArray0.length);
      
      solver4.setUnitClauseProvider(manyCore0);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertNotSame(randomWalkDecorator0, randomWalkDecorator2);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator2);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(randomWalkDecorator2, randomWalkDecorator0);
      assertNotSame(randomWalkDecorator2, randomWalkDecorator1);
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator2));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator0));
      assertFalse(randomWalkDecorator2.equals((Object)randomWalkDecorator1));
      assertEquals(6, solverArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(15, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(16, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(10, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(9, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.01, randomWalkDecorator2.getProbability(), 0.01);
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(5, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(4, solver4.newVar());
      assertEquals(3, solver4.nVars());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        solver0.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 910.0, (-1213.6617151978), (-493));
      assertNotNull(searchParams0);
      assertEquals((-1213.6617151978), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(910.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-493), searchParams0.getInitConflictBound());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 446.05);
      assertNotNull(randomWalkDecorator0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(446.05, randomWalkDecorator0.getProbability(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1213.6617151978), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(910.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-493), searchParams0.getInitConflictBound());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(446.05, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize((-493));
      assertNotNull(learnedConstraintsDeletionStrategy0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1213.6617151978), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(910.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-493), searchParams0.getInitConflictBound());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(446.05, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(901.51);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(901.51, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2085);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      cardinalityDataStructure0.setUnitPropagationListener(solver0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap1, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(901.51, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      
      activeLearning1.setLimit(32);
      assertEquals(32, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      solver1.setLogger((ILogAble) null);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(901.51, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(32, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      
      solver0.expireTimeout();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.nVars());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap1, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(32, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2085, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      UnitClause unitClause0 = new UnitClause(871);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        solver2.removeSubsumedConstr(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(activeLearning0);
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      ILits iLits0 = solver0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, iLits0.realnVars());
      assertEquals(7, iLits0.nVars());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      try { 
        solver1.addBlockingClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(1.0E-100, (-255));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = 205;
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(205);
      assertNotNull(percentLengthLearning0);
      assertEquals(205, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(205, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      RestartStrategy restartStrategy0 = null;
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, varOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.nVars());
      assertEquals(5, solver1.newVar());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-255), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(205, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      VecInt vecInt0 = new VecInt(1805, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1805, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver1.primeImplicant(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        solver0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      naturalStaticOrder0.undo(0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertNotNull(solver2);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver2.assume((-1945));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      int[] intArray0 = new int[0];
      solver0.backtrack(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q^vS?c eUzF#@tPS");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U,~0vi");
      assertNotNull(mockPrintWriter0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1.0));
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      cardinalityDataStructureYanMax0.conflictDetectedInWatchesFor(849, 849);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, naturalStaticOrder0, miniSATRestarts0);
      assertNotNull(solver2);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      IVec<Constr> iVec0 = solver2.getLearnedConstraints();
      assertNotNull(iVec0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int int0 = 7;
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertNotNull(noRestarts1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      Lits lits0 = (Lits)solver0.getVocabulary();
      assertSame(noRestarts0, noRestarts1);
      assertNotNull(lits0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, lits0.realnVars());
      assertEquals(9, lits0.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(learntBinaryClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, lits0.realnVars());
      assertEquals(11, lits0.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertFalse(learntBinaryClause0.locked());
      assertFalse(learntBinaryClause0.simplify());
      assertEquals(2, learntBinaryClause0.size());
      assertFalse(learntBinaryClause0.isSatisfied());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(learntBinaryClause0.learnt());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      
      try { 
        solver0.addAtLeast(vecInt0, 7);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertTrue(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning1, mixedDataStructureDanielWL0, (SearchParams) null, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        solver1.findModel((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      int int0 = (-3075);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-3075));
      assertNotNull(tabuListDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      IOrder iOrder0 = solver0.getOrder();
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertNotNull(iOrder0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      ILits iLits0 = null;
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      TabuListDecorator tabuListDecorator1 = new TabuListDecorator(pureOrder0, 3272);
      assertFalse(tabuListDecorator1.equals((Object)iOrder0));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertNotNull(tabuListDecorator1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator1, noRestarts0);
      assertFalse(tabuListDecorator1.equals((Object)iOrder0));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertNotNull(solver2);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotSame(tabuListDecorator0, tabuListDecorator1);
      assertSame(tabuListDecorator0, iOrder0);
      assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
      assertNotNull(iVecInt0);
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.last());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver2.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(subsetVarOrder0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(randomWalkDecorator1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, randomWalkDecorator1, arminRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(iLogAble0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0, iLogAble0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(solver2);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      SolverStats solverStats0 = solver2.getStats();
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(solverStats0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0, solverStats0.getStarts());
      
      miniSATRestarts0.init(searchParams0, solverStats0);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0, solverStats0.getStarts());
      
      UnitClause unitClause0 = new UnitClause(15);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.size());
      
      solver0.record(unitClause0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.size());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertNotNull(solver3);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(11, solver3.realNumberOfVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(12, solver3.newVar());
      assertEquals(11, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      solver3.decayActivities();
      assertNotSame(solver3, solver1);
      assertNotSame(randomWalkDecorator0, randomWalkDecorator1);
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(14, solver3.newVar());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(13, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(13, solver3.realNumberOfVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator1, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 46;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        solver1.addClauseOnTheFly(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      int int0 = (-3075);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-3075));
      assertNotNull(tabuListDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      IOrder iOrder0 = solver0.getOrder();
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertNotNull(iOrder0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, iOrder0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      
      // Undeclared exception!
      try { 
        solver2.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(7);
      assertNotNull(percentLengthLearning0);
      assertEquals(7, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(7, 1785);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1785, searchParams0.getInitConflictBound());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(7);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      try { 
        solver0.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      // Undeclared exception!
      try { 
        solver1.toString((String) null);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver1.getRestartStrategy();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, noRestarts0);
      assertFalse(solver2.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      
      VecInt vecInt0 = (VecInt)solver2.decisions;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(minOneDecorator0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(vecInt1, vecInt0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver2);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(solver0.equals((Object)solver2));
      assertNotNull(vecInt1);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      
      searchParams0.setInitConflictBound(543);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(543, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertSame(arminRestarts0, arminRestarts1);
      assertNotNull(lits0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(543, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lits0.realnVars());
      assertEquals(5, lits0.nVars());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      
      solver1.reset();
      assertSame(arminRestarts0, arminRestarts1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(543, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(varOrderHeap0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(randomWalkDecorator1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(noRestarts1);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin1, randomWalkDecorator1, noRestarts1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(solver3);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      cardinalityDataStructureYanMax1.conflictDetectedInWatchesFor(849, 849);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax2);
      
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax2, randomWalkDecorator0, noRestarts1);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(solver4);
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      IVec<Constr> iVec0 = solver4.getLearnedConstraints();
      assertNotSame(cardinalityDataStructureYanMax2, cardinalityDataStructureYanMax1);
      assertNotSame(cardinalityDataStructureYanMax2, cardinalityDataStructureYanMax0);
      assertNotSame(randomWalkDecorator0, randomWalkDecorator1);
      assertNotSame(noRestarts1, noRestarts0);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertNotNull(iVec0);
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(3, solver4.nVars());
      assertEquals(4, solver4.newVar());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILogAble iLogAble0 = solver3.out;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver5 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL0, searchParams0, varOrderHeap0, noRestarts0, iLogAble0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertNotNull(solver5);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(543, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver5.nVars());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isVerbose());
      assertEquals(2, solver5.newVar());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      
      solver5.registerLiteral(849);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotSame(noRestarts1, noRestarts0);
      assertNotSame(noRestarts0, noRestarts1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(543, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(850, solver5.nVars());
      assertEquals(851, solver5.newVar());
      assertEquals(850, solver5.realNumberOfVariables());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isVerbose());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      SearchParams searchParams0 = new SearchParams(3580);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(50);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      assertNotNull(learntWLClause0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      
      IVecInt iVecInt1 = solver0.analyzeFinalConflictInTermsOfAssumptions(learntWLClause0, iVecInt0, 20);
      assertNull(iVecInt1);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3580, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(50, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1404));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setRestartStrategy(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(2488.818, 1083);
      assertNotNull(searchParams0);
      assertEquals(1083, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2488.818, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1083);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1083, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-1076.448));
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1083, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1076.448), randomWalkDecorator0.getProbability(), 0.01);
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1083, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1083, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts1);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1083, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2488.818, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1083, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1076.448), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(Integer.MIN_VALUE);
      assertNotNull(fixedLengthLearning1);
      assertEquals(Integer.MIN_VALUE, fixedLengthLearning1.getMaxLength());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, lubyRestarts1, mUSLauncher0);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1083, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2488.818, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1083, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1076.448), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(Integer.MIN_VALUE, fixedLengthLearning1.getMaxLength());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      
      VecInt vecInt0 = (VecInt)solver2.implied;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver1.addAtLeast(vecInt0, 1060);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 0;
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, naturalStaticOrder0, lubyRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = solver1.getSearchParams();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(searchParams0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver3);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2, solver3.newVar());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      solver3.unset(0);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.nVars());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver4 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, varOrderHeap1, glucose21Restarts0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(solver4);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver4.newVar());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver2);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(minOneDecorator0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ILits iLits0 = solver4.getVocabulary();
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(iLits0);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(4, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(3, solver4.nVars());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, iLits0.realnVars());
      assertEquals(3, iLits0.nVars());
      
      LearntBinaryClause learntBinaryClause0 = null;
      try {
        learntBinaryClause0 = new LearntBinaryClause(iVecInt0, iLits0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      SearchParams searchParams0 = new SearchParams(3574);
      assertNotNull(searchParams0);
      assertEquals(3574, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder((-2441));
      assertNotNull(pureOrder0);
      assertEquals((-2441), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3574;
      intArray0[1] = (-2441);
      intArray0[2] = 50;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3574, (-2441), 50}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertArrayEquals(new int[] {3574, (-2441), 50}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      assertArrayEquals(new int[] {3574, (-2441), 50}, intArray0);
      assertEquals(3, intArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, arminRestarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3574, (-2441), 50}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.nVars());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3574, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      VecInt vecInt0 = new VecInt(3574, 3574);
      assertNotNull(vecInt0);
      assertEquals(3574, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3574, vecInt0.last());
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2441
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertNotNull(searchParams0);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-613));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotNull(lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      NaturalStaticOrder naturalStaticOrder1 = (NaturalStaticOrder)solver1.getOrder();
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotNull(naturalStaticOrder1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning2);
      assertEquals(10, percentLengthLearning2.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning2, cardinalityDataStructureYanMax0, naturalStaticOrder1, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning2, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver3.isSatisfiable(false);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver3, solver2);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax2);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
      assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
      assertNotNull(mixedDataStructureDanielHT1);
      
      percentLengthLearning2.init();
      assertEquals(10, percentLengthLearning2.getLimit());
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver4 = new Solver<MixedDataStructureDanielWL>(activeLearning1, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts1);
      assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));
      assertNotNull(solver4);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(1, solver4.nVars());
      assertFalse(solver4.isVerbose());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2, solver4.newVar());
      assertEquals(0, solver4.nConstraints());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = solver4.findModel((IVecInt) vecInt0);
      assertNotSame(mixedDataStructureDanielHT0, mixedDataStructureDanielHT1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));
      assertNotNull(intArray0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(3, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertEquals(4, solver4.newVar());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ISimplifier iSimplifier0 = solver3.getSimplifier();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax2);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver3, solver2);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertNotNull(iSimplifier0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(5, solver3.nVars());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = solver2.getSearchParams();
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(mixedDataStructureDanielHT0, mixedDataStructureDanielHT1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax2);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(solver2, solver3);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver2.equals((Object)solver3));
      assertNotNull(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(15, solver0.nVars());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      
      Solver<ClausalDataStructureWL> solver5 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams1, naturalStaticOrder0, lubyRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver2.equals((Object)solver3));
      assertNotNull(solver5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.nConstraints());
      assertEquals(2, solver5.newVar());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(18, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(17, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.nVars());
      
      int[] intArray1 = solver5.findModel();
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(mixedDataStructureDanielHT0, mixedDataStructureDanielHT1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax2);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(solver2, solver3);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver2.equals((Object)solver3));
      assertNotNull(intArray1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals(3, solver5.nVars());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(4, solver5.newVar());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-613), fixedLengthLearning0.getMaxLength());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(19, solver0.nVars());
      assertEquals(19, solver0.realNumberOfVariables());
      assertEquals(20, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(11, solver1.nVars());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(12, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(7, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 3);
      assertNotNull(tabuListDecorator0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts1 = new MiniSATRestarts();
      assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
      assertNotNull(miniSATRestarts1);
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertFalse(miniSATRestarts0.equals((Object)miniSATRestarts1));
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertFalse(miniSATRestarts0.equals((Object)miniSATRestarts1));
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning1 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(subsetVarOrder0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertNotNull(randomWalkDecorator1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning1, mixedDataStructureSingleWL0, randomWalkDecorator1, miniSATRestarts1);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
      assertNotNull(solver1);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      
      solver1.setLearner(clauseOnlyLearning1);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotSame(miniSATRestarts1, miniSATRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(700.053, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, glucose21Restarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver1.setSimplifier(simplificationType0);
      assertNotSame(solver0, solver1);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(700.053, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(8, solver1.nVars());
      assertEquals(8, solver1.realNumberOfVariables());
      assertEquals(9, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(7, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.nVars());
      assertEquals(6, solver1.realNumberOfVariables());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1069;
      intArray0[1] = 0;
      intArray0[2] = (-307);
      intArray0[3] = 1171;
      intArray0[4] = 1000;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, 1069);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = 1016;
      PureOrder pureOrder0 = new PureOrder(1016);
      assertNotNull(pureOrder0);
      assertEquals(1016, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning1 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      clauseOnlyLearning1.init();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning1, mixedDataStructureDanielWL0, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(1016, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      solver0.addAllClauses(vec0);
      assertEquals(1016, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      clauseOnlyLearning1.setVarActivityListener(solver0);
      assertEquals(1016, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      int int1 = (-1100);
      // Undeclared exception!
      try { 
        solver0.enqueue((-1100));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 5);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertNotNull(solver1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      
      boolean boolean0 = solver1.assume(5);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(boolean0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(1, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.decisionLevel());
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver2);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      
      boolean boolean1 = solver2.simplifyDB();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver3);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver3.addAllClauses(vec0);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.nVars());
      assertEquals(4, solver3.newVar());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(varOrderHeap1);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertNotNull(tabuListDecorator0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics1, mixedDataStructureDanielWL0, (SearchParams) null, randomWalkDecorator0, glucose21Restarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertNotNull(solver0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.forget(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      //  // Unstable assertion: assertNotNull(phaseCachingAutoEraseStrategy0);
      //  // Unstable assertion: assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      //  // Unstable assertion: assertNotNull(varOrderHeap0);
      //  // Unstable assertion: assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      //  // Unstable assertion: assertNotNull(noRestarts0);
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, noRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      
      solver0.stop();
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      
      int int0 = 5;
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(5);
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(5, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(2.0, (-1598.79568), 4363.593030067948, (-4230));
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(4363.593030067948, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-4230), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(2.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1598.79568), searchParams0.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      //  // Unstable assertion: assertNotNull(mUSLauncher0);
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, noRestarts0, mUSLauncher0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(5, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(4363.593030067948, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-4230), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(2.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1598.79568), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(miniSATLearning0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      // Undeclared exception!
      try { 
        varOrderHeap0.undo(43);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      //  // Unstable assertion: assertNotNull(naturalStaticOrder0);
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      //  // Unstable assertion: assertNotNull(mUSLauncher0);
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      SearchParams searchParams0 = new SearchParams(3580);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(3580, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder(50);
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(50, pureOrder0.getPeriod());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      //  // Unstable assertion: assertNotNull(subsetVarOrder0);
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      //  // Unstable assertion: assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      
      ILogAble iLogAble0 = solver0.out;
      //  // Unstable assertion: assertNotNull(iLogAble0);
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      //  // Unstable assertion: assertNotNull(glucose21Restarts0);
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams1 = new SearchParams();
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      //  // Unstable assertion: assertNotNull(searchParams1);
      //  // Unstable assertion: assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      //  // Unstable assertion: assertFalse(solver1.equals((Object)solver0));
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver1.nVars());
      //  // Unstable assertion: assertEquals(3, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(4, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      VecInt vecInt0 = new VecInt(3, 3580);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(3, vecInt0.size());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(3580, vecInt0.last());
      
      boolean boolean0 = solver1.isSatisfiable((IVecInt) vecInt0, true);
      //  // Unstable assertion: assertNotSame(searchParams1, searchParams0);
      //  // Unstable assertion: assertNotSame(solver1, solver0);
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      //  // Unstable assertion: assertFalse(solver1.equals((Object)solver0));
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(3581, solver1.nVars());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(3581, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(3582, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(3, vecInt0.size());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(3580, vecInt0.last());
      //  // Unstable assertion: assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      PureOrder pureOrder1 = new PureOrder(1805);
      //  // Unstable assertion: assertFalse(pureOrder1.equals((Object)pureOrder0));
      //  // Unstable assertion: assertNotNull(pureOrder1);
      //  // Unstable assertion: assertEquals(1805, pureOrder1.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder1.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      
      ILogAble iLogAble1 = solver0.out;
      //  // Unstable assertion: assertSame(iLogAble1, iLogAble0);
      //  // Unstable assertion: assertNotNull(iLogAble1);
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, lubyRestarts0, iLogAble0);
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      //  // Unstable assertion: assertFalse(solver2.equals((Object)solver1));
      //  // Unstable assertion: assertFalse(solver2.equals((Object)solver0));
      //  // Unstable assertion: assertFalse(pureOrder0.equals((Object)pureOrder1));
      //  // Unstable assertion: assertFalse(solver0.equals((Object)solver1));
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      //  // Unstable assertion: assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(3584, solver2.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(3585, solver2.newVar());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(3584, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(50, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(3586, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(3585, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(3585, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      //  // Unstable assertion: assertNotNull(iVecInt0);
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        solver2.findModel(iVecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PureOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-682));
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      solver0.getLogPrefix();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1418);
      solver0.findModel();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, subsetVarOrder0, miniSATRestarts0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("c ");
      solver1.printStat((PrintStream) mockPrintStream0, "c ");
      solver0.isSatisfiable(true);
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      int[] intArray0 = new int[4];
      intArray0[0] = 1063;
      intArray0[1] = (-562);
      intArray0[2] = 1068;
      intArray0[3] = 4;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, subsetVarOrder0, arminRestarts0);
      // Undeclared exception!
      try { 
        solver0.printInfos((PrintWriter) null, "@U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(16);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(16, 0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, noRestarts0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q^vS?c eUzF#@tPS");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, noRestarts0, iLogAble0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q^vS?c eUzF#@tPS");
      solver1.printStat((PrintWriter) mockPrintWriter0, "Q^vS?c eUzF#@tPS");
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, noRestarts0, iLogAble0);
      // Undeclared exception!
      try { 
        solver2.forget(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1432));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(500);
      PureOrder pureOrder0 = new PureOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams0, pureOrder0, noRestarts0);
      VecInt vecInt0 = (VecInt)solver1.decisions;
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(500);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, restartStrategy0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      iVecInt0.sortUnique();
      AtLeast atLeast0 = (AtLeast)solver1.addAtMost(iVecInt0, 500);
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams1 = new SearchParams(4);
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL0, searchParams1, pureOrder0, noRestarts0);
      ILogAble iLogAble0 = solver3.getLogger();
      Solver<MixedDataStructureDanielWL> solver4 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams1, pureOrder0, restartStrategy0, iLogAble0);
      // Undeclared exception!
      try { 
        solver4.learn(atLeast0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = (-1432);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1432));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(500);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-2267));
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0, mUSLauncher0);
      solver0.unsatExplanation();
      Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5);
      solverArray0[0] = solver0;
      solverArray0[1] = solver0;
      solverArray0[2] = solver0;
      solverArray0[3] = solver0;
      solverArray0[4] = solver0;
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(true, solverArray0);
      // Undeclared exception!
      try { 
        manyCore0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(7);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoRestarts noRestarts0 = new NoRestarts();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      solver0.getRestartStrategy();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      VecInt vecInt0 = (VecInt)solver1.decisions;
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(7);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      minOneDecorator0.reset();
      minOneDecorator0.createBlockingClauseForCurrentModel();
      ILits iLits0 = solver0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      Constr constr0 = learntBinaryClause0.toConstraint();
      solver0.claBumpActivity(constr0);
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      solver2.getDSFactory();
      // Undeclared exception!
      try { 
        solver1.getLiteralsPropagatedAt(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
