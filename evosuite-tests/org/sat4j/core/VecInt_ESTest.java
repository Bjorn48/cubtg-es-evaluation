/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:05:18 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1702, 1702);
      assertEquals(1702, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1702, vecInt0.size());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      vecInt0.shrinkTo(15);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.shrinkTo((-48));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-48), vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.subset((-3140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      vecInt0.shrinkTo((-2852));
      assertEquals((-2852), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertEquals((-2852), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(1002);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertTrue(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertTrue(boolean0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      vecInt0.hashCode();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals((-1), readOnlyVecInt0.size());
      assertNotNull(readOnlyVecInt0);
      
      boolean boolean0 = vecInt0.equals(readOnlyVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals((-1), readOnlyVecInt0.size());
      assertTrue(boolean0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.shrink(19);
      assertEquals((-19), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertNotNull(emptyVecInt0);
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertEquals((-19), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.shrink(1500);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1500), vecInt0.size());
      
      vecInt0.sortUnique();
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.shrink(1500);
      assertEquals((-1500), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals((-1500), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = (-880);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, (-880), 0, 0}, intArray0);
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-880), 0, 0, 0, 0}, intArray0);
      
      vecInt0.remove(0);
      assertEquals(1, vecInt0.size());
      assertEquals((-880), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-880), 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.remove((-1353));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 853;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {853, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = vecInt0.indexOf(0);
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, intArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {853, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      int int0 = vecInt0.indexOf(1002);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = vecInt0.contains(15);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.shrinkTo((-1518));
      assertEquals((-1518), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.contains(0);
      assertEquals((-1518), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.set(1034, (-2656));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.set(0, 5457);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(21, 5, comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1), comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.selectionSort(1, 1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(1987);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1987, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.moveTo2(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      vecInt0.moveTo(intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      vecInt0.moveTo((IVecInt) vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt(52);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[6];
      vecInt0.moveTo(0, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1002, 1002);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.last());
      assertEquals(1002, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.moveTo(0, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.last());
      assertEquals(1002, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      int int0 = vecInt0.size();
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      int int0 = vecInt0.size();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt0.pop();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertNotNull(iVecInt1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[34];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(34, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(34, intArray0.length);
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1702);
      assertEquals(1702, vecInt0.last());
      assertEquals(35, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1702, iVecInt0.last());
      assertEquals(35, iVecInt0.size());
      assertEquals(34, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      int int0 = vecInt0.last();
      assertEquals(1702, vecInt0.last());
      assertEquals(35, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(34, intArray0.length);
      assertEquals(1702, int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-1185));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1185), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertEquals((-1185), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      int int0 = vecInt0.last();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1185), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals((-1185), int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[4] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.indexOf(1);
      assertEquals(0, vecInt0.last());
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.get(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(1002);
      assertEquals(1002, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.get(0);
      assertEquals(1002, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[1] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(22, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.get(1);
      assertEquals(22, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(541);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(541, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(541, iVecInt0.last());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      int int0 = iVecInt0.delete(2);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, int0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      assertEquals(1540, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1540, vecInt0.size());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.delete(22);
      assertEquals(1540, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1539, vecInt0.size());
      assertEquals(1540, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1973, 727);
      assertEquals(1973, vecInt0.size());
      assertEquals(727, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertEquals(1972, vecInt0.size());
      assertEquals(727, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(727, iVecInt0.last());
      assertEquals(1972, iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      vecInt0.insertFirst((-2447));
      assertEquals(1973, vecInt0.size());
      assertEquals(727, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      
      vecInt0.copyTo(iVecInt0);
      assertEquals(727, vecInt0.last());
      assertEquals(3946, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3946, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(727, iVecInt0.last());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      int int0 = vecInt0.delete(1973);
      assertEquals(727, vecInt0.last());
      assertEquals(3945, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2447), int0);
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = vecInt0.containsAt(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(6, intArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals(7, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals(7, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = new VecInt(960);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-1456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1456
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1680, 1530);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1530, vecInt0.last());
      assertEquals(1680, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      vecInt0.shrinkTo(1002);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.size());
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.sortUnique();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 501
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1521, 1521);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1521, vecInt0.last());
      assertEquals(1521, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(1, 5, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(1, 1485, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(1535, 1702);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertNotNull(emptyVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      vecInt0.shrinkTo((-2852));
      assertEquals((-2852), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.push(1002);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertNotNull(emptyVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[20];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(20, vecInt0.size());
      assertEquals(20, intArray0.length);
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.insertFirst(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, vecInt0.size());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      vecInt0.shrinkTo(1002);
      assertEquals(1002, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        vecInt0.growTo(1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.ensure(304);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1665);
      assertEquals(1665, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertNotNull(emptyVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(22, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      vecInt0.shrink(3940);
      assertEquals((-3918), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      vecInt0.shrink((-2583));
      assertEquals(2605, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset((-5504));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertNotNull(vecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertEquals(0, vecInt0.last());
      assertEquals(22, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(22, intArray0.length);
      assertEquals(22, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1530, 1530);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1530, vecInt0.last());
      assertEquals(1530, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.sort(5, 141);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1530, vecInt0.last());
      assertEquals(1530, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1002, 1002);
      assertEquals(1002, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1002);
      assertEquals(1002, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1003, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1002, iVecInt0.last());
      assertEquals(1003, iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.sort(1002, 2982);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2981
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1521, 1521);
      assertEquals(1521, vecInt0.last());
      assertEquals(1521, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.sort(1521, 1521);
      assertEquals(1521, vecInt0.last());
      assertEquals(1521, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[4] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0}, intArray0);
      
      int int0 = vecInt0.containsAt((-1), (-1));
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(6, intArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertEquals(6, intArray0.length);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = vecInt0.containsAt((-1), (-1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.containsAt(1637, 1637);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.ensure((-1396));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.size();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.get(1507);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1507
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1702, 1702);
      assertEquals(1702, vecInt0.size());
      assertEquals(1702, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1671), 0, (-1671), (-1671), 1702).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1702, 1702);
      assertEquals(1702, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1702, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1702, 1702, 1702, 1702, (-2895)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1702
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(838, 2489, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1663
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 1, 15).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(1, 15, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1540, vecInt0.last());
      assertEquals(1540, vecInt0.size());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.selectionSort(0, 1540, comparator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt(9, 9);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.last());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(9);
      assertEquals(10, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.last());
      assertEquals(9, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(10, iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(9);
      assertEquals(10, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.last());
      assertEquals(10, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(iVecIntArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(1002);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.last());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1002, vecInt0.last());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1540, vecInt0.last());
      assertEquals(1540, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.push(3017);
      assertEquals(1, vecInt1.size());
      assertEquals(3017, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(3017, iVecInt0.last());
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1540, vecInt0.last());
      assertEquals(1540, vecInt0.size());
      assertEquals(1, vecInt1.size());
      assertEquals(3017, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1530, 1530);
      assertEquals(1530, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1530, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.push(5);
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertEquals(5, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertEquals(1530, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1530, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(boolean0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = (VecInt)vecInt0.push((-1));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals((-1), vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals((-1), vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertTrue(boolean0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1514, 1514);
      assertEquals(1514, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1514, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertEquals(1514, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1514, vecInt0.last());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      assertEquals(1540, vecInt0.size());
      assertEquals(1540, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1702, 1702);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1702, vecInt0.size());
      assertEquals(1702, vecInt0.last());
      assertNotNull(vecInt0);
      
      vecInt0.hashCode();
      assertFalse(vecInt0.isEmpty());
      assertEquals(1702, vecInt0.size());
      assertEquals(1702, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VecInt vecInt0 = new VecInt(35);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(35);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(35, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(35, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.equals(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(35, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(35, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(boolean0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1744, 1744);
      assertEquals(1744, vecInt0.last());
      assertEquals(1744, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertNotNull(emptyVecInt0);
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertEquals(1744, vecInt0.last());
      assertEquals(1744, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      assertEquals(1540, vecInt0.last());
      assertEquals(1540, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertEquals(1540, vecInt0.last());
      assertEquals(1540, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3935, (-9));
      assertEquals(3935, vecInt0.size());
      assertEquals((-9), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(5);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.last());
      assertEquals(3936, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3936, iVecInt0.size());
      assertEquals(5, iVecInt0.last());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      vecInt0.set(70, 70);
      vecInt0.sortUnique();
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      String string0 = vecInt0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1521, 1521);
      vecInt0.toString();
      assertEquals(1521, vecInt0.last());
      assertEquals(1521, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.remove(2518);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1721;
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = vecInt0.containsAt(1721);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push((-2852));
      int int0 = vecInt0.containsAt(400);
      assertEquals(1, vecInt0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(0, (-1883));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1882
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(1002);
      int int0 = vecInt0.indexOf(1002);
      assertEquals(1, vecInt0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1540, 1540);
      int int0 = vecInt0.indexOf(1585);
      assertEquals(1540, vecInt0.size());
      assertEquals(1540, vecInt0.last());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-349));
      boolean boolean0 = vecInt0.contains((-349));
      assertFalse(vecInt0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1002, 1002);
      boolean boolean0 = vecInt0.contains((-1761));
      assertEquals(1002, vecInt0.last());
      assertEquals(1002, vecInt0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.set((-1397), 1542);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(13, 13);
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1530, 1530);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(1530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1530
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[20];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pushAll(vecInt0);
      assertEquals(40, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.copyTo(intArray0);
      assertEquals(6, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1530, 1530);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1493, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort((Comparator<Integer>) null);
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VecInt vecInt0 = new VecInt(9, 9);
      int[] intArray0 = vecInt0.toArray();
      assertArrayEquals(new int[] {9, 9, 9, 9, 9, 9, 9, 9, 9}, intArray0);
      assertEquals(9, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(0, 3430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3430
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.delete((-544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -544
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      int int0 = vecInt0.unsafeGet(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.copyTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      int[] intArray0 = iVecInt0.toArray();
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[34];
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = vecInt0.last();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
  }
}
