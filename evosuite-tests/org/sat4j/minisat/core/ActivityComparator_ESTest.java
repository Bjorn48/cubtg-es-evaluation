/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:48:31 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ActivityComparator;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityComparator_ESTest extends ActivityComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn((-864.9492), (-864.9492)).when(constr0).getActivity();
      doReturn((-1862), 1073741837).when(constr0).size();
      int int0 = activityComparator0.compare(constr0, constr0);
      assertEquals((-1073743699), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      IVecInt iVecInt0 = VecInt.EMPTY;
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt0, (ILits) null);
      int int0 = activityComparator0.compare((Constr) learntWLClause1, (Constr) learntWLClause0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      IVecInt iVecInt0 = VecInt.EMPTY;
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt0, (ILits) null);
      learntWLClause1.incActivity(424.757584770004);
      int int0 = activityComparator0.compare((Constr) learntWLClause1, (Constr) learntWLClause0);
      assertEquals(425, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      VecInt vecInt0 = new VecInt();
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        activityComparator0.compare((Constr) unitClauses0, (Constr) unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      IVecInt iVecInt0 = VecInt.EMPTY;
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        activityComparator0.compare((Constr) learntWLClause0, (Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(constr0).getActivity();
      int int0 = activityComparator0.compare(constr0, constr0);
      assertEquals((-1), int0);
  }
}
