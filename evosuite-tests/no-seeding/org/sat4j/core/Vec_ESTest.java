/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:17:14 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      Integer integer0 = new Integer(0);
      vec1.unsafePush(vec0);
      Vec<Integer> vec2 = new Vec<Integer>(0, integer0);
      vec2.equals(vec1);
      Vec<Object> vec3 = new Vec<Object>();
      vec3.indexOf(vec1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.sat4j.core.Vec";
      stringArray0[1] = "hS=C.1";
      stringArray0[2] = "U;-";
      stringArray0[3] = "Emy/#4_U!TP)n*/M";
      stringArray0[4] = "";
      stringArray0[5] = "N3w*E7XbuUl0NC;";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      int int0 = (-774);
      vec0.shrink((-774));
      Vec<String> vec1 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      vec1.growTo((-2826), vec0);
      vec1.contains(vec0);
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      Vec<String> vec3 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec3);
      Integer integer0 = new Integer(691);
      Vec<Integer> vec4 = new Vec<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator0);
      vec4.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      vec1.insertFirstWithShifting(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      vec0.insertFirstWithShifting(integer0);
      vec0.removeFromLast(integer0);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1015);
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      Vec<Object> vec2 = new Vec<Object>(1015);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator1);
      vec0.copyTo((IVec<Integer>) vec0);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(anyInt() , anyInt());
      vec0.sortUnique(comparator2);
      Integer integer1 = new Integer(1015);
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(1355);
      Comparator<ReadOnlyVec<Integer>> comparator3 = (Comparator<ReadOnlyVec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(1460);
      vec2.clone();
      Object object0 = new Object();
      vec2.indexOf(object0);
      vec0.equals(integer1);
      Vec<String> vec4 = new Vec<String>(0);
      vec4.clear();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec4);
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2282)).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(1383);
      vec2.size();
      Vec<String> vec3 = new Vec<String>(0, "Yb@~s6+JhjkWMDhA,");
      vec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Vec<Integer> vec0 = new Vec<Integer>(0, integer1);
      vec0.insertFirstWithShifting(integer0);
      Integer integer2 = new Integer(0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.shrinkTo(1746);
      assertEquals(1746, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<String> vec2 = new Vec<String>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.growTo(1765, "lPq_>ll75tq$Q");
      assertFalse(vec2.isEmpty());
      assertEquals(1765, vec2.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec2.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, objectArray0.length);
      assertNotNull(vec0);
      
      Vec<Object> vec1 = null;
      try {
        vec1 = new Vec<Object>((-1502));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(333, integer0);
      assertFalse(vec1.isEmpty());
      assertEquals(333, vec1.size());
      assertNotNull(vec1);
      
      Vec<String> vec2 = new Vec<String>(333, "v@S$tj8");
      assertFalse(vec2.isEmpty());
      assertEquals(333, vec2.size());
      assertNotNull(vec2);
      
      boolean boolean0 = vec1.equals(vec2);
      assertFalse(vec1.isEmpty());
      assertEquals(333, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(333, vec2.size());
      assertFalse(boolean0);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(333, vec2.size());
      assertEquals(333, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<String>> vec3 = null;
      try {
        vec3 = new Vec<ReadOnlyVec<String>>((-1476), readOnlyVec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.shrinkTo(1662);
      assertEquals(1662, vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.indexOf("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(838).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec1);
      
      vec1.growTo((-1275), vec0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals((-1275), vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1383, (-811), comparator1);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals((-1275), vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = vec1.isEmpty();
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals((-1275), vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(vec1);
      assertFalse(vec1.equals((Object)vec0));
      
      Iterator<String> iterator0 = vec1.iterator();
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotSame(vec1, vec0);
      assertNotNull(iterator0);
      assertFalse(vec1.equals((Object)vec0));
      
      int int0 = 0;
      vec1.shrink(0);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotSame(vec1, vec0);
      assertFalse(vec1.equals((Object)vec0));
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      assertFalse(vec0.equals((Object)vec1));
      
      vec2.insertFirst(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotSame(vec0, vec1);
      assertFalse(vec0.equals((Object)vec1));
      
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec1);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(4, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(readOnlyVec1);
      assertFalse(vec1.equals((Object)vec0));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      
      boolean boolean0 = vec2.contains(readOnlyVec1);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(4, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotSame(vec1, vec0);
      assertNotSame(readOnlyVec1, readOnlyVec0);
      assertFalse(vec1.equals((Object)vec0));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      assertFalse(boolean0);
      
      boolean boolean1 = vec0.isEmpty();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotSame(vec0, vec1);
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Vec<Object> vec3 = new Vec<Object>();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      int int1 = 1360;
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(1360, vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertEquals(1360, vec4.size());
      assertFalse(vec4.isEmpty());
      assertNotNull(vec4);
      
      String string0 = vec4.toString();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertEquals(1360, vec4.size());
      assertFalse(vec4.isEmpty());
      assertNotNull(string0);
      
      vec4.shrinkTo(0);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      
      // Undeclared exception!
      try { 
        vec3.delete(1363);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1363
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      IVec<Object> iVec0 = vec1.push(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      boolean boolean0 = vec0.contains(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(boolean0);
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      // Undeclared exception!
      try { 
        vec2.moveTo((-144), (-2087));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2087
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(0, integer0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<Integer> vec2 = new Vec<Integer>(645, (Integer) null);
      assertEquals(645, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      assertFalse(vec2.equals((Object)vec0));
      
      Object object0 = vec2.last();
      assertEquals(645, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotSame(vec2, vec0);
      assertNull(object0);
      assertFalse(vec2.equals((Object)vec0));
      
      boolean boolean0 = vec1.equals((Object) null);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Iterator<String> iterator0 = vec0.iterator();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(iterator0);
      
      int int0 = 0;
      vec0.set(0, ")N~qzw)Km3vi7H");
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.isEmpty();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(boolean0);
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      vec2.unsafePush(integer0);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      vec2.growTo((-1), integer1);
      assertEquals((-1), vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer((-1030));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1030), (int)integer2);
      
      // Undeclared exception!
      try { 
        vec2.remove(integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1209, (-2419), 911, 911, 893).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sort(2, 911, comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(5, integer0);
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Integer integer1 = new Integer(1532);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1532, (int)integer1);
      
      vec1.insertFirstWithShifting(integer1);
      assertEquals(6, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(5);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(5, (int)integer2);
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast(integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, (String) null);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.contains((String) null);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(boolean0);
      
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 4);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec1 = new Vec<Object>(0, object0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertNotNull(readOnlyVec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertNotNull(readOnlyVec2);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec3.isEmpty());
      assertEquals(0, readOnlyVec3.size());
      assertNotNull(readOnlyVec3);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[3] = readOnlyVec3;
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertEquals(4, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(4, readOnlyVecArray0.length);
      assertNotNull(vec2);
      
      vec2.shrinkTo(0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(4, readOnlyVecArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(1373, integer0);
      assertEquals(1373, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer1 = new Integer(1351);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1351, (int)integer1);
      
      boolean boolean0 = vec0.contains(integer1);
      assertEquals(1373, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(1350);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(1350);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.shrinkTo(5);
      assertFalse(vec1.isEmpty());
      assertEquals(5, vec1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting(integer0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.removeFromLast(integer0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1015);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>(1015);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator1);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      vec0.copyTo((IVec<Integer>) vec0);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2779, 1381, 1381, 1015, 1874).when(comparator2).compare(anyInt() , anyInt());
      vec0.sortUnique(comparator2);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer1 = new Integer(1015);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1015, (int)integer1);
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(1355);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      Comparator<ReadOnlyVec<Integer>> comparator3 = (Comparator<ReadOnlyVec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(1460);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1460, (int)integer2);
      
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(iVec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = vec2.indexOf(object0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals((-1), int0);
      
      boolean boolean0 = vec0.equals(integer1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean0);
      
      Vec<String> vec4 = new Vec<String>(0);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      vec4.clear();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      Vec<Object> vec5 = new Vec<Object>();
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(vec5);
      assertTrue(vec5.equals((Object)vec2));
      
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1, (int)integer3);
      
      vec5.insertFirstWithShifting(integer3);
      assertFalse(vec5.isEmpty());
      assertEquals(1, vec5.size());
      assertNotSame(vec5, vec2);
      assertFalse(vec5.equals((Object)vec2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      boolean boolean1 = vec4.equals(vec5);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertFalse(vec5.isEmpty());
      assertEquals(1, vec5.size());
      assertNotSame(vec5, vec2);
      assertFalse(vec5.equals((Object)vec2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1383).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1383, (-811), comparator1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = vec1.isEmpty();
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, (-811)).when(comparator2).compare(anyString() , anyString());
      vec0.sortUnique(comparator2);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      int int0 = vec3.size();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertEquals(0, int0);
      
      Vec<String> vec4 = new Vec<String>(3901, "");
      assertFalse(vec4.isEmpty());
      assertEquals(3901, vec4.size());
      assertNotNull(vec4);
      assertFalse(vec4.equals((Object)vec0));
      
      int int1 = vec0.hashCode();
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      assertNotSame(vec0, vec4);
      assertFalse(int1 == int0);
      assertFalse(vec0.equals((Object)vec4));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(0, integer0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      String string0 = vec0.toString();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 0;
      vec0.growTo(0, (Integer) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.sort((-3513), (-364), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1939
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(15);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(0, (ReadOnlyVec<Object>) null);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.equals(")R7FE");
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertFalse(boolean0);
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2014);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      // Undeclared exception!
      try { 
        vec2.remove(vec0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      IVec<Object> iVec0 = vec1.clone();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      vec0.growTo((-1), (String) null);
      assertEquals((-1), vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Vec<Object> vec1 = new Vec<Object>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      vec1.insertFirstWithShifting(object0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<String> vec2 = new Vec<String>(0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      int int1 = vec2.indexOf("c!1~R=r%{Tcti!(@}M");
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 884;
      IVec<String> iVec1 = vec2.clone();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(iVec1.isEmpty());
      assertEquals(0, iVec1.size());
      assertNotNull(iVec1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec2.sort(884, 1165, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 1;
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec0.shrinkTo(1728);
      assertEquals(1728, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec1.pop();
      assertEquals(1728, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      Vec<Object> vec0 = new Vec<Object>(0, (Object) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        vec1.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(5, integer0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer1 = new Integer(5);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, (int)integer1);
      
      vec0.insertFirstWithShifting(integer1);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      vec0.removeFromLast(integer1);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Vec<Vec<Object>> vec1 = null;
      try {
        vec1 = new Vec<Vec<Object>>((-1033));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) vec0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "Tx%bk;XWeo@g:~";
      stringArray0[2] = "";
      stringArray0[3] = "M8jO5=b4-tS;a";
      stringArray0[4] = "PAEj%tz#yXNmj{/gtE";
      stringArray0[5] = "xx(Z!Q1EF#~2I";
      stringArray0[6] = ",";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertFalse(vec1.isEmpty());
      assertEquals(7, vec1.size());
      assertEquals(7, stringArray0.length);
      assertNotNull(vec1);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(7, vec1.size());
      assertEquals(7, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(readOnlyVec0);
      
      vec0.growTo((-1981), readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals((-1981), vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(7, vec1.size());
      assertEquals(7, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(7, stringArray0.length);
      
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      // Undeclared exception!
      try { 
        vec0.copyTo(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1383;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1383).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1383, (-811), comparator1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = vec1.isEmpty();
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertNotNull(iVec0);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator2).compare(anyString() , anyString());
      vec0.sortUnique(comparator2);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2, stringArray0.length);
      
      Integer integer0 = new Integer((-4646));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-4646), (int)integer0);
      
      Vec<Integer> vec3 = null;
      try {
        vec3 = new Vec<Integer>((-4646), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting(integer0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.copyTo((IVec<Integer>) vec0);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer1 = new Integer((-2326));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2326), (int)integer1);
      
      boolean boolean0 = vec0.equals(integer1);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
      
      Vec<String> vec1 = new Vec<String>(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      
      // Undeclared exception!
      try { 
        vec0.remove((Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1, "%Y.");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.push("%Y.");
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(vec1);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      vec1.insertFirst(integer0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(0, objectArray0.length);
      
      vec1.growTo(1, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(0, objectArray0.length);
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 3);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(iVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(2, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertNotNull(readOnlyVec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(readOnlyVec1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(2, readOnlyVec2.size());
      assertFalse(readOnlyVec2.isEmpty());
      assertNotNull(readOnlyVec2);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[2] = readOnlyVec2;
      Integer integer1 = new Integer(1353);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1353, (int)integer1);
      
      // Undeclared exception!
      try { 
        vec0.remove("%Y.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      assertNotNull(readOnlyVec0);
      
      vec0.insertFirst(readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String string0 = "M";
      Vec<String> vec1 = new Vec<String>(991);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec1.copyTo((IVec<String>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(15, integer0);
      assertEquals(15, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.contains(integer0);
      assertEquals(15, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(15, integer0);
      assertEquals(15, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.isEmpty();
      assertEquals(15, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(boolean0);
      
      Vec<String> vec1 = new Vec<String>(15, "");
      assertEquals(15, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.hashCode();
      assertEquals(15, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "h[GWaDrHm";
      stringArray0[1] = ">";
      stringArray0[2] = "";
      stringArray0[3] = "[JGaqaR`-WeCH+fVmH~";
      stringArray0[4] = "&LKozv0?sV.--G0<N";
      stringArray0[5] = "omKl9mmlECOzWbOau";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(6, stringArray0.length);
      assertNotNull(vec0);
      
      String string0 = vec0.get(0);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      assertEquals("h[GWaDrHm", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(353);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.shrinkTo((-333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(15, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(15, vec0.size());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.equals(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(15, vec0.size());
      assertFalse(boolean0);
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.copyTo((IVec<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 2158;
      Vec<String> vec0 = new Vec<String>(2158);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      String string0 = vec0.toString();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(1193);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.hashCode();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.sortUnique((Comparator<Object>) null);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      stringArray0[2] = "mI9@upuy5";
      stringArray0[3] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = null;
      // Undeclared exception!
      try { 
        vec0.sort((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      int int0 = 2;
      int int1 = 911;
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sort(int0, int1, comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-]_3'mWLL9-fD3dq";
      stringArray0[3] = "";
      stringArray0[4] = "org.sat4j.core.Vec";
      stringArray0[5] = "!";
      stringArray0[6] = "";
      stringArray0[7] = "h1QQEe";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertEquals(8, stringArray0.length);
      assertNotNull(vec1);
      
      vec0.growTo(0, vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertEquals(8, stringArray0.length);
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 1);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(8, readOnlyVec0.size());
      assertEquals(8, stringArray0.length);
      assertNotNull(readOnlyVec0);
      
      readOnlyVecArray0[0] = readOnlyVec0;
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertEquals(1, readOnlyVecArray0.length);
      assertNotNull(vec2);
      
      ReadOnlyVec<String> readOnlyVec1 = vec2.delete(0);
      assertEquals(8, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(1, readOnlyVecArray0.length);
      assertSame(readOnlyVec1, readOnlyVec0);
      assertNotNull(readOnlyVec1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 6);
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(6, vec0.size());
      assertEquals(6, readOnlyVecArray0.length);
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.contains(readOnlyVecArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(0, 2269, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1134
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.unsafePush("ELAf#e-#|w_,");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.shrinkTo(664);
      assertFalse(vec0.isEmpty());
      assertEquals(664, vec0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        vec0.growTo(713, object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertNotNull(vec0);
      assertTrue(integer0.equals((Object)int0));
      
      vec0.insertFirstWithShifting(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 1015;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1015);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<Object> vec2 = null;
      vec1.growTo(1015, (Vec<Object>) null);
      assertFalse(vec1.isEmpty());
      assertEquals(1015, vec1.size());
      
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(22, 1015, (-1), 2816, (-1)).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      // Undeclared exception!
      try { 
        vec1.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Vec<Integer> vec2 = new Vec<Integer>(0, integer0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      boolean boolean0 = vec2.equals(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(boolean0);
      
      Vec<Object> vec3 = new Vec<Object>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      assertTrue(vec3.equals((Object)vec0));
      
      int int0 = vec3.indexOf(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotSame(vec3, vec0);
      assertTrue(vec3.equals((Object)vec0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-5974);
      Vec<String> vec0 = null;
      try {
        vec0 = new Vec<String>((-5974), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(7, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(7, vec0.size());
      assertNotNull(vec0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Integer> vec1 = new Vec<Integer>(2140, (Integer) null);
      assertFalse(vec1.isEmpty());
      assertEquals(2140, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.selectionSort((-1043), 31, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1383, (-811), comparator1);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = vec1.isEmpty();
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.clone();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(184);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      String string0 = "org.sat4j.core.Vec$1";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(184, 184, comparator1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.selectionSort(184, 184, comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.growTo(184, "org.sat4j.core.Vec$1");
      assertEquals(184, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String string1 = vec0.toString();
      assertEquals(184, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(184);
      assertNotNull(integer0);
      assertEquals(184, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(184);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(184, (int)integer1);
      
      integerArray0[1] = integer1;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, integerArray0.length);
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.ReadOnlyVec");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 184
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer((-117));
      assertNotNull(integer0);
      assertEquals((-117), (int)integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(963, integer0);
      assertFalse(vec1.isEmpty());
      assertEquals(963, vec1.size());
      assertNotNull(vec1);
      
      String string0 = vec1.toString();
      assertFalse(vec1.isEmpty());
      assertEquals(963, vec1.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 1;
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertEquals(1, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals(1, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-279));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int0));
      assertEquals((-279), (int)integer7);
      
      integerArray0[7] = integer7;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertEquals(8, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(8, integerArray0.length);
      assertNotNull(vec0);
      
      String string0 = vec0.toString();
      assertEquals(8, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(8, integerArray0.length);
      assertNotNull(string0);
      assertEquals("0,0,1,1,0,1,1,-279", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      boolean boolean0 = vec0.contains(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(boolean0);
      
      boolean boolean1 = vec1.contains((Object) null);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = vec1.toArray();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(5, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<Vec<Object>> readOnlyVec0 = new ReadOnlyVec<Vec<Object>>(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Vec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.shrinkTo(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirst("g*^/3X#K+OkX");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      vec1.insertFirstWithShifting(readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      
      vec0.moveTo((-4224), (-4224));
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      String[] stringArray0 = new String[0];
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, stringArray0.length);
      assertNotNull(vec2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vec2.equals(object0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-1346);
      Vec<Vec<String>> vec0 = null;
      try {
        vec0 = new Vec<Vec<String>>((-1346));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Integer integer0 = new Integer((-744));
      assertNotNull(integer0);
      assertEquals((-744), (int)integer0);
      
      Vec<Object> vec2 = new Vec<Object>(1209, integer0);
      assertFalse(vec2.isEmpty());
      assertEquals(1209, vec2.size());
      assertNotNull(vec2);
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1, vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(1209, vec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertNotNull(vec3);
      assertFalse(vec3.equals((Object)vec0));
      
      boolean boolean0 = vec3.contains(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(1209, vec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertNotSame(vec3, vec0);
      assertFalse(vec3.equals((Object)vec0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.push("");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.clear();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Iterator<ReadOnlyVec<String>> iterator0 = vec1.iterator();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(iterator0);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      vec1.growTo(5, readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IVec<ReadOnlyVec<String>> iVec1 = vec1.clone();
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(iVec1.isEmpty());
      assertEquals(5, iVec1.size());
      assertNotNull(iVec1);
      
      Comparator<ReadOnlyVec<String>> comparator2 = (Comparator<ReadOnlyVec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 5, (-1), 1, 1).when(comparator2).compare(nullable(org.sat4j.core.ReadOnlyVec.class) , nullable(org.sat4j.core.ReadOnlyVec.class));
      vec1.sort(comparator2);
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec0.pop();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      // Undeclared exception!
      try { 
        vec3.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      int int0 = 1015;
      vec0.removeFromLast(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(integer0.equals((Object)int0));
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1015);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>(5);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator1);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Vec<Integer> vec2 = null;
      try {
        vec2 = new Vec<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(4030);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(4030, 4030, comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      int int0 = vec0.indexOf(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      assertEquals((-1), int0);
      
      int int1 = 0;
      Vec<String> vec2 = new Vec<String>(0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      // Undeclared exception!
      try { 
        vec2.remove("org.sat4j.core.Vec");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      Vec<String> vec2 = new Vec<String>(991, "M");
      assertFalse(vec2.isEmpty());
      assertEquals(991, vec2.size());
      assertNotNull(vec2);
      
      Vec<Integer> vec3 = new Vec<Integer>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      String string0 = vec3.toString();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = vec2.indexOf("");
      assertFalse(vec2.isEmpty());
      assertEquals(991, vec2.size());
      assertEquals((-1), int0);
      
      vec1.insertFirst((Object) null);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertNotSame(vec1, vec0);
      assertFalse(vec1.equals((Object)vec0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 15;
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(15, (int)integer0);
      
      int int1 = 1850;
      Integer integer1 = new Integer(15);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(15, (int)integer1);
      
      Vec<Integer> vec0 = new Vec<Integer>(1850, integer1);
      assertEquals(1850, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      Integer integer2 = new Integer((-1256));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1256), (int)integer2);
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.removeFromLast(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1015);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator1);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      vec0.copyTo((IVec<Integer>) vec0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer1 = new Integer(1015);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1015, (int)integer1);
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(1355);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      Comparator<ReadOnlyVec<Integer>> comparator2 = (Comparator<ReadOnlyVec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator2);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      Integer integer2 = new Integer(1460);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1460, (int)integer2);
      
      int int0 = vec0.indexOf(integer2);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = vec2.indexOf(object0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = vec0.equals(integer1);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(boolean0);
      
      Vec<String> vec4 = new Vec<String>(0);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      vec4.clear();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      Vec<Vec<String>> vec5 = new Vec<Vec<String>>(0);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(vec5);
      
      Comparator<Vec<String>> comparator3 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec5.sort(comparator3);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      
      Iterator<Vec<String>> iterator0 = vec5.iterator();
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(iterator0);
      
      Vec<ReadOnlyVec<String>> vec6 = null;
      try {
        vec6 = new Vec<ReadOnlyVec<String>>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<String> vec0 = new Vec<String>(4030);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.shrink(4030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      vec0.insertFirst(integer1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      vec0.unsafePush(integer1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      vec0.insertFirst(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      
      Iterator<Integer> iterator0 = vec0.iterator();
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertNotNull(iterator0);
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertFalse(vec1.equals((Object)vec0));
      
      Vec<Object> vec2 = new Vec<Object>(626, vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(626, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      assertFalse(vec1.equals((Object)vec0));
      
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(626, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(626, iVec0.size());
      assertNotSame(vec1, vec0);
      assertNotNull(iVec0);
      assertFalse(vec1.equals((Object)vec0));
      
      int int1 = 2976;
      // Undeclared exception!
      try { 
        vec2.shrink(2976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(1424, "");
      assertFalse(vec0.isEmpty());
      assertEquals(1424, vec0.size());
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3379, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(1424, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1424, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1424, vec0.size());
      assertEquals(1424, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      IVec<Vec<String>> iVec0 = vec1.clone();
      assertFalse(vec0.isEmpty());
      assertEquals(1424, vec0.size());
      assertEquals(1424, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1424, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1424, (-811), comparator1);
      assertFalse(vec0.isEmpty());
      assertEquals(1424, vec0.size());
      assertEquals(1424, vec1.size());
      assertFalse(vec1.isEmpty());
      
      boolean boolean0 = vec1.isEmpty();
      assertFalse(vec0.isEmpty());
      assertEquals(1424, vec0.size());
      assertEquals(1424, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(boolean0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      Vec<String> vec0 = new Vec<String>(0, "dL>mX'EXx~FH@p5n:?");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.equals("o");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertFalse(int0 == int1);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertFalse(int0 == int1);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2303);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(2303, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-1), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int1);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(int1 == int0);
      assertEquals((-1), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-167));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals((-167), (int)integer7);
      
      integerArray0[7] = integer7;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertEquals(8, integerArray0.length);
      assertNotNull(vec1);
      
      Integer integer8 = new Integer((-1));
      assertNotNull(integer8);
      assertTrue(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      assertEquals((-1), (int)integer8);
      
      int int2 = vec1.indexOf(integer8);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertEquals(8, integerArray0.length);
      assertTrue(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = 333;
      Vec<Integer> vec1 = new Vec<Integer>(333, integer0);
      assertEquals(333, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      assertFalse(integer0.equals((Object)int0));
      
      Vec<String> vec2 = new Vec<String>(333, "v@S$tj8");
      assertFalse(vec2.isEmpty());
      assertEquals(333, vec2.size());
      assertNotNull(vec2);
      
      boolean boolean0 = vec1.equals(vec2);
      assertEquals(333, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(333, vec2.size());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      ReadOnlyVec<String> readOnlyVec0 = null;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(333, vec2.size());
      assertEquals(333, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertNotNull(readOnlyVec1);
      
      Vec<ReadOnlyVec<String>> vec3 = null;
      try {
        vec3 = new Vec<ReadOnlyVec<String>>((-1476), readOnlyVec1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(2390);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(0, readOnlyVec0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      assertTrue(vec2.equals((Object)vec0));
      
      vec0.shrink(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotSame(vec0, vec2);
      assertTrue(vec0.equals((Object)vec2));
      
      vec0.moveTo((IVec<ReadOnlyVec<Integer>>) vec2);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotSame(vec0, vec2);
      assertNotSame(vec2, vec0);
      assertTrue(vec0.equals((Object)vec2));
      assertTrue(vec2.equals((Object)vec0));
      
      vec0.ensure((-1599));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotSame(vec0, vec2);
      assertTrue(vec0.equals((Object)vec2));
      
      Comparator<ReadOnlyVec<Integer>> comparator0 = (Comparator<ReadOnlyVec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotSame(vec0, vec2);
      assertTrue(vec0.equals((Object)vec2));
      
      Vec<Integer> vec3 = new Vec<Integer>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      assertTrue(vec3.equals((Object)vec1));
      
      vec3.hashCode();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotSame(vec3, vec1);
      assertTrue(vec3.equals((Object)vec1));
      
      Vec<String> vec4 = new Vec<String>();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator1);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      vec4.clear();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      vec4.ensure(15);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      Vec<Vec<String>> vec5 = new Vec<Vec<String>>(0, vec4);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec5);
      
      // Undeclared exception!
      try { 
        vec5.set(3438, vec4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3438
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>(2282, "Kr");
      assertEquals(2282, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.insertFirstWithShifting("");
      assertEquals(2283, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1, "%Y.");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.push("%Y.");
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(2, iVec0.size());
      assertNotNull(iVec0);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(vec1);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      vec1.insertFirst(integer0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(0, objectArray0.length);
      
      vec1.growTo(1, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(0, objectArray0.length);
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 3);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertNotNull(readOnlyVec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(readOnlyVec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertNotNull(readOnlyVec2);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[2] = readOnlyVec2;
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(3, readOnlyVecArray0.length);
      assertNotNull(vec2);
      
      Iterator<ReadOnlyVec<String>> iterator0 = vec2.iterator();
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(3, readOnlyVecArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(349, 1, 316, 1209, (-1)).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      // Undeclared exception!
      try { 
        vec1.sort(2, 911, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1209
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Object object0 = vec1.get(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNull(object0);
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 3);
      vecArray0[0] = vec1;
      vecArray0[1] = vec1;
      vecArray0[2] = vec1;
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(vecArray0);
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(3, vecArray0.length);
      assertNotNull(vec2);
      
      String string0 = vec2.toString();
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(3, vecArray0.length);
      assertNotNull(string0);
      assertEquals(",,", string0);
      
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      vec3.ensure(0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      vec3.ensure((-59));
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      // Undeclared exception!
      try { 
        vec3.removeFromLast((ReadOnlyVec<String>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.delete((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.shrink(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1983, (Object) null);
      assertEquals(1983, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirst((Object) null);
      assertEquals(1984, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1383;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1383).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1383, (-811), comparator1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = vec1.isEmpty();
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1383, vec1.size());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.clone();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1383).when(comparator2).compare(anyString() , anyString());
      vec0.sortUnique(comparator2);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2, stringArray0.length);
      
      Integer integer0 = new Integer((-4646));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-4646), (int)integer0);
      
      Vec<Integer> vec3 = null;
      try {
        vec3 = new Vec<Integer>((-4646), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.growTo(5, "");
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-433), (-1), (-2304), (-1)).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      // Undeclared exception!
      try { 
        vec1.sort(2, 911, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1;
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.growTo(1, (Vec<Object>) null);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.unsafePush((Vec<Object>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>(489);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      assertFalse(vec1.equals((Object)vec0));
      
      // Undeclared exception!
      try { 
        vec0.sortUnique((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, stringArray0.length);
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      vec1.sort(comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, stringArray0.length);
      assertNotSame(vec1, vec0);
      assertTrue(vec1.equals((Object)vec0));
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(0, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, stringArray0.length);
      assertNotNull(vec2);
      assertTrue(vec0.equals((Object)vec1));
      
      vec2.sort(0, (-811), (Comparator<Vec<String>>) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, stringArray0.length);
      assertNotSame(vec0, vec1);
      assertTrue(vec0.equals((Object)vec1));
      
      boolean boolean0 = vec2.isEmpty();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, stringArray0.length);
      assertNotSame(vec0, vec1);
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(boolean0);
      
      Vec<Object> vec3 = new Vec<Object>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      IVec<Object> iVec0 = vec3.clone();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(0);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertNotNull(vec0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Aj^nii9jV'";
      stringArray0[1] = "";
      stringArray0[2] = "org.sat4j.core.Vec$1";
      stringArray0[3] = "]+nmrJ-";
      stringArray0[4] = "a!tf0!RbcJ";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      //  // Unstable assertion: assertEquals(7, vec1.size());
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(7, stringArray0.length);
      //  // Unstable assertion: assertNotNull(vec1);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      //  // Unstable assertion: assertEquals(7, vec1.size());
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(7, readOnlyVec0.size());
      //  // Unstable assertion: assertFalse(readOnlyVec0.isEmpty());
      //  // Unstable assertion: assertEquals(7, stringArray0.length);
      //  // Unstable assertion: assertNotNull(readOnlyVec0);
      
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      //  // Unstable assertion: assertEquals(7, vec1.size());
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(7, readOnlyVec0.size());
      //  // Unstable assertion: assertFalse(readOnlyVec0.isEmpty());
      //  // Unstable assertion: assertFalse(readOnlyVec1.isEmpty());
      //  // Unstable assertion: assertEquals(7, readOnlyVec1.size());
      //  // Unstable assertion: assertEquals(7, stringArray0.length);
      //  // Unstable assertion: assertNotNull(readOnlyVec1);
      //  // Unstable assertion: assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      Integer integer0 = new Integer(2919);
      //  // Unstable assertion: assertNotNull(integer0);
      //  // Unstable assertion: assertEquals(2919, (int)integer0);
      
      // Undeclared exception!
      try { 
        vec1.remove("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.unsafePush(")zUT}C]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>(2446, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(2446, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.delete(2446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2446
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<String> vec2 = new Vec<String>(1718);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertNotNull(readOnlyVec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 6);
      readOnlyVecArray0[0] = readOnlyVec0;
      readOnlyVecArray0[1] = readOnlyVec1;
      readOnlyVecArray0[2] = readOnlyVec1;
      readOnlyVecArray0[3] = readOnlyVec1;
      readOnlyVecArray0[4] = readOnlyVec1;
      readOnlyVecArray0[5] = readOnlyVec0;
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertFalse(vec3.isEmpty());
      assertEquals(6, vec3.size());
      assertEquals(6, readOnlyVecArray0.length);
      assertNotNull(vec3);
      
      boolean boolean0 = vec3.contains(readOnlyVec0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec3.isEmpty());
      assertEquals(6, vec3.size());
      assertEquals(6, readOnlyVecArray0.length);
      assertNotSame(readOnlyVec0, readOnlyVec1);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(boolean0);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyString() , anyString());
      // Undeclared exception!
      vec2.selectionSort(225, 911, comparator1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = vec0.indexOf("");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals((-1), int0);
      
      Vec<String> vec1 = new Vec<String>(15);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.get(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.contains(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(boolean0);
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Vec<String> vec3 = new Vec<String>();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      vec2.insertFirstWithShifting(readOnlyVec0);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator0);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",";
      stringArray0[1] = "";
      vec3.insertFirst("org.sat4j.core.ReadOnlyVec");
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      
      stringArray0[2] = "/Rzc!";
      stringArray0[3] = "";
      stringArray0[4] = ",";
      stringArray0[5] = "";
      Vec<String> vec4 = new Vec<String>(stringArray0);
      assertEquals(6, vec4.size());
      assertFalse(vec4.isEmpty());
      assertEquals(6, stringArray0.length);
      assertNotNull(vec4);
      assertFalse(vec4.equals((Object)vec3));
      
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec4);
      assertEquals(6, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(6, readOnlyVec1.size());
      assertEquals(6, stringArray0.length);
      assertNotNull(readOnlyVec1);
      assertFalse(vec4.equals((Object)vec3));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(readOnlyVec0);
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1, readOnlyVec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec2);
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec1));
      assertFalse(vec3.equals((Object)vec4));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec1));
      
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec4);
      assertEquals(6, vec4.size());
      assertFalse(vec4.isEmpty());
      assertEquals(6, readOnlyVec3.size());
      assertFalse(readOnlyVec3.isEmpty());
      assertEquals(6, stringArray0.length);
      assertNotNull(readOnlyVec3);
      assertFalse(vec4.equals((Object)vec3));
      assertFalse(readOnlyVec3.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 3);
      readOnlyVecArray0[0] = readOnlyVec1;
      readOnlyVecArray0[1] = readOnlyVec2;
      readOnlyVecArray0[2] = readOnlyVec3;
      Vec<ReadOnlyVec<String>> vec5 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertEquals(3, vec5.size());
      assertFalse(vec5.isEmpty());
      assertEquals(3, readOnlyVecArray0.length);
      assertNotNull(vec5);
      assertFalse(vec5.equals((Object)vec2));
      
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(readOnlyVec3);
      assertEquals(6, vec4.size());
      assertFalse(vec4.isEmpty());
      assertEquals(6, readOnlyVec3.size());
      assertFalse(readOnlyVec3.isEmpty());
      assertFalse(readOnlyVec4.isEmpty());
      assertEquals(6, readOnlyVec4.size());
      assertEquals(6, stringArray0.length);
      assertNotNull(readOnlyVec4);
      assertFalse(vec4.equals((Object)vec3));
      assertFalse(readOnlyVec3.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec4.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      
      ReadOnlyVec<String> readOnlyVec5 = new ReadOnlyVec<String>(readOnlyVec2);
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1, readOnlyVec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec5.size());
      assertFalse(readOnlyVec5.isEmpty());
      assertNotNull(readOnlyVec5);
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec1));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec4));
      assertFalse(vec3.equals((Object)vec4));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec1));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec0));
      
      boolean boolean1 = vec5.contains(readOnlyVec5);
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1, readOnlyVec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(3, vec5.size());
      assertFalse(vec5.isEmpty());
      assertEquals(1, readOnlyVec5.size());
      assertFalse(readOnlyVec5.isEmpty());
      assertEquals(3, readOnlyVecArray0.length);
      assertNotSame(readOnlyVec2, readOnlyVec5);
      assertNotSame(readOnlyVec2, readOnlyVec0);
      assertNotSame(readOnlyVec2, readOnlyVec3);
      assertNotSame(readOnlyVec2, readOnlyVec1);
      assertNotSame(readOnlyVec2, readOnlyVec4);
      assertNotSame(vec3, vec4);
      assertNotSame(readOnlyVec0, readOnlyVec1);
      assertNotSame(readOnlyVec0, readOnlyVec4);
      assertNotSame(readOnlyVec0, readOnlyVec3);
      assertNotSame(readOnlyVec0, readOnlyVec2);
      assertNotSame(readOnlyVec0, readOnlyVec5);
      assertNotSame(vec5, vec2);
      assertNotSame(readOnlyVec5, readOnlyVec0);
      assertNotSame(readOnlyVec5, readOnlyVec3);
      assertNotSame(readOnlyVec5, readOnlyVec4);
      assertNotSame(readOnlyVec5, readOnlyVec1);
      assertNotSame(readOnlyVec5, readOnlyVec2);
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec1));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec4));
      assertFalse(vec3.equals((Object)vec4));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec5));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec1));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec0.equals((Object)readOnlyVec3));
      assertFalse(vec5.equals((Object)vec2));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.selectionSort(225, 225, comparator1);
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertNotSame(vec3, vec4);
      assertFalse(vec3.equals((Object)vec4));
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(571);
      assertNotNull(integer0);
      assertEquals(571, (int)integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(1383, integer0);
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Integer integer1 = new Integer(1731);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1731, (int)integer1);
      
      boolean boolean0 = vec1.contains(integer1);
      assertEquals(1383, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 0;
      int int1 = 1109;
      // Undeclared exception!
      try { 
        vec0.shrink(1109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.ensure((-2402));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.remove("osYIc'6sx)BDaC");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(5);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Vec<Object> vec1 = new Vec<Object>(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>(5, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(5, vec2.size());
      assertNotNull(vec2);
      assertFalse(vec2.equals((Object)vec1));
      
      vecArray0[1] = vec2;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(vecArray0);
      assertEquals(2, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals(2, vecArray0.length);
      assertNotNull(vec3);
      assertFalse(vec3.equals((Object)vec0));
      
      vec0.copyTo((IVec<Vec<Object>>) vec3);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals(2, vecArray0.length);
      assertNotSame(vec0, vec3);
      assertNotSame(vec3, vec0);
      assertFalse(vec0.equals((Object)vec3));
      assertFalse(vec3.equals((Object)vec0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1209);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1209, 2, (-1), (-1), 911).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sort(2, 911, comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.growTo(5, "");
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2708, 2708, 2708, (-1426), 1186).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      vec0.copyTo(objectArray0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, (-811)).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "WC";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, stringArray0.length);
      assertNotNull(vec0);
      
      Iterator<String> iterator0 = vec0.iterator();
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, stringArray0.length);
      assertNotNull(iterator0);
      
      vec0.shrink(0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, stringArray0.length);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(226);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(5, readOnlyVec0.size());
      assertEquals(5, stringArray0.length);
      assertNotNull(readOnlyVec0);
      
      vec1.insertFirst(readOnlyVec0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(5, readOnlyVec0.size());
      assertEquals(5, stringArray0.length);
      
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(5, readOnlyVec1.size());
      assertEquals(5, stringArray0.length);
      assertNotNull(readOnlyVec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      boolean boolean0 = vec1.contains(readOnlyVec1);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(5, readOnlyVec1.size());
      assertEquals(5, stringArray0.length);
      assertNotSame(readOnlyVec1, readOnlyVec0);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(boolean0);
      
      boolean boolean1 = vec0.isEmpty();
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(226, vec2);
      assertFalse(vec3.isEmpty());
      assertEquals(226, vec3.size());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec3);
      
      String string0 = vec3.toString();
      assertFalse(vec3.isEmpty());
      assertEquals(226, vec3.size());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(string0);
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string0);
      
      vec3.shrinkTo(0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      // Undeclared exception!
      try { 
        vec2.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(11, integer0);
      assertEquals(11, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Integer integer1 = new Integer(1532);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1532, (int)integer1);
      
      vec1.insertFirstWithShifting(integer1);
      assertEquals(12, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Vec<String> vec2 = new Vec<String>(1862);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vec2.insertFirstWithShifting("d");
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      vec2.growTo(1862, "");
      assertEquals(1862, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec2.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(vec0);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(2, readOnlyVec0.size());
      assertEquals(2, stringArray0.length);
      assertNotNull(readOnlyVec0);
      
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(2, readOnlyVec0.size());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(readOnlyVec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(1359);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.moveTo(15, 0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-413);
      String string0 = "";
      Vec<String> vec0 = null;
      try {
        vec0 = new Vec<String>((-413), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.contains(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<ReadOnlyVec<Object>> comparator0 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      vec0.selectionSort(0, 0, comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, objectArray0.length);
      assertNotNull(vec1);
      
      IVec<Object> iVec0 = vec1.clone();
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(2, iVec0.size());
      assertEquals(2, objectArray0.length);
      assertNotNull(iVec0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(0, 0, comparator1);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = 2204;
      Vec<Integer> vec1 = new Vec<Integer>(2204);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vec1.sort(0, 15, comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec0.insertFirst(readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        readOnlyVec0.moveTo((IVec<Integer>) vec1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Vec<String> vec3 = new Vec<String>(5, "fQSlJqK.RXU0_%J");
      assertEquals(5, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      int int0 = vec3.indexOf("fQSlJqK.RXU0_%J");
      assertEquals(5, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting(integer0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.removeFromLast(integer0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1015);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>(5);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator1);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      vec0.copyTo((IVec<Integer>) vec0);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer1 = new Integer(1015);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1015, (int)integer1);
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(1355);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      Comparator<ReadOnlyVec<Integer>> comparator2 = (Comparator<ReadOnlyVec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator2);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      Integer integer2 = new Integer(1460);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1460, (int)integer2);
      
      int int0 = vec0.indexOf(integer2);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = vec2.indexOf(object0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = vec0.equals(integer1);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean0);
      
      Vec<String> vec4 = new Vec<String>(0);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      vec4.clear();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      Vec<Vec<String>> vec5 = new Vec<Vec<String>>(0);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(vec5);
      
      Comparator<Vec<String>> comparator3 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec5.sort(comparator3);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      
      Iterator<Vec<String>> iterator0 = vec5.iterator();
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(iterator0);
      
      Vec<ReadOnlyVec<String>> vec6 = null;
      try {
        vec6 = new Vec<ReadOnlyVec<String>>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String string0 = vec0.toString();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      vec0.ensure(1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(0, "");
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.isEmpty();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) vec1;
      objectArray0[1] = (Object) vec1;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec1;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(5, objectArray0.length);
      assertNotNull(vec2);
      
      Vec vec3 = (Vec)vec2.last();
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertEquals(5, objectArray0.length);
      assertNotNull(vec3);
      
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(1101, vec2);
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(vec4.isEmpty());
      assertEquals(1101, vec4.size());
      assertEquals(5, objectArray0.length);
      assertNotNull(vec4);
      
      vec4.insertFirst(vec2);
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(vec4.isEmpty());
      assertEquals(1102, vec4.size());
      assertEquals(5, objectArray0.length);
      
      vec4.growTo(0, vec2);
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertEquals(5, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-211));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-211), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      // Undeclared exception!
      try { 
        vec2.copyTo(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.shrinkTo(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirst("g*^/3X#K+OkX");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      vec0.moveTo((-4224), (-4224));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g*^/3X#K+OkX";
      stringArray0[1] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[2] = "g*^/3X#K+OkX";
      stringArray0[3] = "Kx[,!";
      stringArray0[4] = "g*^/3X#K+OkX";
      stringArray0[5] = "g*^/3X#K+OkX";
      stringArray0[6] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[7] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(8, stringArray0.length);
      assertNotNull(vec1);
      
      vec1.growTo(489, "org.sat4j.core.Vec");
      assertFalse(vec1.isEmpty());
      assertEquals(489, vec1.size());
      assertEquals(8, stringArray0.length);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sort(comparator0);
      assertFalse(vec1.isEmpty());
      assertEquals(489, vec1.size());
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.growTo(0, (Integer) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.moveTo((-2087), (-2087));
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      int int0 = vec1.indexOf(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        vec0.remove(integer0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      int int0 = 1015;
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1920, "org.sat4j.core.Vec$1");
      int int0 = 5;
      String string0 = "org.sat4j.core.ReadOnlyVec";
      vec0.growTo(5, "org.sat4j.core.ReadOnlyVec");
      String string1 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      Vec<String> vec1 = new Vec<String>(1920, (String) null);
      // Undeclared exception!
      try { 
        vec1.unsafePush("org.sat4j.core.Vec$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1920
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      Integer integer0 = new Integer(15);
      // Undeclared exception!
      try { 
        vec0.remove("S");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.growTo(5, "org.sat4j.core.ReadOnlyVec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = vec0.indexOf("org.sat4j.core.ReadOnlyVec");
      assertEquals(5, vec0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1592, "(@EW: ^%:w'|y8");
      vec0.growTo(1592, "(@EW: ^%:w'|y8");
      vec0.delete(1592);
      assertEquals(1591, vec0.size());
      
      vec0.push("(@EW: ^%:w'|y8");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(1592, 1592, comparator0);
      Vec<Object> vec1 = new Vec<Object>(1592, vec0);
      vec1.clone();
      vec1.hashCode();
      assertEquals(1592, vec0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      IVec<String> iVec0 = vec0.clone();
      assertEquals(0, iVec0.size());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1383, vec0);
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(1383, (-811), comparator1);
      boolean boolean0 = vec1.isEmpty();
      assertFalse(boolean0);
      assertEquals(1383, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      Vec<Object> vec3 = new Vec<Object>();
      vec2.moveTo((IVec<Object>) vec3);
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      vec0.toArray();
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DJ9Zc2p";
      stringArray0[1] = "";
      stringArray0[2] = "SF";
      stringArray0[3] = "7@o/w/b0)ImM";
      stringArray0[4] = "CQ0";
      stringArray0[5] = "ViZ2h%iKGD?KKt";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      int int0 = vec0.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(316, readOnlyVec0);
      vec1.hashCode();
      assertEquals(316, vec1.size());
  }
}
