/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:49:06 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.GlucoseLCDS;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlucoseLCDS_ESTest extends GlucoseLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, glucose21Restarts0);
      VecInt vecInt0 = new VecInt(950);
      Lits lits0 = new Lits();
      glucoseLCDS0.init();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = glucoseLCDS0.computeLBD(learntBinaryClause0);
      int int1 = glucoseLCDS0.computeLBD(learntBinaryClause0);
      assertTrue(int1 == int0);
      
      glucoseLCDS0.init();
      int int2 = glucoseLCDS0.computeLBD(learntBinaryClause0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      VecInt vecInt0 = new VecInt(950);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Vec<Constr> vec0 = new Vec<Constr>(2, learntBinaryClause0);
      vec0.growTo((-2664), learntBinaryClause0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1441));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = glucoseLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, fixedPeriodRestarts0);
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, fixedPeriodRestarts0);
      ConflictTimer conflictTimer0 = glucose2LCDS0.getTimer();
      assertSame(conflictTimer0, fixedPeriodRestarts0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(0);
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      PureOrder pureOrder0 = new PureOrder(0);
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<MixedDataStructureDanielWLConciseBinary> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWLConciseBinary>(solver0, glucose21Restarts0);
      UnitClause unitClause0 = new UnitClause((-1604));
      Vec<Constr> vec0 = new Vec<Constr>(2, unitClause0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      VecInt vecInt0 = new VecInt(32);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0.0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, basicLauncher0);
      GlucoseLCDS<MixedDataStructureDanielWLConciseBinary> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWLConciseBinary>(solver0, lubyRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>(32, learntBinaryClause0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder(1);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.onClauseLearning((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      SearchParams searchParams0 = new SearchParams(32);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0, basicLauncher0);
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(32);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.onClauseLearning(learntBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      GlucoseLCDS<MixedDataStructureDanielWL> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWL>((Solver<MixedDataStructureDanielWL>) null, noRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-676.6919794778147));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, arminRestarts0);
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>(solver0, arminRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.computeLBD((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, glucose21Restarts0);
      VecInt vecInt0 = new VecInt(112);
      Lits lits0 = new Lits();
      glucoseLCDS0.init();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = glucoseLCDS0.computeLBD(learntBinaryClause0);
      glucoseLCDS0.init();
      int int1 = glucoseLCDS0.computeLBD(learntBinaryClause0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      SearchParams searchParams0 = new SearchParams(0);
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      PureOrder pureOrder0 = new PureOrder(0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, glucose21Restarts0, basicLauncher0);
      EMARestarts eMARestarts0 = new EMARestarts();
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, eMARestarts0);
      VecInt vecInt0 = new VecInt(46);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.computeLBD(learntBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      VecInt vecInt0 = new VecInt(32);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-392.0));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      learntBinaryClause0.setActivity(621.76);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, basicLauncher0);
      GlucoseLCDS<MixedDataStructureDanielWLConciseBinary> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWLConciseBinary>(solver0, lubyRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>(7, learntBinaryClause0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      VecInt vecInt0 = new VecInt(950);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Vec<Constr> vec0 = new Vec<Constr>(2, learntBinaryClause0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, glucose21Restarts0);
      glucoseLCDS0.reduce(vec0);
      assertEquals(2, vec0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(5525);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, glucose21Restarts0);
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>(gateTranslator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      glucoseLCDS0.onClauseLearning(learntWLClause0);
      assertEquals(1.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Constr constr0 = Constr.TAUTOLOGY;
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(100);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, lubyRestarts0);
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      glucoseLCDS0.onPropagation(constr0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(7);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      NoRestarts noRestarts0 = new NoRestarts();
      UnitClause unitClause0 = new UnitClause(0);
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0, basicLauncher0);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, noRestarts0);
      glucose2LCDS0.onConflictAnalysis(unitClause0);
      assertTrue(unitClause0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-3334));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(5525, 0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, glucose21Restarts0);
      String string0 = glucoseLCDS0.toString();
      assertEquals("Glucose learned constraints deletion strategy with timer Glucose 2.1 dynamic restart strategy", string0);
  }
}
