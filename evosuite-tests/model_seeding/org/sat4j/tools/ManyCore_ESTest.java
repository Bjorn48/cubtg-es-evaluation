/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:44:26 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[3];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolverArray0[1];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[4];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolverArray0[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMax>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMax>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, statisticsSolverArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[2];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ManyCore<GateTranslator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<GateTranslator>((GateTranslator[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<ClausalCardinalitiesDecorator<DimacsStringSolver>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<DimacsStringSolver>>(stringArray0, (ClausalCardinalitiesDecorator<DimacsStringSolver>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[8];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(true, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[9];
      ManyCore<OptToSatAdapter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[4];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(false, stringArray0, statisticsSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ManyCore<SolutionCounter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SolutionCounter>((ASolverFactory<SolutionCounter>) null, true, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      assertNotNull(manyCore0);
      assertEquals(0, optToSatAdapterArray0.length);
      
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>((ASolverFactory<Solver<CardinalityDataStructureYanMax>>) null, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = manyCore0.addParity(vecInt0, false);
      assertNotNull(iConstr0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(true, modelIteratorToSATAdapterArray0);
      assertNotNull(manyCore0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1.0), 532.9827379134287, (-108.218), (-1043));
      assertNotNull(searchParams0);
      assertEquals((-1043), searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(532.9827379134287, searchParams0.getClaDecay(), 0.01);
      assertEquals((-108.218), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1043));
      assertNotNull(lubyRestarts0);
      assertEquals((-1043), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1043), searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(532.9827379134287, searchParams0.getClaDecay(), 0.01);
      assertEquals((-108.218), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1043), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      manyCore0.provideUnitClauses(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1043), searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(532.9827379134287, searchParams0.getClaDecay(), 0.01);
      assertEquals((-108.218), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1043), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[7];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[4] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[1];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(7, dimacsStringSolverArray0.length);
      
      manyCore0.setKeepSolverHot(true);
      assertEquals(7, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      manyCore0.registerLiteral(1532);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, stringArray0.length);
      
      solutionCounter0.setVerbose(true);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, stringArray0.length);
      
      solutionCounter0.setTimeout(50);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[4];
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, stringArray0.length);
      
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounterArray0[0];
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounterArray0[0];
      ManyCore<SolutionCounter> manyCore1 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      assertNotNull(manyCore1);
      assertEquals(4, solutionCounterArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore1.removeConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove a group of constraints!
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMax>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMax>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      assertNotNull(printWriter0);
      assertEquals("", stringWriter0.toString());
      
      manyCore0.printStat(printWriter0, "Does not make sense in the parallel context");
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, gateTranslatorArray0.length);
      
      manyCore0.printStat((PrintStream) null, "^32Od");
      assertEquals(0, gateTranslatorArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(false, dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(1, dimacsStringSolverArray0.length);
      
      manyCore0.expireTimeout();
      assertEquals(1, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[9];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(gateTranslator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(gateTranslator0).nVars();
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      assertNotNull(lexicoDecorator0);
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      
      ClausalCardinalitiesDecorator<LexicoDecorator<GateTranslator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<GateTranslator>>(lexicoDecorator0, (EncodingStrategyAdapter) null);
      assertNotNull(clausalCardinalitiesDecorator0);
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      assertNotNull(minOneDecorator0);
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[4] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[5] = minOneDecoratorArray0[1];
      minOneDecoratorArray0[6] = minOneDecoratorArray0[4];
      minOneDecoratorArray0[7] = minOneDecoratorArray0[3];
      minOneDecoratorArray0[8] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(9, minOneDecoratorArray0.length);
      
      VecInt vecInt0 = new VecInt(2647);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertNotNull(readOnlyVecInt0);
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      SubModelIterator subModelIterator0 = new SubModelIterator(manyCore0, readOnlyVecInt0, 1L);
      assertNotNull(subModelIterator0);
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(9, minOneDecoratorArray0.length);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(subModelIterator0, vecInt0);
      assertNotNull(abstractMinimalModel0);
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(9, minOneDecoratorArray0.length);
      
      GateTranslator gateTranslator1 = new GateTranslator(abstractMinimalModel0);
      assertNotNull(gateTranslator1);
      assertFalse(gateTranslator1.equals((Object)gateTranslator0));
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(9, minOneDecoratorArray0.length);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(gateTranslator1);
      assertNotNull(minimal4CardinalityModel0);
      assertFalse(gateTranslator1.equals((Object)gateTranslator0));
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(9, minOneDecoratorArray0.length);
      
      IConstr iConstr0 = minimal4CardinalityModel0.addClause(vecInt0);
      assertNotNull(iConstr0);
      assertFalse(gateTranslator1.equals((Object)gateTranslator0));
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertEquals(9, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(9, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = (NegationDecorator<AbstractMinimalModel>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(negationDecorator0).addAtLeast(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ASolverFactory<NegationDecorator<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<NegationDecorator<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(negationDecorator0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XjT<[.}Jj";
      ManyCore<NegationDecorator<AbstractMinimalModel>> manyCore0 = new ManyCore<NegationDecorator<AbstractMinimalModel>>(aSolverFactory0, false, stringArray0);
      IConstr iConstr0 = manyCore0.addAtLeast((IVecInt) null, (-5489));
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[3];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(50);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(stringArray0, gateTranslatorArray0);
      manyCore0.clearLearntClauses();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      // Undeclared exception!
      try { 
        manyCore0.isDBSimplificationAllowed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMax>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMax>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMax>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMax>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant((-1745));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = (NegationDecorator<AbstractMinimalModel>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      ASolverFactory<NegationDecorator<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<NegationDecorator<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XjT<[.}Jj";
      ManyCore<NegationDecorator<AbstractMinimalModel>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<NegationDecorator<AbstractMinimalModel>>(aSolverFactory0, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(false, gateTranslatorArray0);
      // Undeclared exception!
      try { 
        manyCore0.getStat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, true, stringArray0);
      List<AbstractMinimalModel> list0 = manyCore0.getSolvers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIterator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<ModelIterator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<ModelIterator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<ModelIterator>>(true, groupClauseSelectorSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.nVars();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIterator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<ModelIterator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<ModelIterator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<ModelIterator>>(true, groupClauseSelectorSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.isVerbose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ManyCore<Minimal4CardinalityModel>[] manyCoreArray0 = (ManyCore<Minimal4CardinalityModel>[]) Array.newInstance(ManyCore.class, 0);
      ManyCore<ManyCore<Minimal4CardinalityModel>> manyCore0 = new ManyCore<ManyCore<Minimal4CardinalityModel>>(manyCoreArray0);
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(true, modelIteratorToSATAdapterArray0);
      // Undeclared exception!
      try { 
        manyCore0.setUnitClauseProvider(manyCore1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMax>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMax>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getTimeoutMs();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      // Undeclared exception!
      try { 
        manyCore0.getTimeout();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.realNumberOfVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      try { 
        manyCore0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      // Undeclared exception!
      try { 
        manyCore0.model(485);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(aSolverFactory0, stringArray0);
      manyCore0.learnUnit(6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIterator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<ModelIterator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<ModelIterator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<ModelIterator>>(true, groupClauseSelectorSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[9];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gateTranslator0).getLogPrefix();
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      ClausalCardinalitiesDecorator<LexicoDecorator<GateTranslator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<GateTranslator>>(lexicoDecorator0, (EncodingStrategyAdapter) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[2] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[3] = minOneDecorator0;
      minOneDecoratorArray0[4] = minOneDecoratorArray0[3];
      minOneDecoratorArray0[5] = minOneDecoratorArray0[2];
      minOneDecoratorArray0[6] = minOneDecoratorArray0[2];
      minOneDecoratorArray0[7] = minOneDecoratorArray0[5];
      minOneDecoratorArray0[8] = minOneDecoratorArray0[3];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      String string0 = manyCore0.getLogPrefix();
      assertNull(string0);
  }
}
