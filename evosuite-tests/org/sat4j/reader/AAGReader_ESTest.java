/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:51:43 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.reader.AAGReader;
import org.sat4j.tools.DimacsOutputSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AAGReader_ESTest extends AAGReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      aAGReader0.parseInstance((InputStream) byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        aAGReader0.parseInstance((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1444868105), (-1444868105));
      // Undeclared exception!
      try { 
        aAGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(749);
      try { 
        aAGReader0.parseInstance((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        aAGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAAG format only!
         //
         verifyException("org.sat4j.reader.AAGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      int[] intArray0 = new int[3];
      aAGReader0.decode(intArray0, (PrintWriter) null);
      assertFalse(aAGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AAGReader aAGReader0 = new AAGReader(dimacsOutputSolver0);
      int[] intArray0 = new int[5];
      String string0 = aAGReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
