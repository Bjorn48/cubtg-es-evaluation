/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 16:58:50 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.Triangle4Symbol;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Stack;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolygonSymbol_ESTest extends PolygonSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      // Undeclared exception!
      try { 
        triangle4Symbol0.draw((Graphics) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PolygonSymbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      triangle4Symbol0.setBorderColor((Color) null);
      triangle4Symbol0.draw(graphics2D0, (-1273), 0);
      assertEquals(8, triangle4Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      Stack<Object> stack0 = new Stack<Object>();
      JTable jTable0 = new JTable(stack0, stack0);
      Color color0 = jTable0.getSelectionForeground();
      triangle4Symbol0.setFillColor(color0);
      BufferedImage bufferedImage0 = new BufferedImage(8, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      triangle4Symbol0.draw(graphics2D0, 1, 0);
      assertEquals(8, triangle4Symbol0.getSize());
  }
}
