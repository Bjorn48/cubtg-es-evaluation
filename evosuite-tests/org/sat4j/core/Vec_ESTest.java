/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:43:40 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1732);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec0.selectionSort(802, 1732, comparator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 4);
      readOnlyVecArray0[0] = readOnlyVec0;
      readOnlyVecArray0[1] = readOnlyVec0;
      readOnlyVecArray0[2] = readOnlyVec0;
      readOnlyVecArray0[3] = readOnlyVec0;
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec2.set(0, readOnlyVec0);
      Integer integer0 = new Integer(0);
      Vec<Integer> vec3 = new Vec<Integer>(1, integer0);
      vec3.last();
      vec3.pop();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1);
      vec0.toString();
      vec0.moveTo((IVec<Object>) vec0);
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      vec1.copyTo((IVec<Comparable<String>>) vec1);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 8);
      Vec<Object> vec2 = new Vec<Object>();
      vecArray0[0] = vec2;
      Vec<String> vec3 = new Vec<String>();
      Vec<Object> vec4 = null;
      try {
        vec4 = new Vec<Object>((-1747), vec3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(2147, readOnlyVec0);
      vec1.growTo(2147, readOnlyVec0);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "QCq5l91SdN?I";
      stringArray0[5] = "S";
      stringArray0[6] = "[v5Jm7p+>";
      stringArray0[7] = "";
      stringArray0[8] = "n)L%$#w&SThO|MW}8iO";
      Vec<String> vec3 = new Vec<String>(stringArray0);
      Vec<Vec<String>> vec4 = new Vec<Vec<String>>(2147, vec3);
      vec4.contains(vec3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2147, ",");
      vec0.insertFirst("0-?#nE");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2147, 15, 2147, 15, 770).when(comparator1).compare(anyString() , anyString());
      // Undeclared exception!
      vec0.sortUnique(comparator1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      int int0 = 0;
      Vec<Object> vec1 = new Vec<Object>(0);
      // Undeclared exception!
      try { 
        vec1.shrink(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>();
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.clear();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(3067);
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      vec0.clone();
      vec0.last();
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>();
      vec1.moveTo(3067, 3067);
      Vec<Object> vec2 = new Vec<Object>(stringArray0);
      Vec<Object> vec3 = new Vec<Object>(3067, vec2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec3.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "U]I886:i=Bzu";
      stringArray0[4] = "";
      stringArray0[5] = "org.sat4j.core.Vec";
      stringArray0[6] = "";
      stringArray0[7] = "Cp}V$i,;2vFbiCO";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.clone();
      vec0.clone();
      vec0.shrink(1);
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(4049, vec0);
      vec2.contains(vec1);
      Vec<Vec<Object>> vec3 = null;
      try {
        vec3 = new Vec<Vec<Object>>((Vec<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.growTo(15, "");
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = (-2128);
      vec0.growTo((-2128), "V88EQAd,t8");
      int int1 = 0;
      Vec<Integer> vec1 = new Vec<Integer>(16);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(2147, 50, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator1);
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2129
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.hashCode();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(2);
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      vec0.clone();
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      Vec<Object> vec2 = new Vec<Object>(0);
      vec2.shrinkTo(30);
      Vec<String> vec3 = new Vec<String>(8, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 531, (-1623), 8, 8).when(comparator0).compare(anyString() , anyString());
      vec3.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 2912;
      Vec<String> vec0 = new Vec<String>(2912, "Pr`#p]uuu0RU2{w");
      // Undeclared exception!
      try { 
        vec0.removeFromLast("]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(562);
      vec0.push("");
      vec0.growTo(50, ",");
      int int0 = 0;
      Vec<Integer> vec1 = new Vec<Integer>(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(50, 0, comparator1);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.clone();
      vec0.clone();
      vec0.shrink(1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(0, vec2);
      vec3.contains(vec0);
      Vec<Vec<Object>> vec4 = null;
      try {
        vec4 = new Vec<Vec<Object>>((Vec<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<String> vec1 = new Vec<String>(2123);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>();
      vec2.contains(vec0);
      vec0.toString();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.shrink(0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec0);
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec1);
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec1);
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(vec0);
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(readOnlyVec4);
      ReadOnlyVec<Object> readOnlyVec6 = new ReadOnlyVec<Object>(readOnlyVec3);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 8);
      readOnlyVecArray0[0] = readOnlyVec3;
      Vec<Object> vec1 = new Vec<Object>(0, readOnlyVec3);
      ReadOnlyVec<Object> readOnlyVec7 = new ReadOnlyVec<Object>(vec1);
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec2.isEmpty();
      Integer[] integerArray0 = new Integer[8];
      Integer.valueOf(0);
      Integer integer0 = new Integer(0);
      integer0.intValue();
      integerArray0[4] = integerArray0[3];
      Vec<Integer> vec3 = new Vec<Integer>(integerArray0);
      vec3.last();
      Object object0 = new Object();
      vec0.insertFirstWithShifting(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 4);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      vec1.indexOf(vec0);
      Vec<String> vec2 = null;
      try {
        vec2 = new Vec<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.toString();
      // Undeclared exception!
      try { 
        vec1.unsafePush("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2345;
      Vec<Object> vec0 = new Vec<Object>(2345);
      vec0.clone();
      vec0.iterator();
      vec0.toArray();
      Vec<String> vec1 = new Vec<String>(2345);
      // Undeclared exception!
      try { 
        vec1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      int int0 = 325;
      Integer integer0 = new Integer(325);
      // Undeclared exception!
      try { 
        vec0.remove(integer0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1);
      vec0.insertFirst((Object) null);
      Integer integer0 = new Integer((-1786));
      vec0.insertFirstWithShifting(integer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 2912;
      Vec<String> vec0 = new Vec<String>(2912, "Pr`#p]uuu0RU2{w");
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 2);
      Vec<String> vec0 = new Vec<String>();
      vecArray0[0] = vec0;
      int int0 = 0;
      Vec<String> vec1 = new Vec<String>(0);
      vecArray0[1] = vec1;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-1006), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 562;
      Vec<Integer> vec0 = new Vec<Integer>(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(50, 0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator1);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(0);
      // Undeclared exception!
      try { 
        vec1.moveTo((IVec<ReadOnlyVec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 2147;
      Vec<String> vec0 = new Vec<String>(2147, ",");
      vec0.insertFirst("0-?#nE");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2283), (-2283), (-2283), (-2283), (-2283)).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      try { 
        vec0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.shrink(0);
      // Undeclared exception!
      try { 
        vec0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec0.isEmpty();
      Integer integer0 = new Integer((-1786));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      vec0.shrinkTo(27);
      vec0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(0);
      String string0 = "V~l/%z2?yZ]uP<^@1_";
      Vec<String> vec1 = new Vec<String>(0, "V~l/%z2?yZ]uP<^@1_");
      vec0.insertFirstWithShifting(vec1);
      vec0.iterator();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      int int0 = (-2933);
      Vec<Object> vec2 = null;
      try {
        vec2 = new Vec<Object>((-2933));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      vec1.clear();
      vec0.contains(vec1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      // Undeclared exception!
      try { 
        vec0.remove("&#yJIy$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(2147, readOnlyVec0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-O :";
      stringArray0[4] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      vec2.copyTo((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1063);
      // Undeclared exception!
      try { 
        vec0.remove("4[fwQ5oN");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      Vec<String> vec2 = new Vec<String>();
      Integer integer0 = new Integer((-2360));
      Integer integer1 = new Integer((-2360));
      vec1.insertFirstWithShifting("Cp}V$i,;2vFbiCO");
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>();
      vec3.clone();
      Vec<Integer> vec4 = new Vec<Integer>(294, integer0);
      vec4.shrink((-2166));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      int int0 = 1;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(1753, 0, comparator0);
      vec0.insertFirst((Object) null);
      vec0.toString();
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 9);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec1);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec1);
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(readOnlyVec1);
      readOnlyVecArray0[5] = readOnlyVec5;
      ReadOnlyVec<Object> readOnlyVec6 = new ReadOnlyVec<Object>(readOnlyVec4);
      readOnlyVecArray0[6] = readOnlyVec6;
      ReadOnlyVec<Object> readOnlyVec7 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[7] = readOnlyVec7;
      ReadOnlyVec<Object> readOnlyVec8 = new ReadOnlyVec<Object>(readOnlyVec1);
      readOnlyVecArray0[8] = readOnlyVec8;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1237, "");
      vec0.shrink(8);
      vec0.delete(8);
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      vec1.clear();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer(5);
      vec0.unsafePush(integer0);
      vec0.last();
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>();
      Vec<Object> vec2 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 7);
      readOnlyVecArray0[0] = readOnlyVec0;
      readOnlyVecArray0[1] = readOnlyVec0;
      readOnlyVecArray0[2] = readOnlyVec0;
      readOnlyVecArray0[3] = readOnlyVec0;
      readOnlyVecArray0[4] = readOnlyVec0;
      readOnlyVecArray0[5] = readOnlyVec0;
      readOnlyVecArray0[6] = readOnlyVec0;
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      Vec<ReadOnlyVec<Object>> vec4 = new Vec<ReadOnlyVec<Object>>();
      vec4.ensure(296);
      vec4.isEmpty();
      Integer integer1 = new Integer(2133);
      Vec<Comparable<Integer>> vec5 = new Vec<Comparable<Integer>>(2116, integer1);
      Integer integer2 = new Integer((-30));
      vec0.contains(integer2);
      Vec<Integer> vec6 = null;
      try {
        vec6 = new Vec<Integer>((-30));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 4880;
      Vec<String> vec0 = new Vec<String>(4880);
      // Undeclared exception!
      try { 
        vec0.selectionSort(483, 508, (Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2147, ",");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Vec<Integer> vec0 = null;
      try {
        vec0 = new Vec<Integer>((-1670), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.size();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1);
      vec0.insertFirstWithShifting((Object) null);
      vec0.toString();
      vec0.insertFirst((Object) null);
      vec0.toString();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.clone();
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2, vec1);
      // Undeclared exception!
      try { 
        vec2.contains(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 2112;
      Vec<Integer> vec0 = new Vec<Integer>(2112);
      int int1 = 1333;
      vec0.ensure(1333);
      Integer integer0 = Integer.valueOf((-1));
      vec0.insertFirst(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      // Undeclared exception!
      try { 
        vec1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(2);
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      vec0.clone();
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      Vec<Object> vec2 = new Vec<Object>(0);
      vec2.shrinkTo(30);
      Vec<String> vec3 = new Vec<String>(8, "VB.RH");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec3.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(2147, readOnlyVec0);
      vec1.remove(readOnlyVec0);
      vec1.insertFirst(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.shrink(0);
      // Undeclared exception!
      try { 
        vec0.delete(4015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4015
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(1078);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      // Undeclared exception!
      try { 
        vec0.set((-1639), readOnlyVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1639
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.clone();
      vec0.insertFirst((Object) null);
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      // Undeclared exception!
      try { 
        vec0.contains(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      Vec<Object> vec0 = new Vec<Object>(0);
      vec0.clone();
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = null;
      Vec<String> vec1 = null;
      try {
        vec1 = new Vec<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.clone();
      Iterator<Integer> iterator0 = vec0.iterator();
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      vec1.growTo(2293, iterator0);
      vec1.shrinkTo(0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object object0 = new Object();
      vec0.equals(object0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.valueOf((-747));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-747));
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(0);
      integer2.intValue();
      integer2.intValue();
      Integer integer3 = new Integer((-1762));
      integer3.intValue();
      integerArray0[2] = (Integer) (-1762);
      vec0.copyTo(integerArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(995, ",[6");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(3054, 3054, comparator0);
      int int0 = (-1599);
      int int1 = 0;
      // Undeclared exception!
      try { 
        vec0.moveTo((-1599), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1599
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1237, "");
      vec0.last();
      Vec<String> vec1 = new Vec<String>();
      vec1.moveTo((IVec<String>) vec1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec0.sort(332, 1237, comparator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(2);
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      vec0.clone();
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      Vec<Object> vec2 = new Vec<Object>(0);
      vec2.shrinkTo(30);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 8);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec1);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(vec1);
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(readOnlyVec3);
      readOnlyVecArray0[5] = readOnlyVec5;
      Vec<Object> vec3 = new Vec<Object>(2);
      ReadOnlyVec<Object> readOnlyVec6 = new ReadOnlyVec<Object>(vec3);
      readOnlyVecArray0[6] = readOnlyVec6;
      ReadOnlyVec<Object> readOnlyVec7 = new ReadOnlyVec<Object>(readOnlyVec3);
      readOnlyVecArray0[7] = readOnlyVec7;
      Vec<ReadOnlyVec<Object>> vec4 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec4.remove(readOnlyVec4);
      ReadOnlyVec<Object> readOnlyVec8 = new ReadOnlyVec<Object>(readOnlyVec2);
      vec4.insertFirst(readOnlyVec8);
      vec1.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(2147, readOnlyVec0);
      vec1.growTo(2147, readOnlyVec0);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>();
      vec0.insertFirst(vec2);
      Vec<Comparable<Object>> vec3 = new Vec<Comparable<Object>>(2147);
      vec0.contains(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(0);
      vec0.clear();
      Vec<Object> vec1 = new Vec<Object>(1);
      vec1.insertFirst((Object) null);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec2.isEmpty();
      Integer integer0 = new Integer(768);
      Vec<Comparable<Integer>> vec3 = new Vec<Comparable<Integer>>(1, integer0);
      Vec<Integer> vec4 = new Vec<Integer>(768, integer0);
      vec4.last();
      Integer integer1 = new Integer((-1786));
      vec1.insertFirstWithShifting(integer1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(1405);
      IVec<Vec<String>> iVec0 = vec0.clone();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iVec0;
      objectArray0[1] = (Object) iVec0;
      objectArray0[2] = (Object) iVec0;
      objectArray0[3] = (Object) iVec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      int int0 = 0;
      vec2.equals(objectArray0[3]);
      Vec<Integer> vec3 = new Vec<Integer>(1808);
      vec3.toString();
      Vec<String> vec4 = new Vec<String>();
      vec4.indexOf("");
      // Undeclared exception!
      try { 
        vec4.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2);
      vec0.size();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(2);
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      vec0.clone();
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(0);
      Vec<String> vec2 = new Vec<String>(stringArray0);
      Vec<String> vec3 = new Vec<String>();
      vec2.moveTo((IVec<String>) vec3);
      vec3.hashCode();
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>();
      vec4.clone();
      // Undeclared exception!
      try { 
        vec3.contains("_@#W)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.size();
      Vec<Integer> vec1 = new Vec<Integer>(0);
      // Undeclared exception!
      try { 
        vec1.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vec<Integer> vec0 = null;
      try {
        vec0 = new Vec<Integer>((-5046));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(539);
      // Undeclared exception!
      try { 
        vec0.get(2109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2109
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>();
      vec0.clear();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 2);
      int int0 = 596;
      Vec<Object> vec0 = new Vec<Object>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(596, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(596, vec1.size());
      assertNotNull(vec1);
      
      String string0 = vec1.toString();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(596, vec1.size());
      assertNotNull(string0);
      assertEqualsstring0);
      
      comparableArray0[0] = (Comparable<String
      String string1 = vec1.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(596, vec1.size());
      assertNotNull(string1);
      assertEqualsstring1);
      
      comparableArray0[1] = (Comparable<String
      Vec<Comparable<String>> vec2 = new Vec<Comparable<String>>(comparableArray0);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      assertNotNull(vec2);
      assertEquals(2, comparableArray0.length);
      
      vec0.ensure(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<Comparable<String>> comparator0 = (Comparator<Comparable<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(nullable(java.lang.Comparable.class) , nullable(java.lang.Comparable.class));
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<String>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Comparable<String>>) toDoubleFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertNotNull(comparator1);
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<String>> comparator2 = comparator1.thenComparingLong(toLongFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator1));
      assertNotNull(comparator2);
      
      Comparator<Comparable<String>> comparator3 = comparator2.thenComparing(comparator1);
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator2));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator1));
      assertFalse(comparator3.equals((Object)comparator2));
      assertFalse(comparator3.equals((Object)comparator0));
      assertFalse(comparator3.equals((Object)comparator1));
      assertNotNull(comparator3);
      assertNotSame(comparator2, comparator3);
      assertNotSame(comparator3, comparator2);
      
      Comparator<Comparable<String>> comparator4 = comparator3.reversed();
      assertFalse(comparator4.equals((Object)comparator1));
      assertFalse(comparator4.equals((Object)comparator3));
      assertFalse(comparator4.equals((Object)comparator2));
      assertFalse(comparator4.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator2));
      assertFalse(comparator1.equals((Object)comparator3));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator3));
      assertFalse(comparator2.equals((Object)comparator1));
      assertFalse(comparator3.equals((Object)comparator2));
      assertFalse(comparator3.equals((Object)comparator0));
      assertFalse(comparator3.equals((Object)comparator1));
      assertNotNull(comparator4);
      assertNotSame(comparator2, comparator3);
      assertNotSame(comparator3, comparator2);
      
      vec2.selectionSort(0, 0, comparator4);
      assertFalse(comparator4.equals((Object)comparator1));
      assertFalse(comparator4.equals((Object)comparator3));
      assertFalse(comparator4.equals((Object)comparator2));
      assertFalse(comparator4.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator4));
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator2));
      assertFalse(comparator1.equals((Object)comparator3));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator3));
      assertFalse(comparator2.equals((Object)comparator1));
      assertFalse(comparator2.equals((Object)comparator4));
      assertFalse(comparator3.equals((Object)comparator4));
      assertFalse(comparator3.equals((Object)comparator2));
      assertFalse(comparator3.equals((Object)comparator0));
      assertFalse(comparator3.equals((Object)comparator1));
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      assertEquals(2, comparableArray0.length);
      assertNotSame(comparator2, comparator3);
      assertNotSame(comparator3, comparator2);
      
      vec2.sortUnique(comparator0);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2, comparableArray0.length);
      
      Vec<String> vec3 = new Vec<String>(596);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      // Undeclared exception!
      try { 
        vec3.delete(596);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 596
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "U]I886:i=Bzu";
      stringArray0[4] = "";
      stringArray0[5] = "org.sat4j.core.Vec";
      stringArray0[6] = "";
      stringArray0[7] = "Cp}V$i,;2vFbiCO";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(8, vec0.size());
      assertNotNull(vec0);
      assertEquals(8, stringArray0.length);
      
      IVec<String> iVec0 = vec0.clone();
      assertFalse(vec0.isEmpty());
      assertEquals(8, vec0.size());
      assertEquals(8, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      assertEquals(8, stringArray0.length);
      
      IVec<String> iVec1 = vec0.clone();
      assertTrue(iVec1.equals((Object)iVec0));
      assertFalse(vec0.isEmpty());
      assertEquals(8, vec0.size());
      assertFalse(iVec1.isEmpty());
      assertEquals(8, iVec1.size());
      assertNotNull(iVec1);
      assertEquals(8, stringArray0.length);
      assertNotSame(iVec1, iVec0);
      
      vec0.shrink(1);
      assertFalse(vec0.isEmpty());
      assertEquals(7, vec0.size());
      assertEquals(8, stringArray0.length);
      
      vec0.selectionSort(1493, 1, (Comparator<String>) null);
      assertFalse(vec0.isEmpty());
      assertEquals(7, vec0.size());
      assertEquals(8, stringArray0.length);
      
      int int0 = vec0.indexOf("");
      assertFalse(vec0.isEmpty());
      assertEquals(7, vec0.size());
      assertEquals(8, stringArray0.length);
      assertEquals(0, int0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1493, vec1);
      assertEquals(1493, vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec2);
      
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Vec<Object>> comparator0 = Comparator.comparingInt((ToIntFunction<? super Vec<Object>>) toIntFunction0);
      assertNotNull(comparator0);
      
      vec2.sort(0, 1493, comparator0);
      assertEquals(1493, vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      vec0.unsafePush(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(0, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      int int0 = vec2.size();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(227);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        vec0.shrink(227);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      String[] stringArray0 = new String[0];
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      assertEquals(0, stringArray0.length);
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(5704, vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(5704, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = vec2.contains(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(5704, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<ReadOnlyVec<Object>> comparator0 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort((-1123), (-1123), comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(562);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertNotNull(vec0);
      
      vec0.growTo(50, "");
      //  // Unstable assertion: assertEquals(50, vec0.size());
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertNotNull(vec1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(50, 0, comparator0);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator1);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      IVec<Integer> iVec0 = vec0.clone();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertNotNull(iVec0);
      
      Iterator<Integer> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertEquals(0, objectArray0.length);
      
      vec1.shrinkTo(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(2147, readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2147, vec1.size());
      assertNotNull(vec1);
      
      vec1.growTo(2147, readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2147, vec1.size());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[3] = "QCq5l91SdN?I";
      stringArray0[5] = "S";
      stringArray0[6] = "[v5Jm7p+>";
      Vec<String> vec3 = new Vec<String>(2147, "org.sat4j.core.ReadOnlyVec");
      assertEquals(2147, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.selectionSort(2147, 2147, comparator0);
      assertEquals(2147, vec3.size());
      assertFalse(vec3.isEmpty());
      
      int int0 = vec3.indexOf("$n8F-M ");
      assertEquals(2147, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals((-1), int0);
      
      Vec<Object> vec4 = new Vec<Object>();
      assertTrue(vec4.equals((Object)vec0));
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      
      Vec<Vec<Object>> vec5 = new Vec<Vec<Object>>(5, vec0);
      assertTrue(vec0.equals((Object)vec4));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(5, vec5.size());
      assertFalse(vec5.isEmpty());
      assertNotNull(vec5);
      
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<Object>> comparator1 = Comparator.comparingInt((ToIntFunction<? super Vec<Object>>) toIntFunction0);
      assertNotNull(comparator1);
      
      vec5.sort(558, (-1), comparator1);
      assertTrue(vec0.equals((Object)vec4));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(5, vec5.size());
      assertFalse(vec5.isEmpty());
      assertNotSame(vec0, vec4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = integer0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      
      Vec<Integer> vec0 = new Vec<Integer>(1239, integer0);
      assertEquals(1239, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      int int0 = 598;
      // Undeclared exception!
      try { 
        vec1.moveTo(2403, 598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 598
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "";
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 3);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(readOnlyVecArray0[0]);
      assertNotNull(readOnlyVec0);
      assertEquals(3, readOnlyVecArray0.length);
      
      readOnlyVecArray0[1] = readOnlyVec0;
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<ReadOnlyVec<Object>> comparator0 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-2632), 2912, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 2581;
      String string0 = null;
      Vec<Object> vec0 = new Vec<Object>(2581, (Object) null);
      assertFalse(vec0.isEmpty());
      assertEquals(2581, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      assertEquals(3067, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      IVec<Integer> iVec0 = vec0.clone();
      assertEquals(3067, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(3067, iVec0.size());
      assertNotNull(iVec0);
      
      Iterator<Integer> iterator0 = vec0.iterator();
      assertEquals(3067, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(iterator0);
      
      Vec<Object> vec1 = new Vec<Object>(6);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Vec<Object> vec2 = new Vec<Object>(0);
      assertTrue(vec2.equals((Object)vec1));
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vec2.shrinkTo(30);
      assertFalse(vec2.equals((Object)vec1));
      assertEquals(30, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotSame(vec2, vec1);
      
      Vec<String> vec3 = new Vec<String>(8, "VB.RH");
      assertEquals(8, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      Vec<Comparable<String>> vec4 = new Vec<Comparable<String>>(3868, "VB.RH");
      assertEquals(3868, vec4.size());
      assertFalse(vec4.isEmpty());
      assertNotNull(vec4);
      
      vec4.moveTo(8, 15);
      assertEquals(3868, vec4.size());
      assertFalse(vec4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirst((Object) null);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec0.contains(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertNotNull(readOnlyVec1);
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(1329, readOnlyVec1);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertEquals(1329, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.remove(readOnlyVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1329
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "66w";
      stringArray0[2] = "T)P5=vO%{+WV6`-</";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(0, (-2073), comparator0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(3, stringArray0.length);
      
      String string0 = vec0.get(2);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("T)P5=vO%{+WV6`-</", string0);
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      String string1 = Integer.toBinaryString((-2362));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("11111111111111111111011011000110", string1);
      
      // Undeclared exception!
      try { 
        vec1.unsafePush((Integer) (-2362));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(782);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast(readOnlyVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(443);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 6);
      Integer integer0 = new Integer((-1839));
      assertNotNull(integer0);
      assertEquals((-1839), (int)integer0);
      
      Vec<Object> vec1 = new Vec<Object>(443, integer0);
      assertEquals(443, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>();
      assertFalse(vec2.equals((Object)vec1));
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vecArray0[1] = vec2;
      Vec<Object> vec3 = new Vec<Object>(443);
      assertFalse(vec3.equals((Object)vec1));
      assertTrue(vec3.equals((Object)vec2));
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      vecArray0[2] = vec3;
      Vec<Object> vec4 = new Vec<Object>();
      assertTrue(vec4.equals((Object)vec2));
      assertFalse(vec4.equals((Object)vec1));
      assertTrue(vec4.equals((Object)vec3));
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      vecArray0[3] = vec4;
      Vec<Object> vec5 = new Vec<Object>(443);
      assertFalse(vec5.equals((Object)vec1));
      assertTrue(vec5.equals((Object)vec2));
      assertTrue(vec5.equals((Object)vec3));
      assertTrue(vec5.equals((Object)vec4));
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertNotNull(vec5);
      
      vecArray0[4] = vec5;
      Vec<Object> vec6 = new Vec<Object>();
      assertTrue(vec6.equals((Object)vec4));
      assertTrue(vec6.equals((Object)vec3));
      assertTrue(vec6.equals((Object)vec2));
      assertFalse(vec6.equals((Object)vec1));
      assertTrue(vec6.equals((Object)vec5));
      assertEquals(0, vec6.size());
      assertTrue(vec6.isEmpty());
      assertNotNull(vec6);
      
      vecArray0[5] = vec6;
      vec6.ensure(443);
      assertTrue(vec6.equals((Object)vec4));
      assertTrue(vec6.equals((Object)vec3));
      assertTrue(vec6.equals((Object)vec2));
      assertFalse(vec6.equals((Object)vec1));
      assertTrue(vec6.equals((Object)vec5));
      assertEquals(0, vec6.size());
      assertTrue(vec6.isEmpty());
      assertNotSame(vec6, vec2);
      assertNotSame(vec6, vec5);
      assertNotSame(vec6, vec4);
      assertNotSame(vec6, vec1);
      assertNotSame(vec6, vec3);
      
      Vec<Vec<Object>> vec7 = new Vec<Vec<Object>>(vecArray0);
      assertFalse(vec7.isEmpty());
      assertEquals(6, vec7.size());
      assertNotNull(vec7);
      assertEquals(6, vecArray0.length);
      
      String string0 = vec7.toString();
      assertFalse(vec7.isEmpty());
      assertEquals(6, vec7.size());
      assertNotNull(string0);
      assertEquals(6, vecArray0.length);
      
      boolean boolean0 = vec0.contains(string0);
      assertFalse(vec7.isEmpty());
      assertEquals(6, vec7.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(6, vecArray0.length);
      assertFalse(boolean0);
      
      Vec<String> vec8 = new Vec<String>();
      assertEquals(0, vec8.size());
      assertTrue(vec8.isEmpty());
      assertNotNull(vec8);
      
      String string1 = vec8.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, vec8.size());
      assertTrue(vec8.isEmpty());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Integer integer1 = new Integer(46);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(46, (int)integer1);
      
      Vec<Comparable<Integer>> vec9 = null;
      try {
        vec9 = new Vec<Comparable<Integer>>((-974), integer1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = 500;
      vec0.shrinkTo(500);
      assertFalse(vec0.isEmpty());
      assertEquals(500, vec0.size());
      
      vec0.shrinkTo(500);
      assertFalse(vec0.isEmpty());
      assertEquals(500, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.insertFirst((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.shrink(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.clear();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(562);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.push("");
      //  // Unstable assertion: assertEquals(1, vec0.size());
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(1, iVec0.size());
      //  // Unstable assertion: assertFalse(iVec0.isEmpty());
      //  // Unstable assertion: assertNotNull(iVec0);
      
      vec0.growTo(50, ",");
      //  // Unstable assertion: assertEquals(50, vec0.size());
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertNotNull(vec1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(50, 0, comparator0);
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec1.size());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator1);
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(3067, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(3067, vec0.size());
      assertNotNull(vec0);
      
      IVec<Integer> iVec0 = vec0.clone();
      assertFalse(vec0.isEmpty());
      assertEquals(3067, vec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(3067, iVec0.size());
      assertNotNull(iVec0);
      
      Iterator<Integer> iterator0 = vec0.iterator();
      assertFalse(vec0.isEmpty());
      assertEquals(3067, vec0.size());
      assertNotNull(iterator0);
      
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      assertFalse(vec1.isEmpty());
      assertEquals(9, vec1.size());
      assertNotNull(vec1);
      assertEquals(9, stringArray0.length);
      
      Vec<Object> vec2 = new Vec<Object>(0);
      assertFalse(vec2.equals((Object)vec1));
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.shrinkTo(30);
      assertFalse(vec2.equals((Object)vec1));
      assertEquals(30, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotSame(vec2, vec1);
      
      Vec<String> vec3 = new Vec<String>(8, "VB.RH");
      assertEquals(8, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-1), 2, 0, 2).when(comparator0).compare(anyString() , anyString());
      vec3.sortUnique(comparator0);
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 2);
      int int0 = 596;
      Vec<Object> vec0 = new Vec<Object>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(596, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(596, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      String string0 = vec1.toString();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(596, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(string0);
      assertEqualsstring0);
      
      comparableArray0[0] = (Comparable<String
      String string1 = vec1.toString();
      assertTrue(string1.equals((Object)string0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(596, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(string1);
      assertEqualsstring1);
      
      Vec<Comparable<String>> vec2 = new Vec<Comparable<String>>(comparableArray0);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      assertNotNull(vec2);
      assertEquals(2, comparableArray0.length);
      
      vec0.ensure(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<Comparable<String>> comparator0 = (Comparator<Comparable<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(596, 35).when(comparator0).compare(nullable(java.lang.Comparable.class) , nullable(java.lang.Comparable.class));
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<String>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Comparable<String>>) toDoubleFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertNotNull(comparator1);
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<String>> comparator2 = comparator1.thenComparingLong(toLongFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator1));
      assertNotNull(comparator2);
      
      Comparator<Comparable<String>> comparator3 = comparator2.thenComparing(comparator1);
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator2));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator1));
      assertFalse(comparator3.equals((Object)comparator1));
      assertFalse(comparator3.equals((Object)comparator0));
      assertFalse(comparator3.equals((Object)comparator2));
      assertNotNull(comparator3);
      assertNotSame(comparator2, comparator3);
      assertNotSame(comparator3, comparator2);
      
      Comparator<Comparable<String>> comparator4 = comparator3.reversed();
      assertFalse(comparator1.equals((Object)comparator3));
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator2));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator1));
      assertFalse(comparator2.equals((Object)comparator3));
      assertFalse(comparator3.equals((Object)comparator1));
      assertFalse(comparator3.equals((Object)comparator0));
      assertFalse(comparator3.equals((Object)comparator2));
      assertFalse(comparator4.equals((Object)comparator1));
      assertFalse(comparator4.equals((Object)comparator2));
      assertFalse(comparator4.equals((Object)comparator3));
      assertFalse(comparator4.equals((Object)comparator0));
      assertNotNull(comparator4);
      assertNotSame(comparator2, comparator3);
      assertNotSame(comparator3, comparator2);
      
      vec2.selectionSort(0, 0, comparator4);
      assertFalse(comparator1.equals((Object)comparator4));
      assertFalse(comparator1.equals((Object)comparator3));
      assertFalse(comparator1.equals((Object)comparator0));
      assertFalse(comparator1.equals((Object)comparator2));
      assertFalse(comparator2.equals((Object)comparator0));
      assertFalse(comparator2.equals((Object)comparator4));
      assertFalse(comparator2.equals((Object)comparator1));
      assertFalse(comparator2.equals((Object)comparator3));
      assertFalse(comparator3.equals((Object)comparator4));
      assertFalse(comparator3.equals((Object)comparator1));
      assertFalse(comparator3.equals((Object)comparator0));
      assertFalse(comparator3.equals((Object)comparator2));
      assertFalse(comparator4.equals((Object)comparator1));
      assertFalse(comparator4.equals((Object)comparator2));
      assertFalse(comparator4.equals((Object)comparator3));
      assertFalse(comparator4.equals((Object)comparator0));
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      assertEquals(2, comparableArray0.length);
      assertNotSame(comparator2, comparator3);
      assertNotSame(comparator3, comparator2);
      
      vec2.sortUnique(comparator0);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertEquals(2, comparableArray0.length);
      
      Vec<String> vec3 = new Vec<String>(596);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      // Undeclared exception!
      try { 
        vec3.delete(596);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 596
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0, "Hzm?F}%zEn>XJ!C$");
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      vec0.growTo(0, object0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = (-1);
      vec0.moveTo((-1), (-1));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      vec0.unsafePush(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = null;
      try {
        vec1 = new Vec<Vec<Object>>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      String string0 = vec0.get(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNull(string0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(0, (-191), comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 8);
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>(1596, (Object) null);
      assertFalse(vec2.equals((Object)vec1));
      assertFalse(vec2.isEmpty());
      assertEquals(1596, vec2.size());
      assertNotNull(vec2);
      
      vecArray0[1] = vec2;
      Vec<Object> vec3 = new Vec<Object>(1596);
      assertTrue(vec3.equals((Object)vec1));
      assertFalse(vec3.equals((Object)vec2));
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      vecArray0[2] = vec3;
      Vec<Object> vec4 = new Vec<Object>();
      assertTrue(vec4.equals((Object)vec1));
      assertTrue(vec4.equals((Object)vec3));
      assertFalse(vec4.equals((Object)vec2));
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      vecArray0[3] = vec4;
      Vec<Object> vec5 = new Vec<Object>(0);
      assertTrue(vec5.equals((Object)vec4));
      assertTrue(vec5.equals((Object)vec1));
      assertTrue(vec5.equals((Object)vec3));
      assertFalse(vec5.equals((Object)vec2));
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(vec5);
      
      vecArray0[4] = vec5;
      Vec<Object> vec6 = null;
      try {
        vec6 = new Vec<Object>((-191));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertFalse(vec1.isEmpty());
      assertEquals(9, vec1.size());
      assertNotNull(vec1);
      assertEquals(9, stringArray0.length);
      
      Vec<String> vec2 = new Vec<String>(2486);
      assertFalse(vec2.equals((Object)vec1));
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Vec<Object> vec3 = new Vec<Object>();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      IVec<Object> iVec0 = vec3.push(vec1);
      assertFalse(vec1.equals((Object)vec2));
      assertFalse(vec1.isEmpty());
      assertEquals(9, vec1.size());
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      assertEquals(9, stringArray0.length);
      assertNotSame(vec1, vec2);
      
      int int0 = vec3.indexOf("");
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(306);
      assertNotNull(integer0);
      assertEquals(306, (int)integer0);
      
      vec0.insertFirstWithShifting(integer0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "";
      stringArray0[2] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[3] = "XMY";
      stringArray0[4] = "&8K";
      stringArray0[5] = "ffKVv#32`35!}Rf!g";
      stringArray0[6] = "";
      stringArray0[7] = "vD,'x>\";Yl\"x)";
      stringArray0[8] = ".[p0(C=:\"]M4k2]45";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(9, vec0.size());
      assertNotNull(vec0);
      assertEquals(9, stringArray0.length);
      
      Vec<String> vec1 = new Vec<String>();
      assertFalse(vec1.equals((Object)vec0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec0.moveTo((IVec<String>) vec1);
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(vec1.equals((Object)vec0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(9, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(9, stringArray0.length);
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      
      vec1.hashCode();
      assertFalse(vec1.equals((Object)vec0));
      assertEquals(9, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec1, vec0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2147, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2147, 2147, 2147, 2147, (-3287)).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 2912;
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 3);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(readOnlyVecArray0[0]);
      readOnlyVecArray0[1] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      readOnlyVecArray0[2] = readOnlyVec1;
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      int int1 = (-1545);
      vec0.ensure(2912);
      // Undeclared exception!
      try { 
        vec0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Object>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Integer>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1);
      vec0.insertFirst((Object) null);
      Vec<Object> vec1 = new Vec<Object>(1, (Object) null);
      vec1.insertFirst((Object) null);
      // Undeclared exception!
      try { 
        vec1.sortUnique((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "U]I886:i=Bzu";
      stringArray0[4] = "";
      stringArray0[5] = "org.sat4j.core.Vec";
      stringArray0[6] = "";
      stringArray0[7] = "Cp}V$i,;2vFbiCO";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.clone();
      vec0.clone();
      vec0.shrink(1);
      vec0.selectionSort(1493, 1, (Comparator<String>) null);
      int int0 = vec0.indexOf("");
      assertEquals(7, vec0.size());
      
      Integer integer0 = new Integer(2052);
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      Integer integer1 = new Integer(0);
      vec1.insertFirstWithShifting(integer1);
      assertTrue(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2147, vec1);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(2147, vec1);
      // Undeclared exception!
      try { 
        vec3.contains(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0, (Vec<Object>) null);
      vec0.toArray();
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      int int0 = vec0.indexOf(readOnlyVec0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1);
      vec0.ensure(1242);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(1);
      vec1.hashCode();
      Vec<Object> vec2 = new Vec<Object>();
      vec2.insertFirst(vec0);
      vec2.push(vec0);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      Vec<ReadOnlyVec<String>> vec3 = null;
      try {
        vec3 = new Vec<ReadOnlyVec<String>>((-2390), readOnlyVec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(562);
      vec0.growTo(50, "");
      Vec<Integer> vec1 = new Vec<Integer>(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      String[] stringArray0 = new String[2];
      vec0.moveTo((IVec<String>) vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer(5);
      vec0.unsafePush(integer0);
      vec0.last();
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>();
      // Undeclared exception!
      try { 
        vec1.moveTo(5, 2997);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2997
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }
}
