/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:06:01 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.Chart;
import de.progra.charting.ChartEncoder;
import de.progra.charting.DefaultChart;
import de.progra.charting.Legend;
import de.progra.charting.render.RowColorModel;
import java.awt.Rectangle;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import javax.swing.DebugGraphics;
import javax.swing.JTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartEncoder_ESTest extends ChartEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DefaultChart defaultChart0 = new DefaultChart();
      Legend legend0 = new Legend((RowColorModel) null);
      Rectangle rectangle0 = legend0.colorbox;
      defaultChart0.bounds = rectangle0;
      try { 
        ChartEncoder.createPNG(pipedOutputStream0, defaultChart0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // I/O error writing PNG file!
         //
         verifyException("de.progra.charting.ChartEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Legend legend0 = new Legend();
      Rectangle rectangle0 = legend0.getColorBox();
      defaultChart0.setBounds(rectangle0);
      try { 
        ChartEncoder.createJPEG((OutputStream) null, defaultChart0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // output == null!
         //
         verifyException("de.progra.charting.ChartEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        ChartEncoder.createEncodedImage(pipedOutputStream0, (Chart) null, "m$qX@>-;kbi]aksmt$b");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DefaultChart defaultChart0 = new DefaultChart();
      JTree jTree0 = new JTree();
      Rectangle rectangle0 = jTree0.getRowBounds(1);
      defaultChart0.setBounds(rectangle0);
      try { 
        ChartEncoder.createEncodedImage(pipedOutputStream0, defaultChart0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No ImageWriter for writing  images found.
         //
         verifyException("de.progra.charting.ChartEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      JTree jTree0 = new JTree();
      Rectangle rectangle0 = jTree0.getRowBounds(0);
      defaultChart0.setBounds(rectangle0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("de.progra.charting.ChartEncoder", true);
      ChartEncoder.createEncodedImage(mockFileOutputStream0, defaultChart0, "png");
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = ChartEncoder.getSupportedFormats();
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DefaultChart defaultChart0 = new DefaultChart();
      ChartEncoder.createGIF(dataOutputStream0, defaultChart0);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChartEncoder chartEncoder0 = new ChartEncoder();
  }
}
