/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 16:39:22 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.ClassAssigner;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassAssigner_ESTest extends ClassAssigner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = (-2109);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zw>OEQN-", arrayList0, 0);
      Instances instances1 = classAssigner0.determineOutputFormat(instances0);
      assertEquals((-2109), instances1.classIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = (-2098);
      String string0 = classAssigner0.getClassIndex();
      assertEquals("-2097", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("-C <num|first|last|0>");
      assertEquals((-2), ClassAssigner.LAST);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Instance instance0 = classAssigner0.process(binarySparseInstance0);
      assertSame(binarySparseInstance0, instance0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      double[] doubleArray0 = new double[2];
      DenseInstance denseInstance0 = new DenseInstance((-508.62564986407), doubleArray0);
      Instance instance0 = classAssigner0.process(denseInstance0);
      assertEquals((-508.62564986407), instance0.weight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      int[] intArray0 = new int[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-148));
      Instance instance0 = classAssigner0.process(binarySparseInstance0);
      assertSame(instance0, binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Checking for remaining options... ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Checking for remaining options... ", arrayList0, 0);
      Instances instances1 = classAssigner0.determineOutputFormat(instances0);
      assertEquals(0, instances1.classIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?nKa<%wm/xkNNs]9{]";
      stringArray0[1] = "'H;!,`Y{gJHd";
      stringArray0[2] = "l";
      stringArray0[3] = "mw/]l7!4Qf1b ";
      stringArray0[4] = "$Revision: 8034 $";
      stringArray0[5] = "-";
      try { 
        classAssigner0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String[] stringArray0 = new String[1];
      try { 
        classAssigner0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-C";
      try { 
        classAssigner0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -C option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      // Undeclared exception!
      try { 
        classAssigner0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      try { 
        classAssigner0.determineOutputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String string0 = classAssigner0.getClassIndex();
      assertEquals("last", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = 0;
      String string0 = classAssigner0.getClassIndex();
      assertEquals("first", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("last");
      assertFalse(classAssigner0.isFirstBatchDone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zYc^>QDDS-$b?^?a4";
      stringArray0[1] = "import weka.core.Capabilities;\n";
      stringArray0[2] = "last";
      Filter.runFilter(classAssigner0, stringArray0);
      assertEquals("Filter that can set and unset the class index.", classAssigner0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      Enumeration enumeration0 = classAssigner0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = (-1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0", arrayList0, 0);
      Instances instances1 = classAssigner0.determineOutputFormat(instances0);
      assertEquals((-1), instances1.classIndex());
      assertNotSame(instances1, instances0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = 1;
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList0);
      Instances instances0 = new Instances("!", arrayList0, 1);
      try { 
        classAssigner0.determineOutputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("first");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first", arrayList0, 0);
      try { 
        classAssigner0.determineOutputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 0
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList0);
      Instances instances0 = new Instances("!", arrayList0, 1);
      Instances instances1 = classAssigner0.determineOutputFormat(instances0);
      assertEquals((-1), instances1.classIndex());
      assertNotSame(instances1, instances0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = (-1);
      String string0 = classAssigner0.getClassIndex();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = 1;
      String string0 = classAssigner0.getClassIndex();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("8034");
      assertTrue(classAssigner0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("0");
      assertEquals("Turns on output of debugging information.", classAssigner0.debugTipText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("first");
      String[] stringArray0 = classAssigner0.getOptions();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setDebug(true);
      String[] stringArray0 = classAssigner0.getOptions();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String[] stringArray0 = classAssigner0.getOptions();
      classAssigner0.setOptions(stringArray0);
      assertEquals("The index of the class attribute, starts with 1, 'first' and 'last' are accepted as well, '0' unsets the class index.", classAssigner0.classIndexTipText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassAssigner.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String string0 = classAssigner0.classIndexTipText();
      assertEquals("The index of the class attribute, starts with 1, 'first' and 'last' are accepted as well, '0' unsets the class index.", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String string0 = classAssigner0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      Instance instance0 = classAssigner0.process((Instance) null);
      assertNull(instance0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      // Undeclared exception!
      try { 
        classAssigner0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String string0 = classAssigner0.globalInfo();
      assertEquals("Filter that can set and unset the class index.", string0);
  }
}
