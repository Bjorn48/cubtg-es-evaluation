/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:02:16 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-1867));
      Vec<Integer> vec1 = new Vec<Integer>(15, integer0);
      Integer integer1 = new Integer(4);
      Vec<String> vec2 = new Vec<String>(15, "QI+Y^|=tzT$l4");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1867), 15, 4, 15, 15).when(comparator0).compare(anyString() , anyString());
      vec2.sortUnique(comparator0);
      Vec<Object> vec3 = new Vec<Object>(0, integer1);
      vec3.clone();
      vec2.last();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-5585));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-5585));
      integerArray0[1] = integer1;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.insertFirst(integer1);
      vec0.hashCode();
      vec0.indexOf(integerArray0[0]);
      Vec<Object> vec1 = new Vec<Object>(integerArray0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(301, readOnlyVec0);
      vec2.insertFirstWithShifting(readOnlyVec0);
      vec2.delete(0);
      vec1.ensure((-5585));
      int int0 = 3549;
      // Undeclared exception!
      try { 
        vec1.delete(3549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3549
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.isEmpty();
      Integer integer0 = new Integer((-1083));
      Vec<Integer> vec1 = new Vec<Integer>(1401, integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, 1401, 1927, (-1083), 1401).when(comparator0).compare(anyInt() , anyInt());
      vec1.sort(comparator0);
      vec1.equals(integer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "7)&%m]S=WPB#iFn&9[";
      Vec<Object> vec2 = new Vec<Object>(1401);
      vec2.contains("");
      Vec<String> vec3 = new Vec<String>(946);
      // Undeclared exception!
      try { 
        vec3.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String string0 = vec0.toString();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      vec0.hashCode();
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 8);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      int int0 = 1360;
      Integer integer0 = new Integer(1360);
      Vec<Integer> vec1 = null;
      try {
        vec1 = new Vec<Integer>((-1214), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<String> vec1 = new Vec<String>(1318, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      IVec<Object> iVec0 = readOnlyVec0.clone();
      // Undeclared exception!
      try { 
        vec0.moveTo(iVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{^Uq,hSk/Ki3;d#";
      stringArray0[1] = "x$(`";
      stringArray0[2] = "{^Uq,hSk/Ki3;d#";
      stringArray0[3] = "x$(`";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.insertFirstWithShifting("{^Uq,hSk/Ki3;d#");
      vec1.iterator();
      Vec<Object> vec2 = new Vec<Object>(40);
      Vec<Object> vec3 = new Vec<Object>();
      vec3.copyTo((IVec<Object>) vec2);
      Vec<Object> vec4 = new Vec<Object>();
      Integer integer1 = new Integer(1955);
      vec4.push(integer1);
      Integer integer2 = new Integer(40);
      Vec<Integer> vec5 = new Vec<Integer>(3141, (Integer) null);
      vec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 2059;
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(2059);
      vec0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(24|z(3=";
      stringArray0[1] = ">X\"X{s}t@\"T_/D[Z,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[5] = "x$Jh5L6RC7'&M";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.iterator();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(2059, (-3777), comparator1);
      vec1.sortUnique(comparator0);
      vec1.indexOf(">X\"X{s}t@\"T_/D[Z,");
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(0);
      // Undeclared exception!
      try { 
        vec2.moveTo(0, 2059);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2059
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(2717);
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>(2717, ",");
      vec1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "P{5>VX";
      stringArray0[2] = "k.Uu%Wxb";
      stringArray0[3] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.insertFirst("S1");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.clear();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, (-1), 1910, 1910, 1910).when(comparator2).compare(anyString() , anyString());
      vec1.sortUnique(comparator2);
      vec1.selectionSort((-1), (-1), comparator1);
      vec0.sort(15, 15, comparator0);
      vec0.copyTo((IVec<String>) vec1);
      vec0.insertFirst("P{5>VX");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-3903));
      // Undeclared exception!
      try { 
        vec0.remove(integer0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2762);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2762);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.moveTo((int) integerArray0[0], (int) integerArray0[5]);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-3903));
      Vec<String> vec1 = new Vec<String>();
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(949, vec1);
      vec2.toString();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.clear();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Vec<Integer> vec1 = new Vec<Integer>(1845, integer0);
      // Undeclared exception!
      try { 
        vec1.unsafePush(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1845
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      vec0.remove(integer0);
      Vec<String> vec1 = new Vec<String>(1955, "org.sat4j.core.Vec");
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 1);
      vecArray0[0] = vec0;
      // Undeclared exception!
      try { 
        vec1.sortUnique((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Integer> vec1 = new Vec<Integer>(2535);
      String[] stringArray0 = new String[7];
      vec0.growTo(2535, "");
      stringArray0[0] = "";
      stringArray0[1] = "37R:5";
      stringArray0[2] = "G|WW{SIK";
      stringArray0[3] = "Dz0{C5A Lx)RYj";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "on\"? I1!?";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec0.unsafePush(vec2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2535
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2762);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 5;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2762);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.moveTo((int) integerArray0[0], (int) integerArray0[5]);
      Vec<Object> vec1 = new Vec<Object>(integerArray0);
      vec1.indexOf(int0);
      vec1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 0;
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(0);
      Vec<String> vec2 = new Vec<String>(0, "*X#<Fqao^<EgI");
      Vec<String> vec3 = new Vec<String>(0);
      vec3.ensure(0);
      vec2.moveTo((IVec<String>) vec3);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      String string0 = null;
      // Undeclared exception!
      try { 
        readOnlyVec0.insertFirst((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-1867));
      Vec<Integer> vec1 = new Vec<Integer>(15, integer0);
      Integer integer1 = new Integer(4);
      Vec<String> vec2 = new Vec<String>(15, "QI+Y^|=tzT$l4");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec2.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1179, vec1);
      vec2.contains(vec1);
      vec1.clear();
      vec2.equals(vec0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(653);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2482);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(596);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1434));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Vec<Integer> vec3 = new Vec<Integer>(integerArray0);
      vec3.size();
      Vec<Vec<Integer>> vec4 = new Vec<Vec<Integer>>(653, vec3);
      vec4.iterator();
      vec4.insertFirstWithShifting(vec3);
      Vec<String> vec5 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec5.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 26;
      Vec<Object> vec0 = new Vec<Object>(26);
      // Undeclared exception!
      try { 
        vec0.get(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1360, vec0);
      vec1.contains(vec0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<ReadOnlyVec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(2);
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(0, 0, comparator0);
      vec0.contains(vec1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = null;
      try {
        vec0 = new Vec<Vec<Integer>>((Vec<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(2762);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(2762);
      vec1.moveTo(696, 1144);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1179, vec1);
      vec2.contains(vec1);
      vec1.clear();
      Vec<Integer> vec3 = new Vec<Integer>();
      vec3.shrink(0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      Vec<Object> vec0 = new Vec<Object>(vecArray0);
      Vec<Object> vec1 = new Vec<Object>(1, vec0);
      vecArray0[0] = vec1;
      Vec<Object> vec2 = new Vec<Object>(1);
      vecArray0[1] = vec2;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(vecArray0);
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sort(2, 0, comparator0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8lI]bAoevo4j+Q_FY#L";
      stringArray0[1] = "KLRR";
      stringArray0[2] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[3] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "B=OViI0b";
      Vec<String> vec4 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec4.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.insertFirstWithShifting("|#pXE_|]Z#Q?T");
      vec0.insertFirst("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      vec0.clone();
      int int0 = (-896);
      String string0 = "ffm|_[\"Q2ar%wR;N+_";
      Vec<String> vec1 = null;
      try {
        vec1 = new Vec<String>((-896), "ffm|_[\"Q2ar%wR;N+_");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.clone();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer0 = new Integer(0);
      Vec<Integer> vec1 = new Vec<Integer>(370, integer0);
      vec1.remove(integer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "P{5>VX";
      stringArray0[2] = "k.Uu%Wxb";
      stringArray0[3] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-233));
      Vec<Object> vec2 = new Vec<Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sort(comparator1);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      // Undeclared exception!
      try { 
        vec2.copyTo((IVec<Object>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.isEmpty();
      int int0 = 1401;
      int int1 = (-1083);
      Integer integer0 = new Integer((-1083));
      Vec<Integer> vec1 = new Vec<Integer>(1401, integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vec1.sort(comparator0);
      vec1.equals(integer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.sat4j.core.Vec";
      stringArray0[2] = "";
      stringArray0[3] = "7)&%m]S=WPB#iFn&9[";
      stringArray0[4] = "8h}";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec2.delete((-1083));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1083
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.delete(167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 167
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 9);
      int int0 = 0;
      Vec<Object> vec0 = new Vec<Object>(0);
      vecArray0[0] = vec0;
      Vec<Object> vec1 = new Vec<Object>();
      vecArray0[1] = vec1;
      Vec<Object> vec2 = new Vec<Object>(0);
      Vec<Object> vec3 = new Vec<Object>(0, vec2);
      vecArray0[2] = vec3;
      int int1 = 611;
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>(0);
      // Undeclared exception!
      try { 
        vec4.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Integer integer0 = new Integer(0);
      Vec<Integer> vec1 = new Vec<Integer>(927, integer0);
      vec1.isEmpty();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(1, readOnlyVec0);
      Comparator<ReadOnlyVec<Object>> comparator1 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec2.sort(2899, 2984, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2941
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object> vec1 = new Vec<Object>(717, vec0);
      vec1.insertFirstWithShifting(vec0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(1889);
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      vec0.clear();
      vec0.insertFirst(integer0);
      Integer integer1 = new Integer(0);
      int int1 = (-827);
      Integer integer2 = new Integer((-827));
      Vec<Integer> vec1 = new Vec<Integer>(1889, integer2);
      vec0.toString();
      vec1.shrink(15);
      // Undeclared exception!
      try { 
        vec1.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "E:";
      stringArray0[1] = "CgBpsiyl[O}},R*],yN";
      stringArray0[2] = ": i`<X;hNYKbcVk";
      stringArray0[3] = "#;Z*gO$o,9~Y>#3HT";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec0.removeFromLast("CgBpsiyl[O}},R*],yN");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5, "");
      Vec<Object> vec1 = new Vec<Object>(5, vec0);
      Vec<Object> vec2 = new Vec<Object>(1148, vec1);
      vec2.toArray();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(1997);
      Vec<Integer> vec0 = new Vec<Integer>(1, integer0);
      vec0.clone();
      Vec<String> vec1 = new Vec<String>();
      vec1.isEmpty();
      vec1.set(1, "org.sat4j.core.Vec$1");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "xj";
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 2;
      Vec<Integer> vec1 = new Vec<Integer>(2);
      Integer integer0 = new Integer(1929);
      vec1.growTo((-3714), integer0);
      vec1.indexOf((Integer) null);
      Vec<String> vec2 = null;
      try {
        vec2 = new Vec<String>((-3714), "xj");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1, "");
      vec0.clone();
      vec0.shrink(0);
      vec0.growTo(0, "@p})~");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      String string0 = ",";
      vec0.unsafePush(",");
      int int0 = 0;
      vec0.get(0);
      int int1 = (-2262);
      Integer integer0 = new Integer((-2262));
      Vec<Integer> vec1 = new Vec<Integer>(0, integer0);
      // Undeclared exception!
      try { 
        vec1.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.iterator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&8.&C;P&(M";
      stringArray0[1] = "Q2Ogs @`";
      stringArray0[2] = ",FY!c!U]";
      stringArray0[3] = "=|y{y";
      stringArray0[4] = "&Fn&YxX?";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(1955, readOnlyVec0);
      vec1.remove(readOnlyVec0);
      vec1.size();
      Integer integer1 = new Integer((-157));
      int int0 = (-1);
      Vec<Integer> vec2 = null;
      try {
        vec2 = new Vec<Integer>((-1), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(1889);
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      vec0.clear();
      vec0.insertFirst(integer0);
      Integer integer1 = new Integer(1);
      Vec<Integer> vec1 = new Vec<Integer>(1889, integer1);
      vec1.shrink(1889);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator1);
      vec0.iterator();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      vec2.equals(vec0);
      vec1.size();
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(1889, vec1);
      vec3.iterator();
      vec3.insertFirstWithShifting(vec1);
      Vec<String> vec4 = new Vec<String>();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1360, vec0);
      vec0.insertFirstWithShifting(vec1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",";
      stringArray0[1] = "g}^]v<|\"~_|";
      stringArray0[2] = ",";
      stringArray0[3] = "";
      stringArray0[4] = "org.sat4j.core.Vec$1";
      stringArray0[5] = "org.sat4j.core.Vec";
      stringArray0[6] = "x$(`";
      stringArray0[7] = "{^Uq,hSk/Ki3;d#";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.insertFirstWithShifting((String) null);
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(1);
      Vec<Object> vec2 = new Vec<Object>();
      vec1.copyTo((IVec<Object>) vec2);
      Vec<Object> vec3 = new Vec<Object>();
      vec1.push(vec3);
      Integer integer0 = new Integer(1);
      Vec<Integer> vec4 = new Vec<Integer>(1, integer0);
      vec4.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      vec0.clear();
      vec0.insertFirst(integer0);
      Integer integer1 = new Integer(1);
      Vec<Integer> vec1 = new Vec<Integer>(0, integer1);
      vec1.shrink(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      vec2.insertFirst(vec0);
      vec2.equals(vec0);
      vec1.size();
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(0, vec1);
      vec0.insertFirstWithShifting(vec2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      vec0.push(readOnlyVec0);
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Integer integer0 = new Integer((-3637));
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      vec0.last();
      Vec<Object> vec1 = null;
      try {
        vec1 = new Vec<Object>((-3637), (Object) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(2059);
      vec0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(24|z(3=";
      stringArray0[1] = ">X\"X{s}t@\"T_/D[Z,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "x$Jh5L6RC7'&M";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(737, 737, 0, 2059, (-971)).when(comparator0).compare(anyString() , anyString());
      vec1.iterator();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(2059, (-3777), comparator1);
      vec1.sortUnique(comparator0);
      vec1.indexOf("x$Jh5L6RC7'&M");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-3892));
      vec0.indexOf(integer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2590;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-UPlYtl?5:|fR";
      stringArray0[1] = "[g~; ?!qNbwpm>'Ll<";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2590, vec0);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.shrinkTo(3356);
      // Undeclared exception!
      try { 
        vec1.sort(2590, 3356, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2973
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.toString();
      vec0.hashCode();
      Vec<Object> vec1 = new Vec<Object>();
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.copyTo((IVec<Object>) vec1);
      vec2.insertFirstWithShifting("");
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>();
      vec3.toArray();
      vec2.contains(vec3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>();
      vec1.isEmpty();
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>();
      Object object0 = new Object();
      vec2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(4239);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(4239, readOnlyVec0);
      vec1.clone();
      vec1.ensure(4239);
      Vec<String> vec2 = new Vec<String>();
      vec2.size();
      vec2.insertFirst("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator0);
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>();
      vec3.insertFirstWithShifting(vec0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(1795);
      Vec<Object> vec0 = new Vec<Object>(1795, "");
      vec0.clear();
      Vec<Integer> vec1 = new Vec<Integer>(2892);
      vec1.get(1795);
      vec0.insertFirst((Object) null);
      Integer integer1 = new Integer((-456));
      Vec<Integer> vec2 = new Vec<Integer>(1, integer0);
      vec2.shrink((-456));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator1);
      vec0.iterator();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>();
      Object object0 = new Object();
      vec3.equals(object0);
      vec2.size();
      Vec<Vec<Integer>> vec4 = new Vec<Vec<Integer>>(1, vec2);
      vec4.iterator();
      vec4.insertFirstWithShifting(vec1);
      Vec<String> vec5 = new Vec<String>();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec5.sortUnique(comparator2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Integer> vec1 = new Vec<Integer>(1);
      vec1.size();
      vec0.equals(vec1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zJ =YEr'A{{dqf@{";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.toArray();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(330);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1535));
      integerArray0[2] = integer2;
      int int0 = 1478;
      Integer integer3 = new Integer(1478);
      integerArray0[3] = integer3;
      Vec<Integer> vec2 = new Vec<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        vec2.delete(1051);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1051
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(1889);
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      vec0.clear();
      vec0.insertFirst(integer0);
      Integer integer1 = new Integer(1);
      Vec<Integer> vec1 = new Vec<Integer>(1889, integer1);
      vec1.shrink(1889);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator1);
      vec0.iterator();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      vec2.equals(vec0);
      vec1.size();
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(1889, vec1);
      vec3.iterator();
      vec3.insertFirstWithShifting(vec1);
      Vec<String> vec4 = new Vec<String>();
      vec4.growTo((-1603), "");
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator2);
      Vec<ReadOnlyVec<Object>> vec5 = new Vec<ReadOnlyVec<Object>>(1);
      vec5.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "P{5>VX";
      stringArray0[2] = "k.Uu%Wxb";
      stringArray0[3] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.insertFirst("S1");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(18, 18, 18, (-1), (-1)).when(comparator2).compare(anyString() , anyString());
      vec1.sortUnique(comparator2);
      vec1.selectionSort((-1), (-1), comparator1);
      vec0.sort(15, 15, comparator0);
      vec0.copyTo((IVec<String>) vec1);
      vec0.insertFirst("P{5>VX");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "P{5>VX";
      stringArray0[2] = "k.Uu%Wxb";
      stringArray0[3] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>(stringArray0);
      int int0 = 15;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = (-1);
      vec1.insertFirst("S1");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(anyString() , anyString());
      vec1.sortUnique(comparator2);
      vec1.selectionSort((-1), (-1), comparator1);
      vec0.sort(15, 15, comparator0);
      vec0.copyTo((IVec<String>) vec1);
      vec0.insertFirst("P{5>VX");
      // Undeclared exception!
      try { 
        vec0.delete(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      vec0.indexOf(integer0);
      Vec<String> vec1 = new Vec<String>();
      vec1.shrinkTo(0);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(0);
      vec2.growTo(0, vec1);
      Object[] objectArray0 = new Object[1];
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator0);
      vec2.clear();
      objectArray0[0] = (Object) vec2;
      vec2.copyTo(objectArray0);
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(0);
      vec3.ensure((-1));
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      // Undeclared exception!
      try { 
        vec3.remove(readOnlyVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(1428, (Integer) null);
      vec0.ensure(1428);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.selectionSort(1162, 4072, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1163
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      Integer integer1 = new Integer(5);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.insertFirst("org.sat4j.core.Vec");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      vec0.removeFromLast(integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(1);
      Comparator<ReadOnlyVec<String>> comparator0 = (Comparator<ReadOnlyVec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(1, 0, comparator0);
      Comparator<ReadOnlyVec<String>> comparator1 = (Comparator<ReadOnlyVec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator1);
      vec0.iterator();
      Integer integer0 = new Integer(1);
      vec0.equals(integer0);
      Vec<String> vec1 = new Vec<String>(1);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(15, vec1);
      vec2.remove(vec1);
      Vec<Integer> vec3 = new Vec<Integer>();
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec3);
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>(0, readOnlyVec0);
      vec4.isEmpty();
      Vec<ReadOnlyVec<Object>> vec5 = null;
      try {
        vec5 = new Vec<ReadOnlyVec<Object>>((-761), (ReadOnlyVec<Object>) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(901);
      Vec<String> vec1 = new Vec<String>(901, "");
      vec0.equals(vec1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5588, "");
      vec0.isEmpty();
      Integer[] integerArray0 = new Integer[0];
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(5588, readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      Vec<String> vec0 = new Vec<String>(1318, "");
      vec0.shrink(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1955, 1955, (-1566), 1226, (-1643)).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1360);
      vec1.contains(vec0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(2921);
      int int0 = 0;
      Vec<Integer> vec1 = new Vec<Integer>(0);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      vec0.unsafePush(readOnlyVec0);
      vec0.push(readOnlyVec0);
      int int1 = (-1);
      vec0.ensure((-1));
      Integer integer0 = new Integer(1114);
      // Undeclared exception!
      try { 
        vec1.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.insertFirst("");
      vec0.sortUnique((Comparator<String>) null);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vec<Vec<Object>> vec0 = null;
      try {
        vec0 = new Vec<Vec<Object>>((-270));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>(0, "yS>>zr*emelr,\"4");
      vec1.indexOf("}h9ldpc8*h]z");
      // Undeclared exception!
      try { 
        vec1.set(0, "YCO'_3P1$L{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[1] = "yCeF{LugNZ";
      stringArray0[2] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      int int0 = 696;
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      Vec<Integer> vec1 = new Vec<Integer>(696, integer0);
      int int2 = (-318);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1657), 696, 989, 1, (-318)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vec1.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "P{5>VX";
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 6);
      Vec<String> vec0 = new Vec<String>(1688, "iyq./p:Di^cLi");
      vecArray0[0] = vec0;
      Vec<String> vec1 = new Vec<String>(1688);
      vecArray0[1] = vec1;
      Vec<String> vec2 = new Vec<String>(1688, "N9/Io");
      vecArray0[2] = vec2;
      Vec<String> vec3 = new Vec<String>(1688, (String) null);
      vecArray0[3] = vec3;
      Vec<String> vec4 = new Vec<String>(1688, "P{5>VX");
      vecArray0[4] = vec4;
      Vec<String> vec5 = new Vec<String>();
      vecArray0[5] = vec5;
      Vec<Vec<String>> vec6 = new Vec<Vec<String>>(vecArray0);
      vec6.toString();
      Vec<String> vec7 = new Vec<String>(5, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec3.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(1889);
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      vec0.clear();
      Vec<Object> vec1 = new Vec<Object>(1889, vec0);
      Vec<Object> vec2 = new Vec<Object>();
      vec1.copyTo((IVec<Object>) vec2);
      Vec<Object> vec3 = new Vec<Object>();
      vec3.get(0);
      vec1.insertFirstWithShifting((Object) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.insertFirst("");
      vec0.growTo(1457, "");
      Vec<Object> vec1 = new Vec<Object>(1944, vec0);
      vec1.insertFirstWithShifting("");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Integer> vec2 = new Vec<Integer>(0);
      Integer integer0 = new Integer((-243));
      vec2.push(integer0);
      Integer integer1 = new Integer(0);
      vec2.indexOf(integer1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.toString();
      vec0.hashCode();
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 8);
      Integer integer0 = new Integer(1360);
      Vec<Integer> vec1 = new Vec<Integer>();
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      readOnlyVecArray0[1] = readOnlyVec0;
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(1360);
      vec2.shrink(0);
      ReadOnlyVec<Integer> readOnlyVec1 = new ReadOnlyVec<Integer>(readOnlyVec0);
      ReadOnlyVec<Integer> readOnlyVec2 = new ReadOnlyVec<Integer>(readOnlyVec1);
      ReadOnlyVec<Integer> readOnlyVec3 = new ReadOnlyVec<Integer>(vec0);
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>(1360);
      // Undeclared exception!
      try { 
        vec4.moveTo(1, (-1214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1214
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      Vec<String> vec0 = new Vec<String>(0);
      int int1 = 1072;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(1072);
      vec1.clear();
      vec1.shrinkTo(0);
      // Undeclared exception!
      try { 
        vec1.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      vec0.push("");
      Vec<Object> vec2 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec2.shrinkTo((-690));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<String> vec1 = null;
      try {
        vec1 = new Vec<String>((-810), "wrpjj");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Vec<Integer> vec0 = new Vec<Integer>(0, integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(0, 0, comparator0);
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(15);
      Object object0 = new Object();
      vec1.unsafePush(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Object> vec2 = new Vec<Object>();
      vec0.unsafePush(integer0);
      vec1.copyTo((IVec<Object>) vec2);
      vec2.insertFirstWithShifting(vec0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(1153);
      int int0 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(0, (-2994), comparator1);
      vec0.shrink(0);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator2);
      int int1 = 0;
      Vec<String> vec1 = new Vec<String>(0);
      vec1.shrinkTo(0);
      // Undeclared exception!
      try { 
        vec1.get(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 679;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        vec0.get(138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.toString();
      vec0.hashCode();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.insertFirstWithShifting("");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(4239);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(4239, readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(4239, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      IVec<ReadOnlyVec<Object>> iVec0 = vec1.clone();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(4239, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(4239, iVec0.size());
      assertNotNull(iVec0);
      
      vec1.ensure(4239);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(4239, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<String> vec2 = new Vec<String>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.insertFirstWithShifting(":@'HNl0 w%scLbr$3>I");
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      
      int int0 = vec2.size();
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, int0);
      
      vec2.insertFirst("");
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Object> vec3 = new Vec<Object>(4239, vec2);
      assertFalse(vec3.equals((Object)vec0));
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(4239, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec3.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.sort(785, 2201, (Comparator<Object>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1493
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec0.set((-612), vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -612
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, "org.sat4j.core.ReadOnlyVec");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.equals((Object)vec0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec0.moveTo((IVec<String>) vec1);
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      
      IVec<String> iVec0 = vec0.push("*ubN7K_r1TCJytH4v2d");
      assertFalse(vec0.equals((Object)vec1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertNotSame(vec0, vec1);
      assertNotNull(iVec0);
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.selectionSort(0, (-2530), comparator0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      vec2.insertFirstWithShifting(integer0);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 2);
      int int0 = 0;
      Vec<Object> vec3 = new Vec<Object>(0);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      vecArray0[0] = vec3;
      // Undeclared exception!
      try { 
        vec3.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 1889;
          Integer integer0 = new Integer(1889);
          assertTrue(integer0.equals((Object)int0));
          assertEquals(1889, (int)integer0);
          assertNotNull(integer0);
          
          Vec<Object> vec0 = new Vec<Object>(0, integer0);
          assertTrue(integer0.equals((Object)int0));
          assertTrue(vec0.isEmpty());
          assertEquals(0, vec0.size());
          assertNotNull(vec0);
          
          vec0.clear();
          assertTrue(integer0.equals((Object)int0));
          assertTrue(vec0.isEmpty());
          assertEquals(0, vec0.size());
          
          vec0.insertFirst(integer0);
          assertTrue(integer0.equals((Object)int0));
          assertEquals(1, vec0.size());
          assertFalse(vec0.isEmpty());
          
          Integer integer1 = new Integer(1);
          assertFalse(integer1.equals((Object)int0));
          assertFalse(integer1.equals((Object)integer0));
          assertEquals(1, (int)integer1);
          assertNotNull(integer1);
          
          Vec<Integer> vec1 = new Vec<Integer>(1889, integer1);
          assertFalse(integer1.equals((Object)int0));
          assertFalse(integer1.equals((Object)integer0));
          assertEquals(1889, vec1.size());
          assertFalse(vec1.isEmpty());
          assertNotNull(vec1);
          
          Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          vec0.sortUnique(comparator0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertEquals(1, vec0.size());
          assertFalse(vec0.isEmpty());
          
          vec1.shrink(1889);
          assertFalse(integer1.equals((Object)int0));
          assertFalse(integer1.equals((Object)integer0));
          assertTrue(vec1.isEmpty());
          assertEquals(0, vec1.size());
          
          Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          vec1.sort(comparator1);
          assertFalse(integer1.equals((Object)int0));
          assertFalse(integer1.equals((Object)integer0));
          assertTrue(vec1.isEmpty());
          assertEquals(0, vec1.size());
          
          Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          vec1.sort(comparator2);
          assertFalse(integer1.equals((Object)int0));
          assertFalse(integer1.equals((Object)integer0));
          assertTrue(vec1.isEmpty());
          assertEquals(0, vec1.size());
          
          Iterator<Object> iterator0 = vec0.iterator();
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertEquals(1, vec0.size());
          assertFalse(vec0.isEmpty());
          assertNotNull(iterator0);
          
          Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
          assertTrue(vec2.isEmpty());
          assertEquals(0, vec2.size());
          assertNotNull(vec2);
          
          Iterator<Vec<Object>> iterator1 = vec2.iterator();
          assertTrue(vec2.isEmpty());
          assertEquals(0, vec2.size());
          assertNotNull(iterator1);
          
          vec2.insertFirst(vec0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertEquals(1, vec0.size());
          assertFalse(vec0.isEmpty());
          assertEquals(1, vec2.size());
          assertFalse(vec2.isEmpty());
          
          boolean boolean0 = vec2.equals(vec0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertEquals(1, vec0.size());
          assertFalse(vec0.isEmpty());
          assertEquals(1, vec2.size());
          assertFalse(vec2.isEmpty());
          assertFalse(boolean0);
          
          Object[] objectArray0 = new Object[1];
          objectArray0[0] = (Object) iterator0;
          Vec<Object> vec3 = new Vec<Object>(objectArray0);
          assertFalse(vec3.equals((Object)vec0));
          assertFalse(vec3.isEmpty());
          assertEquals(1, vec3.size());
          assertEquals(1, objectArray0.length);
          assertNotNull(vec3);
          
          vec3.copyTo((IVec<Object>) vec0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertFalse(vec0.equals((Object)vec3));
          assertFalse(vec3.equals((Object)vec0));
          assertEquals(2, vec0.size());
          assertFalse(vec0.isEmpty());
          assertFalse(vec3.isEmpty());
          assertEquals(1, vec3.size());
          assertNotSame(vec0, vec3);
          assertNotSame(vec3, vec0);
          assertEquals(1, objectArray0.length);
          
          vec3.insertFirstWithShifting(vec0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertFalse(vec0.equals((Object)vec3));
          assertFalse(vec3.equals((Object)vec0));
          assertEquals(2, vec0.size());
          assertFalse(vec0.isEmpty());
          assertFalse(vec3.isEmpty());
          assertEquals(2, vec3.size());
          assertNotSame(vec0, vec3);
          assertNotSame(vec3, vec0);
          assertEquals(1, objectArray0.length);
          
          Vec<Vec<String>> vec4 = new Vec<Vec<String>>();
          assertEquals(0, vec4.size());
          assertTrue(vec4.isEmpty());
          assertNotNull(vec4);
          
          Vec<String>[] vecArray0 = vec4.toArray();
          assertEquals(0, vec4.size());
          assertTrue(vec4.isEmpty());
          assertEquals(5, vecArray0.length);
          assertNotNull(vecArray0);
          
          boolean boolean1 = vec3.contains(vec0);
          assertTrue(integer0.equals((Object)int0));
          assertFalse(integer0.equals((Object)integer1));
          assertFalse(vec0.equals((Object)vec3));
          assertFalse(objectArray0.equals((Object)vecArray0));
          assertFalse(vec3.equals((Object)vec0));
          assertFalse(boolean1 == boolean0);
          assertEquals(2, vec0.size());
          assertFalse(vec0.isEmpty());
          assertFalse(vec3.isEmpty());
          assertEquals(2, vec3.size());
          assertNotSame(vec0, vec3);
          assertNotSame(objectArray0, vecArray0);
          assertNotSame(vec3, vec0);
          assertTrue(boolean1);
          assertEquals(1, objectArray0.length);
          
          int int1 = 336;
          Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          doReturn(0, 0, 0, 0, 0).when(comparator3).compare(anyInt() , anyInt());
          // Undeclared exception!
          vec1.sort(int1, int0, comparator3);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1083));
      assertEquals((-1083), (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(1401, integer0);
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(330, 1174, 1174, 1174, 1148).when(comparator0).compare(anyInt() , anyInt());
      vec1.sort(comparator0);
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      
      boolean boolean1 = vec1.equals(integer0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "org.sat4j.core.Vec";
      stringArray0[1] = string1;
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1401, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      ReadOnlyVec<Integer> readOnlyVec1 = new ReadOnlyVec<Integer>(vec1);
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1401, readOnlyVec1.size());
      assertNotNull(readOnlyVec1);
      
      ReadOnlyVec<Integer> readOnlyVec2 = new ReadOnlyVec<Integer>(readOnlyVec1);
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1401, readOnlyVec1.size());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1401, readOnlyVec2.size());
      assertNotNull(readOnlyVec2);
      
      ReadOnlyVec<Integer> readOnlyVec3 = new ReadOnlyVec<Integer>(vec1);
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1401, readOnlyVec3.size());
      assertFalse(readOnlyVec3.isEmpty());
      assertNotNull(readOnlyVec3);
      
      ReadOnlyVec<Integer> readOnlyVec4 = new ReadOnlyVec<Integer>(readOnlyVec2);
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec4.isEmpty());
      assertEquals(1401, readOnlyVec4.size());
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1401, readOnlyVec1.size());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1401, readOnlyVec2.size());
      assertNotNull(readOnlyVec4);
      
      ReadOnlyVec<Integer> readOnlyVec5 = new ReadOnlyVec<Integer>(readOnlyVec1);
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec5.isEmpty());
      assertEquals(1401, readOnlyVec5.size());
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1401, readOnlyVec1.size());
      assertNotNull(readOnlyVec5);
      
      ReadOnlyVec<Integer> readOnlyVec6 = new ReadOnlyVec<Integer>(readOnlyVec1);
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec4));
      assertEquals(1401, readOnlyVec6.size());
      assertFalse(readOnlyVec6.isEmpty());
      assertEquals(1401, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1401, readOnlyVec1.size());
      assertNotNull(readOnlyVec6);
      
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 4);
      readOnlyVecArray0[0] = readOnlyVec2;
      readOnlyVecArray0[1] = readOnlyVec4;
      readOnlyVecArray0[2] = readOnlyVec2;
      readOnlyVecArray0[3] = readOnlyVec5;
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      assertEquals(4, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(4, readOnlyVecArray0.length);
      assertNotNull(vec2);
      
      int int0 = 0;
      int int1 = 1812;
      // Undeclared exception!
      try { 
        vec2.moveTo(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1812
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.shrinkTo(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = 172;
      Vec<Integer> vec1 = new Vec<Integer>(15, (Integer) null);
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      assertNotNull(vec1);
      
      vec1.shrink(5);
      assertFalse(vec1.isEmpty());
      assertEquals(10, vec1.size());
      
      vec0.insertFirst(vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(10, vec1.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(172);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec2.get(172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      assertEquals(1955, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      assertEquals(1955, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer1 = new Integer(1955);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1955, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I";
      stringArray0[1] = "P{5>VX";
      stringArray0[2] = "P{5>VX";
      stringArray0[3] = "P{5>VX";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(4, vec0.size());
      assertEquals(4, stringArray0.length);
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertTrue(vec1.equals((Object)vec0));
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(vec1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.insertFirst("S1");
      assertFalse(vec1.equals((Object)vec0));
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec1, vec0);
      assertEquals(4, stringArray0.length);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(18, 18, 18, (-1), (-1)).when(comparator2).compare(anyString() , anyString());
      vec1.sortUnique(comparator2);
      assertFalse(vec1.equals((Object)vec0));
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec1, vec0);
      assertEquals(4, stringArray0.length);
      
      vec1.selectionSort((-1), (-1), comparator1);
      assertFalse(vec1.equals((Object)vec0));
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec1, vec0);
      assertEquals(4, stringArray0.length);
      
      vec0.copyTo((IVec<String>) vec1);
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(vec1.equals((Object)vec0));
      assertFalse(vec0.isEmpty());
      assertEquals(4, vec0.size());
      assertEquals(9, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertEquals(4, stringArray0.length);
      
      vec0.insertFirst("P{5>VX");
      assertFalse(vec0.equals((Object)vec1));
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotSame(vec0, vec1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      Vec<Object> vec0 = new Vec<Object>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int1 = 0;
      int int2 = (-397);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Object> vec1 = new Vec<Object>(0);
      assertTrue(vec1.equals((Object)vec0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec0.copyTo((IVec<Object>) vec1);
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[2] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[3] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[4] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[5] = "";
      stringArray0[6] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[7] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertEquals(8, stringArray0.length);
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.remove("org.sat4j.core.ReadOnlyVec");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      assertEquals(1955, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1955, vec0.size());
      assertNotNull(vec0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        vec0.remove(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1955
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 2201;
      Vec<Object> vec0 = new Vec<Object>(2201);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int1 = 1918;
      int int2 = 785;
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        vec0.sort(785, 2201, (Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(1889);
      assertEquals(1889, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.insertFirst(integer0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Vec<Integer> vec1 = new Vec<Integer>(1889, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec1.isEmpty());
      assertEquals(1889, vec1.size());
      assertNotNull(vec1);
      
      vec1.shrink(1889);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(iterator0);
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      boolean boolean0 = vec2.equals(vec0);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(boolean0);
      
      int int0 = vec1.size();
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, int0);
      
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(1889, vec1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1889, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      vec3.insertFirstWithShifting(vec1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1890, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Vec<String> vec4 = new Vec<String>();
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator2);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      
      int int1 = vec3.indexOf(vec1);
      assertTrue(int1 == int0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1890, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      vec0.insertFirstWithShifting(readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec1);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertNotNull(readOnlyVec1);
      
      int int0 = (-164);
      // Undeclared exception!
      try { 
        readOnlyVec1.shrinkTo((-164));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 362;
      vec0.shrinkTo(362);
      assertFalse(vec0.isEmpty());
      assertEquals(362, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1360, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(362, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1360, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.contains(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(1889);
      assertEquals(1889, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.insertFirst(integer0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Vec<Integer> vec1 = new Vec<Integer>(1889, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1889, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.shrink(1889);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(iterator0);
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Iterator<Vec<Object>> iterator1 = vec2.iterator();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(iterator1);
      
      vec2.insertFirst(vec0);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      boolean boolean0 = vec2.equals(vec0);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertFalse(boolean0);
      
      int int0 = vec1.size();
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, int0);
      
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(1889, vec1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec3.isEmpty());
      assertEquals(1889, vec3.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec3);
      
      Iterator<Vec<Integer>> iterator2 = vec3.iterator();
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec3.isEmpty());
      assertEquals(1889, vec3.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(iterator2);
      
      vec3.insertFirstWithShifting(vec1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec3.isEmpty());
      assertEquals(1890, vec3.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<String> vec4 = new Vec<String>();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator2);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.shrink(2754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer((-3903));
      assertEquals((-3903), (int)integer0);
      assertNotNull(integer0);
      
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(3926);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.moveTo(0, 4003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4003
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.sat4j.core.Vec";
      stringArray0[5] = "Mz<iQzQMt";
      stringArray0[6] = "";
      stringArray0[7] = "u>^<qf9!U";
      stringArray0[8] = "i\"";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(9, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(9, stringArray0.length);
      assertNotNull(vec0);
      
      int int0 = (-1621);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(0, 1179, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 589
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.equals(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer((-3903));
      assertEquals((-3903), (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec1 = new Vec<Object>(949, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(949, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.insertFirstWithShifting(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(950, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(2459, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2459, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2459, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(1955);
      assertEquals(1955, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(1955, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1955, vec0.size());
      assertNotNull(vec0);
      
      vec0.remove(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1954, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(1955, "org.sat4j.core.Vec");
      assertFalse(vec1.isEmpty());
      assertEquals(1955, vec1.size());
      assertNotNull(vec1);
      
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 1);
      vecArray0[0] = vec0;
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(vecArray0);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertEquals(1, vecArray0.length);
      assertNotNull(vec2);
      
      int int0 = vec2.indexOf(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1954, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertEquals(0, int0);
      assertEquals(1, vecArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.sortUnique((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-1917);
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-1917), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(1889);
      assertEquals(1889, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirst(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Vec<Integer> vec1 = new Vec<Integer>(1889, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec1.isEmpty());
      assertEquals(1889, vec1.size());
      assertNotNull(vec1);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertFalse(vec2.equals((Object)vec0));
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1360, vec2);
      assertFalse(vec2.equals((Object)vec0));
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(1360, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      boolean boolean0 = vec3.contains(vec0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(vec0.equals((Object)vec2));
      assertFalse(vec2.equals((Object)vec0));
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(1360, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotSame(vec0, vec2);
      assertNotSame(vec2, vec0);
      assertFalse(boolean0);
      
      Vec<Integer> vec4 = new Vec<Integer>();
      assertFalse(vec4.equals((Object)vec1));
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      
      vec4.insertFirstWithShifting(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec4.equals((Object)vec1));
      assertFalse(vec4.isEmpty());
      assertEquals(1, vec4.size());
      assertNotSame(vec4, vec1);
      
      String string0 = vec1.toString();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec1.equals((Object)vec4));
      assertFalse(vec1.isEmpty());
      assertEquals(1889, vec1.size());
      assertNotSame(vec1, vec4);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",";
      stringArray0[1] = "";
      stringArray0[2] = "J4U";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertEquals(3, stringArray0.length);
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.Vec$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 362;
      vec0.shrinkTo(362);
      assertEquals(362, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1360, vec0);
      assertEquals(362, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1360, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.moveTo((IVec<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int1 = 1457;
      vec0.growTo(1457, "=L\"* y^7t\"WdoZ");
      assertEquals(1457, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(int0);
      assertFalse(int0 == int1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(int1);
      assertFalse(int1 == int0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Iterator<Vec<String>> iterator0 = vec2.iterator();
      assertFalse(int1 == int0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(iterator0);
      
      Integer[] integerArray0 = null;
      Vec<Integer> vec3 = null;
      try {
        vec3 = new Vec<Integer>(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.clear();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.shrink(0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec0 = new Vec<Object>(0, object0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.remove(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Integer integer0 = new Integer(1301);
      assertEquals(1301, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec1 = new Vec<Integer>(1360, integer0);
      assertEquals(1360, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vec1.sort(comparator0);
      assertEquals(1360, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vec0.selectionSort(1, 1266, (Comparator<Object>) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "i~)Y^HLU3r(2";
      stringArray0[2] = "8r:";
      stringArray0[3] = "";
      stringArray0[4] = "Ih1WI!hP";
      stringArray0[5] = "org.sat4j.core.Vec$1";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(6, stringArray0.length);
      assertNotNull(vec0);
      
      String string0 = vec0.toString();
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(",i~)Y^HLU3r(2,8r:,,Ih1WI!hP,org.sat4j.core.Vec$1", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      
      vec0.pop();
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(6, stringArray0.length);
      
      vec0.sort(2242, 2242, (Comparator<String>) null);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(6, stringArray0.length);
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(6, stringArray0.length);
      
      vec0.growTo(0, "");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(6, stringArray0.length);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(6, stringArray0.length);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      vec1.insertFirst(integer0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      String string1 = vec1.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals("1", string1);
      assertNotNull(string1);
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.insertFirstWithShifting((Integer) null);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      vec1.unsafePush(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      
      vec1.unsafePush("org.sat4j.core.Vec$1");
      assertFalse(vec1.isEmpty());
      assertEquals(3, vec1.size());
      
      boolean boolean0 = vec1.equals(stringArray0[1]);
      assertFalse(vec1.isEmpty());
      assertEquals(3, vec1.size());
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      vec0.unsafePush("");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = 362;
      vec0.shrinkTo(362);
      assertEquals(362, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1360, vec0);
      assertEquals(362, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1360, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String string0 = vec0.toString();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(1360, "s1EBU");
      assertFalse(vec1.isEmpty());
      assertEquals(1360, vec1.size());
      assertNotNull(vec1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      // Undeclared exception!
      vec1.selectionSort(1, 1135, comparator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.isEmpty();
      Integer integer0 = new Integer((-1083));
      Vec<Integer> vec1 = new Vec<Integer>(1401, integer0);
      int int0 = (-3334);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1401, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vec1.sort(comparator0);
      vec1.equals(integer0);
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "org.sat4j.core.Vec";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "7)&%m]S=WPB#iFn&9[";
      stringArray0[3] = string3;
      Vec<String> vec2 = null;
      try {
        vec2 = new Vec<String>(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.clear();
      vec0.sortUnique(comparator0);
      vec0.isEmpty();
      Vec<Integer> vec1 = new Vec<Integer>(0);
      vec1.clear();
      Integer integer0 = new Integer(0);
      vec1.insertFirst(integer0);
      assertEquals(1, vec1.size());
      
      Vec<String> vec2 = new Vec<String>(0);
      vec2.shrinkTo(0);
      vec0.iterator();
      Vec<Integer> vec3 = new Vec<Integer>();
      vec1.moveTo((IVec<Integer>) vec3);
      assertFalse(vec1.equals((Object)vec3));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Integer integer0 = new Integer(1656);
      Integer integer1 = new Integer(1);
      Vec<Integer> vec1 = new Vec<Integer>(17, integer1);
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(3828, vec1);
      vec2.insertFirstWithShifting(vec1);
      Vec<String> vec3 = new Vec<String>();
      IVec<Integer> iVec0 = vec1.clone();
      vec1.remove(integer1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator0);
      vec2.indexOf(vec1);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) vec2;
      objectArray0[2] = (Object) iVec0;
      objectArray0[3] = (Object) comparator0;
      Vec<Object> vec4 = new Vec<Object>(objectArray0);
      // Undeclared exception!
      vec4.toString();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = "yCeF{LugNZ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.sat4j.core.ReadOnlyVec";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec0.remove("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }
}
