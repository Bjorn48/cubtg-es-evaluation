* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.tools.GateTranslator
* Starting Client-0
* Connecting to master process on port 15916
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.tools.GateTranslator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1235
* Using seed 1550529742925
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 736 / 1235
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.040740740740740744
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.06060606060606061
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.031413612565445025
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.0
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.15789473684210525
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.05263157894736842
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06060606060606061
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 259
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2111111111111111
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16666666666666666
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.21727748691099477
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.0967741935483871
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.47368421052631576
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15151515151515152
[MASTER] 23:43:40.822 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 342
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28888888888888886
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22727272727272727
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32591623036649214
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12903225806451613
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3684210526315789
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21212121212121213
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 424
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5407407407407407
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3333333333333333
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5890052356020943
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2903225806451613
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7894736842105263
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3181818181818182
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 509
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.7777777777777778
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6363636363636364
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7853403141361257
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3870967741935484
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6363636363636364
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 585
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8074074074074075
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.696969696969697
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8219895287958116
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3870967741935484
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.696969696969697
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 669
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.837037037037037
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7424242424242424
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8730366492146597
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3870967741935484
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7272727272727273
[MASTER] 23:44:33.190 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IConstr
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 750
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8629629629629629
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7727272727272727
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8992146596858639
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.41935483870967744
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7575757575757576
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 769
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8703703703703703
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.803030303030303
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9070680628272252
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.41935483870967744
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7878787878787878
* Search finished after 121s and 8 generations, 11966 statements, best individual has fitness: 151.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8703703703703703
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.803030303030303
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9070680628272252
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.41935483870967744
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7878787878787878
* Minimizing test suite
[MASTER] 23:45:49.134 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 270
* Number of covered goals: 235
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 80%
* Total number of goals: 66
* Number of covered goals: 53
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 764
* Number of covered goals: 698
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 42%
* Total number of goals: 31
* Number of covered goals: 13
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 66
* Number of covered goals: 52
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8703703703703703
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.803030303030303
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9070680628272252
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.41935483870967744
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7878787878787878
* Generated 63 tests with total length 1230
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:46:47.027 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.9111333333333334% of time used, but only 14/63 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 13%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8703703703703703
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.803030303030303
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9070680628272252
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.41935483870967744
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7878787878787878
* Compiling and checking tests
[MASTER] 23:47:39.127 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-230> but was:<0>
[MASTER] 23:47:39.139 [logback-1] WARN  JUnitAnalyzer - Failing test:
 VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);

int int0 = vecInt0.containsAt(2);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals((-1), int0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertNotSame(vecInt0, iVecInt0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(1.0, (-230));
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(minimal4InclusionModel0);

ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(clausalCardinalitiesDecorator0);

NegationDecorator<ClausalCardinalitiesDecorator<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<Minimal4InclusionModel>>(clausalCardinalitiesDecorator0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertTrue(negationDecorator0.isSatisfiable());
assertNotNull(negationDecorator0);

GateTranslator gateTranslator0 = new GateTranslator(negationDecorator0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertTrue(negationDecorator0.isSatisfiable());
assertNotNull(gateTranslator0);

Solver solver1 = (Solver)gateTranslator0.getSolvingEngine();
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertTrue(negationDecorator0.isSatisfiable());
assertEquals(0, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

IConstr[] iConstrArray0 = gateTranslator0.halfOr(2, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertTrue(negationDecorator0.isSatisfiable());
assertEquals(0, iConstrArray0.length);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertNotNull(iConstrArray0);
assertNotSame(vecInt0, iVecInt0);


[MASTER] 23:47:45.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-230> but was:<0>
[MASTER] 23:47:45.354 [logback-1] WARN  JUnitAnalyzer - Failing test:
 VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);

int int0 = vecInt0.containsAt(2);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals((-1), int0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertNotSame(vecInt0, iVecInt0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(1.0, (-230));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

cardinalityDataStructureYanMin0.conflictDetectedInWatchesFor((-230), 2);
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(minimal4InclusionModel0);

ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(clausalCardinalitiesDecorator0);

NegationDecorator<ClausalCardinalitiesDecorator<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<Minimal4InclusionModel>>(clausalCardinalitiesDecorator0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertTrue(negationDecorator0.isSatisfiable());
assertNotNull(negationDecorator0);

GateTranslator gateTranslator0 = new GateTranslator(negationDecorator0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertTrue(negationDecorator0.isSatisfiable());
assertNotNull(gateTranslator0);

Solver solver1 = (Solver)gateTranslator0.getSolvingEngine();
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertTrue(negationDecorator0.isSatisfiable());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.realNumberOfVariables());
assertEquals(0, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

IConstr[] iConstrArray0 = gateTranslator0.halfOr(2, vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-230), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-230L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertTrue(negationDecorator0.isSatisfiable());
assertEquals(0, iConstrArray0.length);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertNotNull(iConstrArray0);
assertNotSame(vecInt0, iVecInt0);

gateTranslator0.ite((-1), (-1630), (-176), (-1600));

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'GateTranslator_ESTest' to evosuite-tests
* Done!

* Computation finished
