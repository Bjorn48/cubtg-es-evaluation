/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:06:25 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.awt.Point;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BattleStatistics_ESTest extends BattleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      battleStatistics0.setRound(50);
      battleStatistics0.setRound(0);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-692), false, false, 50, 50, false, 16, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-692), 0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 16, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(16, " HP", 0, 4959);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, (String) null, characterClass0, simpleWeapon0, " HP");
      BattleStatistics battleStatistics0 = new BattleStatistics(17, 50);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-1), " HP", characterClass0, simpleWeapon0, (String) null);
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant1, 2);
      assertEquals(50, simpleCombatant0._getMaxLP());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-692), true, false, 50, 50, true, 15, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-692), 0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1730, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-482), " HP", 100, 4959);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, ";.*;;GP(onJKB 5bw", characterClass0, simpleWeapon0, " HP");
      BattleStatistics battleStatistics0 = new BattleStatistics(2427, (-1286));
      // Undeclared exception!
      try { 
        battleStatistics0.criticalShot((Combatant) null, simpleCombatant0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, true, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2202));
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 427, ".[N@D,BFj]6RpeM", characterClass0, simpleWeapon0, "de.outstare.fortbattleplayer.statistics.WeaponModCounter$GraphitLubricantCounter");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant1);
      assertNotSame(simpleCombatant1, simpleCombatant0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "MPPH C3Whzk", 2, 2);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 0, area0, true);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2, (String) null, characterClass0, simpleWeapon0, (String) null);
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition((Combatant) null, simpleCombatant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-692), true, false, 3, 3, true, 15, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-692), 3, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1730, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-482), " HP", 100, 4959);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 70, (String) null, characterClass0, simpleWeapon0, " HP");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, false, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-3684), "<x%Y|)S", characterClass0, simpleWeapon0, "H]x");
      battleStatistics0.aimsAt(simpleCombatant1, simpleCombatant0);
      assertEquals((-3684), simpleCombatant1._maxHealth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3, 0);
      HashMap<CombatantSide, AtomicInteger> hashMap0 = new HashMap<CombatantSide, AtomicInteger>();
      battleStatistics0.addAndResetRoundCounter(hashMap0, (Map<CombatantSide, RoundStatistics>) null);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2150, true, true, 2150, (-319), false, 3310, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 3310, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "de.outstare.fortbattleplayer.statistics.CriticalHit", characterClass0, (Weapon) null, "de.outstare.fortbattleplayer.statistics.BattleStatistics$1");
      battleStatistics0.isHit(simpleCombatant0, (-2917), 2750);
      assertEquals(0, simpleCombatant0._getMaxLP());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-645), 3);
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1, false, false, 0, 3741, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2155, 0, simpleSector0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-192), "", characterClass0, (Weapon) null, "");
      battleStatistics0.hasMoved(simpleCombatant0, simpleArea0);
      assertEquals((-192), simpleCombatant0._maxHealth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), (-1));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector((-1), true, true, 4, (-362), true, 1365, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-1), 2968, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 433, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, "", 1201, 2968);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1), "HF3`YuLHm=/XDd[mm", characterClass0, simpleWeapon0, "");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant0);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      int int0 = battleStatistics0.round(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      int int0 = battleStatistics0.round(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3, 0);
      int int0 = battleStatistics0.round((-1562));
      assertEquals((-1562), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      doReturn((String) null).when(area0).toString();
      CombatantState combatantState0 = new CombatantState(area0, (-1565), area0, true);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1565), "", characterClass0, simpleWeapon0, "");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(20, 20);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      WeaponModCounter.FettesOilCounter weaponModCounter_FettesOilCounter0 = new WeaponModCounter.FettesOilCounter();
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_FettesOilCounter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(50, 50);
      int int0 = battleStatistics0.combatantLifetime((Combatant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2, true, false, 2, 2, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, ",", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ",", characterClass0, simpleWeapon0, ",");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 1);
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(17, true, false, 17, (-413), false, (-413), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-413), 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-2170));
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals((-826), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, false, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(427, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2, true, false, 2, 2, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, ",", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1276), ",", characterClass0, simpleWeapon0, ",");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 1);
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(966, 966);
      // Undeclared exception!
      try { 
        battleStatistics0.isOnline((Combatant) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3747), (-3747));
      // Undeclared exception!
      try { 
        battleStatistics0.aimsAt((Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), (-1));
      // Undeclared exception!
      try { 
        battleStatistics0.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, (Map<CombatantSide, RoundStatistics>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 2, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, ",", 2, 2);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ",", characterClass0, simpleWeapon0, ",");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-2170));
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-1565), area0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1565), "", 1, 2820);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, (-682));
      assertEquals("", simpleCombatant0.getCity());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-413), false, false, (-413), (-413), false, (-413), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-413), 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, false);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-413));
      battleStatistics0.setRound((-413));
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(254, true, true, 2, 30, false, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, (-336), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1231, simpleArea0, false);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 1, 1231);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1091), "", characterClass0, simpleWeapon0, "");
      BattleStatistics battleStatistics0 = new BattleStatistics(1079, 50);
      battleStatistics0.setRound((-2170));
      battleStatistics0.isOnline(simpleCombatant0, false);
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(50, 50);
      List<CriticalHit> list0 = battleStatistics0.critList((CombatantSide) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      BattleStatistics battleStatistics0 = new BattleStatistics(1079, 50);
      long long0 = battleStatistics0.criticalHitDamage(combatantSide0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList((CombatantSide) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(60, 4637);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(4637, ".[N@D,BFj]6RpeM", 2338, 4637);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-2202), true, true, (-2710), 0, true, 433, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-2202), (-2710), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 433, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1099, "", characterClass0, simpleWeapon0, ".[N@D,BFj]6RpeM");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfBayonets(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-1565), area0, true);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1565), "", characterClass0, simpleWeapon0, "");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      String string0 = battleStatistics0.targetNoOne(combatantSide1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-1565), area0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1565), "", 1, 2815);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertEquals("(1)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, false, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      battleStatistics0.isOnline(simpleCombatant0, true);
      battleStatistics0.isOnline(simpleCombatant0, true);
      assertEquals("", simpleCombatant0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, ",", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ",", characterClass0, simpleWeapon0, ",");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 1);
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(60, 4637);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(4637, ".[N@D,BFj]6RpeM", 2338, 4637);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-2202), true, true, (-2710), 0, true, 433, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-2202), (-2710), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 433, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1099, "", characterClass0, simpleWeapon0, ".[N@D,BFj]6RpeM");
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(60, ".[N@D,BFj]6RpeM", 2338, 2338);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, true, false, 0, 2629, false, 60, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-2202), 2338, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, false);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 100, "K46", characterClass0, simpleWeapon0, (String) null);
      BattleStatistics battleStatistics0 = new BattleStatistics(2685, 141);
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.roundsTillOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, true, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2202));
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(65, 4637);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(4637, ".[N@D,BFj]6RpeM", 2338, 4637);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-2202), true, true, (-2710), 0, true, 433, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-2202), (-2710), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 433, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1099, "", characterClass0, simpleWeapon0, ".[N@D,BFj]6RpeM");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot((CombatantSide) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, false, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-413), false, false, (-413), (-413), false, (-413), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-413), 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, false);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfOffliners(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-413), true, false, (-413), (-413), false, (-413), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-413), 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, ",", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ",", characterClass0, simpleWeapon0, ",");
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-2170));
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-1565), area0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1565), "", 1, 2815);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(50, ".[N@D,BFj]6RpeM", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(2338, false, true, 2629, 2629, true, (-2202), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 13, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2202), simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2685, "", characterClass0, simpleWeapon0, "K46");
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.combatantLifetime(simpleCombatant0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(254, true, true, 2, 30, false, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, (-336), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1231, simpleArea0, false);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 1, 1231);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1091), "", characterClass0, simpleWeapon0, "");
      BattleStatistics battleStatistics0 = new BattleStatistics(1079, 50);
      battleStatistics0.setRound((-2170));
      battleStatistics0.isOnline(simpleCombatant0, false);
      battleStatistics0.setRound((-336));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      battleStatistics0.setRound(50);
      battleStatistics0.setRound(0);
      battleStatistics0.setRound(0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-9), (-9));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getShotsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(15, (-1017));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(61, 61);
      // Undeclared exception!
      try { 
        battleStatistics0.hasMoved((Combatant) null, (Area) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(597, 597);
      battleStatistics0.isAlive((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(60, 60);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(17, 17);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(254, true, true, 2, 30, false, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, (-336), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1231, simpleArea0, false);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 1, 1231);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1091), "", characterClass0, simpleWeapon0, "");
      BattleStatistics battleStatistics0 = new BattleStatistics(1079, 50);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      battleStatistics0.setRound((-336));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1805, 1805);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      BattleStatistics battleStatistics0 = new BattleStatistics(17, 50);
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      BattleStatistics battleStatistics0 = new BattleStatistics((-348), (-2710));
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(17, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2745), area0, false);
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1282, "invalid parameters: ", 1282, 1361);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2566), "invalid parameters: ", characterClass0, simpleWeapon0, ", name=");
      battleStatistics0.isDead(simpleCombatant0);
      assertFalse(simpleCombatant0.isOnline());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(50, 50);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(966, 966);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      // Undeclared exception!
      try { 
        battleStatistics0.isHit((Combatant) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-692), true, false, 3, 3, true, 15, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-692), 3, simpleSector0);
      battleStatistics0.newDestination((Combatant) null, simpleArea0);
      assertEquals((-692), simpleArea0.getHeight());
  }
}
