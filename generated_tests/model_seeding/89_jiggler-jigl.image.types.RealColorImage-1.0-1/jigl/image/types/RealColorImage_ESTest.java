/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 11:39:19 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-3309), (-3309), (float) (-3309), (float) (-3309), (float) (-3309), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2942, 2942);
      assertNotNull(realColorImage0);
      assertEquals(2942, realColorImage0.X());
      assertEquals(2942, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(2942, realColorImage0.X());
      assertEquals(2942, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(2942, 2942);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      RealColorImage realColorImage2 = realColorImage1.add((float) 0, 4340.0F, (float) 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4340.0F;
      floatArray0[1] = (float) (-2978);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2197;
      floatArray0[4] = (-1.0F);
      // Undeclared exception!
      try { 
        realColorImage1.add(2197, (-1412), floatArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0, 0.0F, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(3.4028235E38F, (-2141.0F), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-2500);
      floatArray0[2] = (-2443.0F);
      floatArray0[3] = (float) (-2500);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 1;
      // Undeclared exception!
      try { 
        realColorImage0.divide((-2500), (-2306), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = new Integer(1865);
      assertFalse(int1 == int0);
      assertEquals(1865, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(1865, (-552), (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertNotNull(realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1, 1204.85F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(223, 223);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(223, realColorImage0.X());
      assertEquals(223, realColorImage0.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 223;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 223;
      floatArray0[5] = (float) 223;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-699), 0, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 678;
      RealColorImage realColorImage0 = new RealColorImage(678, 678);
      assertNotNull(realColorImage0);
      assertEquals(678, realColorImage0.Y());
      assertEquals(678, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 678;
      floatArray0[2] = (float) 40;
      floatArray0[3] = (float) 40;
      floatArray0[4] = (float) 40;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(40, 40, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {(-1.0F), 678.0F, 40.0F, 40.0F, 40.0F}, floatArray0, 0.01F);
      assertEquals(678, realColorImage0.Y());
      assertEquals(678, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(40, realColorImage1.X());
      assertEquals(40, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      RealColorImage realColorImage2 = new RealColorImage(678, 678);
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(678, realColorImage2.Y());
      assertEquals(678, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        realColorImage1.max((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = realColorImage0.Y();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2230, (float) 2230, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2230
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(21, 21);
      assertNotNull(realColorImage0);
      assertEquals(21, realColorImage0.Y());
      assertEquals(21, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI(238, 238, 238, 238);
      assertNotNull(rOI0);
      assertEquals(238, rOI0.uy());
      assertEquals(238, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(238, rOI0.lx());
      assertEquals(238, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(238, rOI0.uy());
      assertEquals(238, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(238, rOI0.lx());
      assertEquals(238, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(238, rOI0.uy());
      assertEquals(238, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(238, rOI0.lx());
      assertEquals(238, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(238, int1);
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(238, rOI0.uy());
      assertEquals(238, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(238, rOI0.lx());
      assertEquals(238, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(238, int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 238
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      RealColorImage realColorImage1 = realColorImage0.add(2, 0.0F);
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(300, (int)integer1);
      
      RealColorImage realColorImage2 = realColorImage1.multiply(0.0F, 0.0F, (-1.0F));
      assertNotNull(realColorImage2);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(3987, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 16);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ColorModel colorModel0 = realColorImage0.getColorModel();
      assertEquals(0, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorModel0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(230, 230, (-1.0F), (-32768.0F), (-516.8878F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 230
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = 1319;
      // Undeclared exception!
      try { 
        realColorImage0.plane(1319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1319
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(3, 3, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 223;
      RealColorImage realColorImage0 = new RealColorImage(223, 223);
      assertNotNull(realColorImage0);
      assertEquals(223, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(223, realColorImage0.Y());
      
      int int1 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int3);
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int4);
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int5);
      
      String string0 = realColorImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals(223, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(223, realColorImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals("223:223\nnull \n223:223\nnull \n223:223\nnull \n", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 223;
      ROI rOI1 = null;
      // Undeclared exception!
      try { 
        realColorImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(128, 0, 0.0F, (-402.05F), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((RealColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(383, (-552), (float) (-552), 0.0F, (float) (-552));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = 8;
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        realColorImage0.setPlane(8, realGrayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(71, 71);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(71, realColorImage0.X());
      assertEquals(71, realColorImage0.Y());
      
      ColorModel colorModel0 = ColorModel.YIQ;
      RealColorImage realColorImage1 = realColorImage0.copy();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(71, realColorImage0.X());
      assertEquals(71, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(71, realColorImage1.Y());
      assertEquals(71, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      realColorImage0.setColorModel(colorModel0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(71, realColorImage0.X());
      assertEquals(71, realColorImage0.Y());
      assertNotSame(realColorImage0, realColorImage1);
      
      int int0 = realColorImage0.Y();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(71, realColorImage0.X());
      assertEquals(71, realColorImage0.Y());
      assertEquals(71, int0);
      assertNotSame(realColorImage0, realColorImage1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(1081.16101427215);
      assertNotNull(float0);
      assertEquals(1081.161F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(1081.161F, float1, 0.01F);
      
      Float float2 = new Float(42.777);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(42.777F, (float)float2, 0.01F);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(42.777F, float3, 0.01F);
      
      floatArray0[0] = (Float) 42.777F;
      Float float4 = Float.valueOf(3162.0F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(3162.0F, (float)float4, 0.01F);
      
      floatArray0[1] = float4;
      Float float5 = Float.valueOf(0.0F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      Float float6 = Float.valueOf(255.0F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      assertEquals(255.0F, (float)float6, 0.01F);
      
      floatArray0[2] = float6;
      Float float7 = new Float(0.0);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      float float8 = float7.floatValue();
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      assertEquals(0.0F, float8, 0.01F);
      
      floatArray0[3] = (Float) 0.0F;
      Float float9 = new Float((-2100.432709202068));
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotNull(float9);
      assertEquals((-2100.4326F), (float)float9, 0.01F);
      
      float float10 = float9.floatValue();
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals(float10, float1, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertEquals((-2100.4326F), float10, 0.01F);
      
      Float float11 = new Float((double) (-2100.4326F));
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotNull(float11);
      assertEquals((-2100.4326F), (float)float11, 0.01F);
      
      float float12 = float11.floatValue();
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotEquals(float12, float3, 0.01F);
      assertEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float8, 0.01F);
      assertNotEquals(float12, float1, 0.01F);
      assertEquals((-2100.4326F), float12, 0.01F);
      
      floatArray0[4] = (Float) (-2100.4326F);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        realColorImage0.set(0, 3074, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3074
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ROI rOI0 = new ROI(223, 223, 223, 223);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(223, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(223, rOI0.ux());
      assertEquals(223, rOI0.uy());
      assertEquals(223, rOI0.ly());
      
      RealColorImage realColorImage0 = new RealColorImage(223, 223);
      assertNotNull(realColorImage0);
      assertEquals(223, realColorImage0.X());
      assertEquals(223, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 223;
      floatArray0[1] = 477.9903F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 223;
      floatArray0[5] = (float) 223;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(223, 0, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 223
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2965, 2965);
      assertNotNull(realColorImage0);
      assertEquals(2965, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2965, realColorImage0.Y());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(2965, 2965, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2965
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2;
      RealColorImage realColorImage0 = new RealColorImage(2, 2);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2, realColorImage0.Y());
      assertEquals(2, realColorImage0.X());
      
      int int1 = (-2287);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int3);
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.colorModel = colorModel0;
      assertEquals(2, realColorImage0.Y());
      assertEquals(2, realColorImage0.X());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      
      realColorImage0.colorModel = colorModel0;
      assertEquals(2, realColorImage0.Y());
      assertEquals(2, realColorImage0.X());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int5);
      
      // Undeclared exception!
      try { 
        realColorImage0.min((-2287), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2287
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = realColorImage0.X();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, int0);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        realColorImage0.clear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-1);
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        realColorImage0.setPlane((-1), realGrayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(21, 21);
      assertNotNull(realColorImage0);
      assertEquals(21, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(21, realColorImage0.Y());
      
      int int0 = 1208;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-1965), (float) (-1965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1965
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3;
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(3, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      String string0 = realColorImage0.toString();
      assertNotNull(string0);
      assertEquals(3, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      assertEquals("3:3\nnull null null \nnull null null \nnull null null \n3:3\nnull null null \nnull null null \nnull null null \n3:3\nnull null null \nnull null null \nnull null null \n", string0);
      
      floatArray0[2] = (float) 3;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(2, 16, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(1865, (-552), (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      Float[] floatArray0 = new Float[6];
      Float float0 = Float.valueOf(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf(1.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      Float float2 = new Float((-994.98780898));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-994.9878F), (float)float2, 0.01F);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-994.9878F), float3, 0.01F);
      
      Float float4 = new Float(1397.8F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(1397.8F, (float)float4, 0.01F);
      
      float float5 = float4.floatValue();
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(1397.8F, float5, 0.01F);
      
      Float float6 = new Float(1397.8F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      assertEquals(1397.8F, (float)float6, 0.01F);
      
      float float7 = float6.floatValue();
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertEquals(float7, float5, 0.01F);
      assertEquals(1397.8F, float7, 0.01F);
      
      Float float8 = new Float(1866.063F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotNull(float8);
      assertEquals(1866.063F, (float)float8, 0.01F);
      
      float float9 = float8.floatValue();
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float3, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertEquals(1866.063F, float9, 0.01F);
      
      floatArray0[1] = (Float) 1866.063F;
      Float float10 = Float.valueOf((-1503.57F));
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotNull(float10);
      assertEquals((-1503.57F), (float)float10, 0.01F);
      
      floatArray0[2] = float10;
      Float float11 = Float.valueOf(255.0F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertNotEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertNotNull(float11);
      assertEquals(255.0F, (float)float11, 0.01F);
      
      Float float12 = Float.valueOf(0.0F);
      assertNotEquals((float)float12, (float)float6, 0.01F);
      assertNotEquals((float)float12, (float)float4, 0.01F);
      assertNotEquals((float)float12, (float)float9, 0.01F);
      assertNotEquals((float)float12, (float)float0, 0.01F);
      assertNotEquals((float)float12, (float)float3, 0.01F);
      assertNotEquals((float)float12, (float)float7, 0.01F);
      assertNotEquals((float)float12, (float)float10, 0.01F);
      assertNotEquals((float)float12, (float)float5, 0.01F);
      assertNotEquals((float)float12, (float)float1, 0.01F);
      assertNotEquals((float)float12, (float)float11, 0.01F);
      assertNotEquals((float)float12, (float)float8, 0.01F);
      assertNotEquals((float)float12, (float)float2, 0.01F);
      assertNotNull(float12);
      assertEquals(0.0F, (float)float12, 0.01F);
      
      Float float13 = Float.valueOf(0.0F);
      assertNotEquals((float)float13, (float)float9, 0.01F);
      assertNotEquals((float)float13, (float)float0, 0.01F);
      assertNotEquals((float)float13, (float)float2, 0.01F);
      assertNotEquals((float)float13, (float)float8, 0.01F);
      assertNotEquals((float)float13, (float)float1, 0.01F);
      assertNotEquals((float)float13, (float)float3, 0.01F);
      assertNotEquals((float)float13, (float)float4, 0.01F);
      assertNotEquals((float)float13, (float)float10, 0.01F);
      assertNotEquals((float)float13, (float)float6, 0.01F);
      assertEquals((float)float13, (float)float12, 0.01F);
      assertNotEquals((float)float13, (float)float7, 0.01F);
      assertNotEquals((float)float13, (float)float11, 0.01F);
      assertNotEquals((float)float13, (float)float5, 0.01F);
      assertNotNull(float13);
      assertEquals(0.0F, (float)float13, 0.01F);
      
      Float float14 = Float.valueOf(0.0F);
      assertNotEquals((float)float14, (float)float11, 0.01F);
      assertNotEquals((float)float14, (float)float7, 0.01F);
      assertNotEquals((float)float14, (float)float2, 0.01F);
      assertNotEquals((float)float14, (float)float5, 0.01F);
      assertNotEquals((float)float14, (float)float6, 0.01F);
      assertNotEquals((float)float14, (float)float1, 0.01F);
      assertEquals((float)float14, (float)float13, 0.01F);
      assertNotEquals((float)float14, (float)float8, 0.01F);
      assertNotEquals((float)float14, (float)float10, 0.01F);
      assertNotEquals((float)float14, (float)float4, 0.01F);
      assertNotEquals((float)float14, (float)float3, 0.01F);
      assertNotEquals((float)float14, (float)float0, 0.01F);
      assertEquals((float)float14, (float)float12, 0.01F);
      assertNotEquals((float)float14, (float)float9, 0.01F);
      assertNotNull(float14);
      assertEquals(0.0F, (float)float14, 0.01F);
      
      floatArray0[3] = float14;
      Float float15 = Float.valueOf(0.0F);
      assertEquals((float)float15, (float)float12, 0.01F);
      assertNotEquals((float)float15, (float)float7, 0.01F);
      assertNotEquals((float)float15, (float)float11, 0.01F);
      assertNotEquals((float)float15, (float)float4, 0.01F);
      assertNotEquals((float)float15, (float)float5, 0.01F);
      assertNotEquals((float)float15, (float)float6, 0.01F);
      assertEquals((float)float15, (float)float13, 0.01F);
      assertNotEquals((float)float15, (float)float8, 0.01F);
      assertNotEquals((float)float15, (float)float1, 0.01F);
      assertNotEquals((float)float15, (float)float3, 0.01F);
      assertNotEquals((float)float15, (float)float0, 0.01F);
      assertEquals((float)float15, (float)float14, 0.01F);
      assertNotEquals((float)float15, (float)float10, 0.01F);
      assertNotEquals((float)float15, (float)float9, 0.01F);
      assertNotEquals((float)float15, (float)float2, 0.01F);
      assertNotNull(float15);
      assertEquals(0.0F, (float)float15, 0.01F);
      
      Float float16 = Float.valueOf(0.0F);
      assertNotEquals((float)float16, (float)float4, 0.01F);
      assertEquals((float)float16, (float)float14, 0.01F);
      assertNotEquals((float)float16, (float)float8, 0.01F);
      assertNotEquals((float)float16, (float)float1, 0.01F);
      assertEquals((float)float16, (float)float13, 0.01F);
      assertNotEquals((float)float16, (float)float6, 0.01F);
      assertEquals((float)float16, (float)float15, 0.01F);
      assertNotEquals((float)float16, (float)float11, 0.01F);
      assertNotEquals((float)float16, (float)float7, 0.01F);
      assertNotEquals((float)float16, (float)float10, 0.01F);
      assertNotEquals((float)float16, (float)float5, 0.01F);
      assertNotEquals((float)float16, (float)float3, 0.01F);
      assertNotEquals((float)float16, (float)float0, 0.01F);
      assertNotEquals((float)float16, (float)float9, 0.01F);
      assertNotEquals((float)float16, (float)float2, 0.01F);
      assertEquals((float)float16, (float)float12, 0.01F);
      assertNotNull(float16);
      assertEquals(0.0F, (float)float16, 0.01F);
      
      Float float17 = Float.valueOf(0.0F);
      assertNotEquals((float)float17, (float)float5, 0.01F);
      assertNotEquals((float)float17, (float)float11, 0.01F);
      assertEquals((float)float17, (float)float13, 0.01F);
      assertNotEquals((float)float17, (float)float2, 0.01F);
      assertEquals((float)float17, (float)float12, 0.01F);
      assertNotEquals((float)float17, (float)float9, 0.01F);
      assertNotEquals((float)float17, (float)float8, 0.01F);
      assertNotEquals((float)float17, (float)float7, 0.01F);
      assertEquals((float)float17, (float)float15, 0.01F);
      assertNotEquals((float)float17, (float)float6, 0.01F);
      assertNotEquals((float)float17, (float)float1, 0.01F);
      assertEquals((float)float17, (float)float16, 0.01F);
      assertNotEquals((float)float17, (float)float3, 0.01F);
      assertEquals((float)float17, (float)float14, 0.01F);
      assertNotEquals((float)float17, (float)float10, 0.01F);
      assertNotEquals((float)float17, (float)float0, 0.01F);
      assertNotEquals((float)float17, (float)float4, 0.01F);
      assertNotNull(float17);
      assertEquals(0.0F, (float)float17, 0.01F);
      
      floatArray0[4] = float17;
      Float float18 = Float.valueOf(3.4028235E38F);
      assertNotEquals((float)float18, (float)float3, 0.01F);
      assertNotEquals((float)float18, (float)float8, 0.01F);
      assertNotEquals((float)float18, (float)float1, 0.01F);
      assertNotEquals((float)float18, (float)float10, 0.01F);
      assertNotEquals((float)float18, (float)float13, 0.01F);
      assertNotEquals((float)float18, (float)float9, 0.01F);
      assertNotEquals((float)float18, (float)float4, 0.01F);
      assertNotEquals((float)float18, (float)float14, 0.01F);
      assertNotEquals((float)float18, (float)float0, 0.01F);
      assertNotEquals((float)float18, (float)float17, 0.01F);
      assertNotEquals((float)float18, (float)float2, 0.01F);
      assertNotEquals((float)float18, (float)float11, 0.01F);
      assertNotEquals((float)float18, (float)float15, 0.01F);
      assertNotEquals((float)float18, (float)float6, 0.01F);
      assertNotEquals((float)float18, (float)float16, 0.01F);
      assertNotEquals((float)float18, (float)float12, 0.01F);
      assertNotEquals((float)float18, (float)float5, 0.01F);
      assertNotEquals((float)float18, (float)float7, 0.01F);
      assertNotNull(float18);
      assertEquals(3.4028235E38F, (float)float18, 0.01F);
      
      Float float19 = Float.valueOf(0.0F);
      assertNotEquals((float)float19, (float)float8, 0.01F);
      assertNotEquals((float)float19, (float)float1, 0.01F);
      assertEquals((float)float19, (float)float13, 0.01F);
      assertNotEquals((float)float19, (float)float2, 0.01F);
      assertNotEquals((float)float19, (float)float9, 0.01F);
      assertNotEquals((float)float19, (float)float11, 0.01F);
      assertNotEquals((float)float19, (float)float5, 0.01F);
      assertNotEquals((float)float19, (float)float7, 0.01F);
      assertEquals((float)float19, (float)float15, 0.01F);
      assertEquals((float)float19, (float)float17, 0.01F);
      assertEquals((float)float19, (float)float16, 0.01F);
      assertNotEquals((float)float19, (float)float6, 0.01F);
      assertEquals((float)float19, (float)float12, 0.01F);
      assertNotEquals((float)float19, (float)float18, 0.01F);
      assertNotEquals((float)float19, (float)float3, 0.01F);
      assertEquals((float)float19, (float)float14, 0.01F);
      assertNotEquals((float)float19, (float)float10, 0.01F);
      assertNotEquals((float)float19, (float)float0, 0.01F);
      assertNotEquals((float)float19, (float)float4, 0.01F);
      assertNotNull(float19);
      assertEquals(0.0F, (float)float19, 0.01F);
      
      Float float20 = Float.valueOf((-3414.465F));
      assertNotEquals((float)float20, (float)float2, 0.01F);
      assertNotEquals((float)float20, (float)float11, 0.01F);
      assertNotEquals((float)float20, (float)float7, 0.01F);
      assertNotEquals((float)float20, (float)float12, 0.01F);
      assertNotEquals((float)float20, (float)float18, 0.01F);
      assertNotEquals((float)float20, (float)float15, 0.01F);
      assertNotEquals((float)float20, (float)float5, 0.01F);
      assertNotEquals((float)float20, (float)float17, 0.01F);
      assertNotEquals((float)float20, (float)float4, 0.01F);
      assertNotEquals((float)float20, (float)float10, 0.01F);
      assertNotEquals((float)float20, (float)float8, 0.01F);
      assertNotEquals((float)float20, (float)float1, 0.01F);
      assertNotEquals((float)float20, (float)float6, 0.01F);
      assertNotEquals((float)float20, (float)float14, 0.01F);
      assertNotEquals((float)float20, (float)float13, 0.01F);
      assertNotEquals((float)float20, (float)float3, 0.01F);
      assertNotEquals((float)float20, (float)float0, 0.01F);
      assertNotEquals((float)float20, (float)float19, 0.01F);
      assertNotEquals((float)float20, (float)float16, 0.01F);
      assertNotEquals((float)float20, (float)float9, 0.01F);
      assertNotNull(float20);
      assertEquals((-3414.465F), (float)float20, 0.01F);
      
      Float float21 = Float.valueOf(1035.7F);
      assertNotEquals((float)float21, (float)float10, 0.01F);
      assertNotEquals((float)float21, (float)float9, 0.01F);
      assertNotEquals((float)float21, (float)float13, 0.01F);
      assertNotEquals((float)float21, (float)float20, 0.01F);
      assertNotEquals((float)float21, (float)float3, 0.01F);
      assertNotEquals((float)float21, (float)float8, 0.01F);
      assertNotEquals((float)float21, (float)float0, 0.01F);
      assertNotEquals((float)float21, (float)float2, 0.01F);
      assertNotEquals((float)float21, (float)float11, 0.01F);
      assertNotEquals((float)float21, (float)float14, 0.01F);
      assertNotEquals((float)float21, (float)float12, 0.01F);
      assertNotEquals((float)float21, (float)float7, 0.01F);
      assertNotEquals((float)float21, (float)float5, 0.01F);
      assertNotEquals((float)float21, (float)float19, 0.01F);
      assertNotEquals((float)float21, (float)float4, 0.01F);
      assertNotEquals((float)float21, (float)float16, 0.01F);
      assertNotEquals((float)float21, (float)float17, 0.01F);
      assertNotEquals((float)float21, (float)float1, 0.01F);
      assertNotEquals((float)float21, (float)float6, 0.01F);
      assertNotEquals((float)float21, (float)float18, 0.01F);
      assertNotEquals((float)float21, (float)float15, 0.01F);
      assertNotNull(float21);
      assertEquals(1035.7F, (float)float21, 0.01F);
      
      floatArray0[5] = float21;
      ROI rOI0 = new ROI(223, 223, 223, 223);
      assertNotNull(rOI0);
      assertEquals(223, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(223, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(223, rOI0.uy());
      assertEquals(223, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(223, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(223, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(223, rOI0.uy());
      assertEquals(223, rOI0.ux());
      assertEquals(223, int0);
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals(223, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(223, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(223, rOI0.uy());
      assertEquals(223, rOI0.ux());
      assertEquals(223, int1);
      
      // Undeclared exception!
      try { 
        realColorImage0.set((-2297), (-3922), floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[0];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }
}
