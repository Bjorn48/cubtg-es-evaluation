/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:57:02 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.reader.AIGReader;
import org.sat4j.specs.ISolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AIGReader_ESTest extends AIGReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = AIGReader.decode((InputStream) byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(111011447, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(65535);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      AIGReader aIGReader0 = new AIGReader(solver0);
      try { 
        aIGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG format only!
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 57);
      int int0 = AIGReader.safeGet(bufferedInputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 15);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      int int0 = AIGReader.decode((InputStream) bufferedInputStream0);
      assertEquals(0, int0);
      
      int int1 = AIGReader.safeGet(bufferedInputStream0);
      assertEquals(177, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)10, (byte)10);
      try { 
        AIGReader.safeGet(byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG Error, EOF met too early
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AIGReader.safeGet((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2631), (byte)75);
      // Undeclared exception!
      try { 
        AIGReader.safeGet(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        AIGReader.safeGet(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      // Undeclared exception!
      try { 
        aIGReader0.parseInt((InputStream) null, '');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        aIGReader0.parseInt(mockFileInputStream0, '>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      // Undeclared exception!
      try { 
        aIGReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2631), (byte)75);
      // Undeclared exception!
      try { 
        aIGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      pushbackInputStream0.close();
      try { 
        aIGReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        AIGReader.decode((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3176), 1000);
      // Undeclared exception!
      try { 
        AIGReader.decode((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        AIGReader.decode((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      try { 
        AIGReader.decode((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG Error, EOF met too early
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(65535);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      AIGReader aIGReader0 = new AIGReader(solver0);
      try { 
        aIGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG format only!
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader.decode((InputStream) byteArrayInputStream0);
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      try { 
        aIGReader0.parseInt(byteArrayInputStream0, 'L');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorunexpected character
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader.decode((InputStream) byteArrayInputStream0);
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      try { 
        aIGReader0.parseInt(byteArrayInputStream0, 'L');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorunexpected character
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      try { 
        aIGReader0.parseInt(byteArrayInputStream0, 'L');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorexpected digit
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)44);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(65535);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      AIGReader aIGReader0 = new AIGReader(iSolver0);
      try { 
        aIGReader0.parseInt(bufferedInputStream0, '3');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorexpected digit
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      int[] intArray0 = new int[4];
      StringWriter stringWriter0 = new StringWriter('E');
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      aIGReader0.decode(intArray0, printWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      int[] intArray0 = new int[4];
      String string0 = aIGReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
