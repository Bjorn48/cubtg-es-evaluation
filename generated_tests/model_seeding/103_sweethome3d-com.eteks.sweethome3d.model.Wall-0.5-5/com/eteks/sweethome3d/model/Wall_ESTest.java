/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 13:47:13 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(976.0F, 1.0F, 976.0F);
      Float.sum((-1.0F), 0.0F);
      wall1.setWallAtEnd(wall0);
      Float.min(0.0F, 444.154F);
      Float.max((-864.4818F), 0.0F);
      Float float0 = new Float((double) (-1.0F));
      wall1.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 3611.5F, 0.0F, 3611.5F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall1.getHeight();
      Float.isFinite(0.0F);
      wall1.setHeightAtEnd((Float) null);
      wall0.setThickness(3611.5F);
      wall0.setLeftSideShininess(2098.972F);
      wall1.getHeight();
      Float float0 = new Float((double) (-1.0F));
      Float.sum((-4532.8926F), (-2418.3489F));
      wall1.setHeight(float0);
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, 975.6075F, 975.6075F, 0.0F);
      wall0.setRightSideShininess(0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.containsWallStartAt(0.0F, 975.6075F, (-4978.49F));
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-134.0F), (-134.0F), (-134.0F), (-134.0F), (-134.0F), (-134.0F));
      Wall wall1 = wall0.clone();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setWallAtEnd(wall1);
      wall1.getArcExtent();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.setPattern((TextureImage) null);
      wall0.getRightSideTexture();
      Float float0 = new Float((double) 2146672051);
      wall0.setHeightAtEnd(float0);
      wall0.clone();
      wall0.setWallAtStart((Wall) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      Float float0 = new Float((-144.874F));
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.isTrapezoidal();
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart(wall0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      Float.sum((-2876.5F), (-1649.3948F));
      Float.min((-1.0F), (-1.0F));
      Float.max((-1.0F), (-1622.2942F));
      Float.min((-4525.8945F), (-4525.8945F));
      float0.floatValue();
      wall1.setArcExtent(float0);
      wall0.intersectsRectangle((-1622.2942F), 1343.2952F, 1351.0F, (-1.0F));
      wall0.getHeight();
      wall1.getRightSideTexture();
      Wall wall2 = wall1.clone();
      wall1.setWallAtStart(wall2);
      wall1.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall((-480.43F), (-231.8F), (-480.43F), (-480.43F), (-480.43F));
      Float.compare(1.0F, 1.0F);
      wall0.setHeight((Float) 1.0F);
      wall0.getRightSideColor();
      Float float0 = new Float((double) (-480.43F));
      wall0.setArcExtent(float0);
      wall0.getLength();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLength();
      TexturesCategory texturesCategory0 = new TexturesCategory("LEVEL");
      // Undeclared exception!
      try { 
        texturesCategory0.getTexture((-1466));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-144.06238F), (-144.06238F), 0.0F, (-144.06238F), 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("c1YKeu<V%", resourceURLContent0, 2.6324158F, 2.6324158F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setPattern(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.intersectsRectangle(1.0F, 0.0F, (-1508.0F), (-1.0F));
      wall1.getStartPointToEndPointDistance();
      wall1.move(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-134.0F), (-134.0F), 0.0F, (-134.0F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.isTrapezoidal();
      wall0.setWallAtStart(wall0);
      wall0.getRightSideTexture();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setWallAtEnd((Wall) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(976.0F, 1.0F, 976.0F);
      Float.sum((-1.0F), 0.0F);
      wall1.setWallAtEnd(wall0);
      Float.max((-864.4818F), 0.0F);
      Float float0 = new Float((double) (-1.0F));
      wall1.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      Float.min((-1.0F), (-1.0F));
      Float.valueOf((-1622.2942F));
      Float float1 = new Float((double) (-1.0F));
      Float.valueOf(789.44F);
      Float float2 = Float.valueOf(1167.29F);
      float2.floatValue();
      float0.floatValue();
      Float float3 = new Float(0.0F);
      Float.floatToIntBits(1824.3213F);
      Float.floatToIntBits(0.0F);
      wall0.setArcExtent((Float) 0.0F);
      wall0.intersectsRectangle(1167.29F, (-1649.3948F), 1155795528, 1155795528);
      Wall wall2 = new Wall((-1622.2942F), 3048.5515F, (-24.0F), (-1.0F), 1155795528, 0.1F);
      wall2.getHeight();
      Wall wall3 = wall1.clone();
      wall0.clone();
      wall2.setWallAtStart(wall3);
      wall2.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1433.79F), 0.0F, (-1433.79F), 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float((-1433.79F));
      wall1.setHeightAtEnd(float0);
      wall1.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.intersectsRectangle(1.0F, 0.0F, (-1508.0F), (-1.0F));
      wall1.getStartPointToEndPointDistance();
      Object object0 = new Object();
      Integer integer0 = new Integer((-4758));
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(float0, "%U,I8s#~!)@Vo{!z", wall0, wall0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXStart((-1577.16F));
      wall1.getXEnd();
      wall1.setRightSideShininess(1254.2074F);
      wall1.setYStart(1.0F);
      wall0.getLeftSideTexture();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.setPattern((TextureImage) null);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtEnd();
      wall2.setLeftSideTexture((HomeTexture) null);
      Wall wall3 = new Wall((-1360.1166F), (-0.72628826F), 0.0F, 1.0F, (-1.0F), 0.0F);
      wall3.clone();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      Integer.getInteger("WALL_AT_END");
      Integer integer0 = Integer.valueOf(3955);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 693.9F, (-1450.1786F), 0.0F, 693.9F);
      Float float0 = new Float(693.9F);
      wall0.setArcExtent(float0);
      wall0.setYEnd((-1450.1786F));
      wall0.setXStart(1.0F);
      wall0.setThickness(1.0F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.intersectsRectangle(1.0F, 0.0F, (-1508.0F), (-1.0F));
      wall1.getStartPointToEndPointDistance();
      Wall wall2 = new Wall((-1559.2F), (-1559.2F), (-1559.2F), (-1.0F), (-1559.2F));
      wall2.getHeight();
      Float float1 = new Float((double) (-1.0F));
      wall2.setHeight(float1);
      wall2.containsWallEndAt((-179.0F), 1986.71F, (-179.0F));
      Integer integer0 = Integer.valueOf(0);
      Wall wall3 = wall1.clone();
      Integer integer1 = Integer.getInteger("HEIGHT_AT_END", integer0);
      wall3.setLeftSideColor(integer1);
      wall1.getLeftSideTexture();
      wall3.setLeftSideTexture((HomeTexture) null);
      Integer integer2 = new Integer(0);
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall wall0 = new Wall((-2316.2756F), 1.0F, (-2316.2756F), 1.0F, (-2316.2756F));
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(1188);
      Object object0 = new Object();
      integer0.equals(object0);
      wall1.setRightSideColor(integer0);
      wall1.setWallAtStart(wall0);
      wall0.clone();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 693.9F, (-1433.7891F), 0.0F, 693.9F);
      Level level0 = new Level((String) null, 693.9F, 693.9F, (-1433.7891F));
      wall0.setLevel(level0);
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.setPattern((TextureImage) null);
      wall0.getRightSideTexture();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall0.getPoints();
      wall0.setXEnd(693.9F);
      wall0.getRightSideShininess();
      wall1.containsWallEndAt((-1622.2942F), 0.0F, (-4532.8926F));
      Float.sum(0.0F, 0.0F);
      Float.min((-1799.59F), (-0.99F));
      Float.max(573.4056F, (-84.8F));
      Float.min(0.0F, 1640.0F);
      wall0.intersectsRectangle((-1.0F), (-3023.8643F), (-1080.975F), (-1.0F));
      wall0.getHeight();
      wall1.getRightSideTexture();
      Wall wall2 = wall0.clone();
      wall0.setWallAtStart(wall2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.01F, 0.1F, (-1178.5F));
      Wall wall1 = wall0.clone();
      wall1.move(0.01F, 0.01F);
      wall1.setThickness(0.01F);
      wall1.setWallAtStart(wall0);
      wall1.getYEnd();
      wall1.getHeightAtEnd();
      wall1.containsWallEndAt(0.0F, 1.0F, 0.11F);
      Integer integer0 = Integer.valueOf(0);
      wall0.setLeftSideColor(integer0);
      wall1.getLeftSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
      Integer integer1 = new Integer(0);
      wall0.setRightSideColor(integer1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      Float float0 = new Float(2645.0F);
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(1254.2074F, 3934.9019F, 1.0F, 4647.1597F);
      wall0.getHeight();
      wall0.getRightSideTexture();
      wall0.clone();
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      Float float0 = new Float((-144.874F));
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setRightSideShininess((-3881.695F));
      wall1.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall1.setXStart((-2876.5F));
      wall1.setThickness(976.0F);
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 3611.5F, 0.0F, 3611.5F);
      Wall wall1 = new Wall((-1559.2F), (-1559.2F), (-1559.2F), (-1.0F), (-1559.2F));
      wall1.getHeight();
      wall1.setHeightAtEnd((Float) null);
      wall0.setThickness(3611.5F);
      wall1.getHeight();
      Float float0 = new Float((double) (-1.0F));
      wall1.setHeight(float0);
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
      wall0.move(0.0F, 2053.5676F);
      wall0.getYEnd();
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.setXEnd(1.0F);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-4711.57F), 0.0F, (-209.32751F));
      Wall wall1 = wall0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("_(`bZ A~LqXOa.", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent");
      propertyChangeEvent0.getPropertyName();
      wall0.intersectsRectangle(0.01F, 0.0F, 0.0F, 0.0F);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setLeftSideShininess(0.0F);
      wall1.getWallAtStart();
      wall1.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-144.06238F), (-144.06238F), 0.0F, (-144.06238F), 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(351.20053F, 351.20053F, 351.20053F, 351.20053F, (-2599.041F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Float.compare(1.0F, 1.0F);
      Float.compare(0, 1.0F);
      wall0.setArcExtent((Float) 1.0F);
      Wall wall1 = new Wall((-1.0F), (-1.0F), (-1.0F), 0, (-1), (-1559.2F));
      wall1.getHeight();
      Float float0 = new Float((double) (-1.0F));
      wall1.setHeight(float0);
      wall0.setWallAtStart(wall1);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.containsWallEndAt(3935.3867F, 3935.3867F, 3935.3867F);
      Integer.getInteger("WALL_AT_END");
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 1.6693988F, 0.1F, (-1178.5F));
      wall0.move(1.6693988F, 1.6693988F);
      wall0.setThickness(0.01F);
      wall0.setWallAtStart(wall0);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.max(173.46313F, 0.0F);
      Float.compare(1.0F, 1.0F);
      Float float0 = Float.valueOf(0.0F);
      wall0.setThickness(0.010973613F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle((-1559.2F), (-1559.2F), (-829.0F), 2.0F);
      wall0.getHeight();
      Level level0 = new Level("5", 1.0F, 0.0F, (-1622.2942F));
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-164.71597F), (-164.71597F), (-164.71597F), (-164.71597F), (-164.71597F), (-164.71597F));
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(3935.0F, 3935.0F, 3935.0F, 3935.0F, 3935.0F, 3935.0F);
      wall0.move(3935.0F, 281.7897F);
      wall0.containsPoint(3935.0F, 3935.0F, 3935.0F);
      wall0.getHeight();
      wall0.getPoints();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-416.53F), 1.0F, 2.0F, 1.0F, 2.0F);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.01F, 0.1F, (-1178.5F));
      wall0.move(0.01F, 0.01F);
      wall0.setThickness(0.01F);
      wall0.setWallAtStart(wall0);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.max(173.46313F, 0.0F);
      Float.compare(1.0F, 1.0F);
      Float float0 = Float.valueOf(0.0F);
      wall0.setThickness(0.010973613F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle((-1559.2F), (-1559.2F), (-829.0F), 1343.2952F);
      wall0.getHeight();
      Level level0 = new Level("5", 1343.2952F, 0.0F, (-1622.2942F));
      wall0.getLength();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Wall wall0 = new Wall(3934.9019F, (-1.0F), (-2265.12F), (-1965.0531F), 1509.1417F);
          Float float0 = new Float((-1746.3209F));
          wall0.setArcExtent(float0);
          // Undeclared exception!
          wall0.getPoints();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.setYStart((-3229.695F));
      wall0.setWallAtStart(wall0);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.getPoints();
      wall0.getHeight();
      wall0.setLeftSideShininess(3935.3867F);
      wall0.getPattern();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.getRightSideTexture();
      Float float0 = new Float((double) 2146672051);
      wall0.setHeightAtEnd(float0);
      wall0.setWallAtEnd((Wall) null);
      Integer integer0 = new Integer(2146672051);
      wall0.setLeftSideColor(integer0);
      wall0.getYStart();
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      Float float0 = new Float((double) 2645.0F);
      wall0.setLeftSideShininess(3935.3867F);
      wall0.intersectsRectangle(1254.2074F, 3935.3867F, 1.0F, 2645.0F);
      Float float1 = wall0.getHeight();
      Float.sum(1437.75F, 3677.82F);
      Float.sum((-4267.8853F), (-1216.0F));
      wall0.getRightSideTexture();
      Float float2 = new Float((double) 2645.0F);
      wall0.setHeight(float1);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.isTrapezoidal();
      wall0.setWallAtStart(wall0);
      wall0.setXEnd(1472.701F);
      wall0.intersectsRectangle(0.0F, 653.1746F, 606.415F, 3067.7007F);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-144.06238F), (-144.06238F), 0.0F, (-144.06238F), 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1010.5F, 0.0F, 0.0F, 1010.5F);
      wall0.setXStart(1010.5F);
      wall0.setThickness(1010.5F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.01F, 0.1F, (-1178.5F));
      Wall wall1 = new Wall((-1.0F), (-1.0F), 0.01F, (-1.0F), 0.1F, (-1178.5F));
      wall1.move(0.01F, 0.01F);
      wall1.setThickness(0.01F);
      wall1.setWallAtStart(wall0);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.max(173.46313F, 0.0F);
      Float.compare(1.0F, 1.0F);
      ((Float)1.0F).floatValue();
      Float float0 = Float.valueOf(0.0F);
      wall0.setThickness(0.010973613F);
      wall1.setArcExtent(float0);
      wall0.setRightSideShininess(0.01F);
      wall1.intersectsRectangle((-1559.2F), (-1559.2F), (-829.0F), 1343.2952F);
      wall0.getHeight();
      Level level0 = new Level("5", 1343.2952F, 0.0F, (-1622.2942F));
      wall1.getLength();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-1434.797F), (-1434.797F), (-1434.797F), (-1434.797F), (-1434.797F), (-1434.797F));
      Float float0 = new Float((-1434.797F));
      wall0.setHeightAtEnd(float0);
      wall0.setHeightAtEnd(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F);
      Float float0 = new Float(3935.0376F);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      Float float0 = wall0.getHeight();
      assertEquals(3935.3867F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall((-0.6188498F), (-0.6188498F), (-0.6188498F), (-0.6188498F), (-0.6188498F), (-0.6188498F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getLeftSideTexture();
      wall0.setWallAtStart(wall0);
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall((-134.0F), 0.0F, 0.0F, 0.0F, (-134.0F));
      Wall wall1 = wall0.clone();
      Level level0 = new Level("temp", 2742.419F, 2742.419F, 2742.419F);
      level0.getElevation();
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      wall1.isAtLevel(level1);
      wall1.getThickness();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall1.setXStart((-2876.5F));
      wall1.setThickness(976.0F);
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.intersectsRectangle(444.154F, 0.0F, 976.0F, 1.0F);
      Float float0 = new Float(0.0F);
      Float.sum((-1.0F), 0.0F);
      Float.min(0.0F, 444.154F);
      Float.max((-864.4818F), 0.0F);
      Float.min(1351.0F, 0.0F);
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      wall0.intersectsRectangle(0.0F, 2078.0F, (-1698.3911F), (-1.0F));
      wall1.getHeight();
      wall0.getRightSideTexture();
      Wall wall2 = wall1.clone();
      wall0.setWallAtStart(wall2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-1974.2F), (-1974.2F), (-1439.92F), 0.0F, (-1974.2F), (-1974.2F));
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.getHeight();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.01F, 0.1F, (-1178.5F));
      Wall wall1 = new Wall((-1.0F), (-1.0F), 0.01F, (-1.0F), 0.1F, (-1178.5F));
      wall1.move(0.01F, 0.01F);
      wall1.setThickness(0.01F);
      wall1.setWallAtStart(wall0);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.valueOf(0.0F);
      Float float0 = new Float(2817.12352471691);
      float0.floatValue();
      ((Float)2817.1235F).floatValue();
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall1.intersectsRectangle(0.1F, (-1178.5F), 2817.1235F, 0.01F);
      wall0.getHeight();
      Wall wall2 = wall0.clone();
      Wall wall3 = wall1.clone();
      wall2.setWallAtStart(wall3);
      wall2.containsWallEndAt(65.9F, 0.1F, (-1178.5F));
      wall2.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(3970.6123F, 3970.6123F, 3970.6123F, 3970.6123F, 3970.6123F, 3970.6123F);
      wall0.setYEnd(3970.6123F);
      Wall.Property.valueOf("WALL_AT_END");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.01F, 0.1F, (-1178.5F));
      Wall wall1 = wall0.clone();
      wall1.move(0.01F, 0.01F);
      wall1.setThickness(0.01F);
      wall1.setWallAtStart(wall0);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.valueOf(0.0F);
      Float float0 = new Float(2817.12352471691);
      float0.floatValue();
      ((Float)2817.1235F).floatValue();
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall1.intersectsRectangle(0.1F, (-1178.5F), 2817.1235F, 0.01F);
      wall0.getHeight();
      wall0.getRightSideTexture();
      Wall wall2 = wall0.clone();
      Wall wall3 = wall1.clone();
      wall2.setWallAtStart(wall3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setXStart(3934.9019F);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-134.0F), 7.536227F, 7.536227F, (-134.0F), (-134.0F), (-134.0F));
      Float float0 = new Float(7.536227F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(3970.6123F, 3970.6123F, 3970.6123F, 3970.6123F, 3970.6123F, 3970.6123F);
      Wall wall1 = new Wall(0.0F, 3935.3867F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall1);
      wall1.getRightSideTexture();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      Float float0 = Float.valueOf((-179.0F));
      Float float1 = new Float(3797.239996684751);
      float0.floatValue();
      float1.floatValue();
      Float float2 = new Float(444.154F);
      Float float3 = new Float(989.36243);
      float3.floatValue();
      float3.floatValue();
      wall0.setArcExtent((Float) 989.3624F);
      wall0.intersectsRectangle(989.3624F, 444.154F, 444.154F, 701.2802F);
      wall1.getHeight();
      wall1.getRightSideTexture();
      wall1.clone();
      Wall wall2 = wall0.clone();
      wall1.setWallAtStart(wall2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      Float float0 = new Float((-144.874F));
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-134.0F), (-134.0F), 0.0F, (-134.0F), 0.0F);
      Wall wall1 = wall0.clone();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setWallAtEnd(wall1);
      wall0.getWallAtEnd();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setXStart((-1450.1786F));
      Wall wall1 = wall0.clone();
      wall1.containsPoint(0.0F, 0.0F, 352.88F);
      wall1.setXEnd(961.0157F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setWallAtStart(wall1);
      wall0.setYStart((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-862));
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "", object0, integer0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXStart(0.0F);
      wall0.getXEnd();
      wall0.setRightSideShininess(1.0F);
      wall0.setYStart(0.0F);
      wall0.getLeftSideTexture();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.setLeftSideColor((Integer) null);
      wall0.getLeftSideTexture();
      wall0.getRightSideColor();
      wall1.getYEnd();
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.getYArcCircleCenter();
      Integer integer0 = Integer.valueOf(46);
      wall0.setRightSideColor(integer0);
      wall0.getRightSideShininess();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.intersectsRectangle(1.0F, 0.0F, (-1508.0F), (-1.0F));
      float float1 = new Float((-2876.5F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", (PropertyChangeListener) null);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getYArcCircleCenter();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 693.9F, (-1433.7891F), 0.0F, 693.9F);
      wall0.getLevel();
      wall0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.isTrapezoidal();
      Integer integer0 = new Integer(4);
      wall0.setRightSideColor(integer0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(976.0F, 1.0F, 976.0F);
      Float.sum((-1.0F), 0.0F);
      Float.min(0.0F, 444.154F);
      Float.max(0.0F, 0.0F);
      Float.min(1351.0F, 0.0F);
      wall0.intersectsRectangle(0.0F, 2078.0F, (-1698.3911F), (-1.0F));
      wall1.getHeight();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(3932.879F, 3932.879F, 3932.879F, 3932.879F, 3932.879F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-160.18172F), (-160.18172F), (-160.18172F), (-160.18172F), (-160.18172F));
      Level level0 = new Level((String) null, (-1.0F), (-1.0F), (-160.18172F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setXStart(1137.606F);
      Wall wall1 = wall0.clone();
      wall1.containsPoint(0.0F, 0.0F, 352.88F);
      wall1.setXEnd(961.0157F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setWallAtStart(wall1);
      wall0.setYStart((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-862));
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "", object0, integer0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXStart(0.0F);
      wall0.getXEnd();
      wall0.setRightSideShininess(1.0F);
      wall0.setYStart(0.0F);
      wall0.getLeftSideTexture();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.setPattern((TextureImage) null);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F);
      Float float0 = new Float(2645.0F);
      wall0.setArcExtent(float0);
      wall0.getLength();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(3940.027F, 3940.027F, 3940.027F, 3940.027F, 3940.027F, 3940.027F);
      wall0.isTrapezoidal();
      wall0.setWallAtStart(wall0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(989.36243);
      float0.floatValue();
      float0.floatValue();
      wall0.setArcExtent((Float) 989.3624F);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(976.0F, 1.0F, 976.0F);
      Float.sum((-1.0F), 0.0F);
      wall1.setWallAtEnd(wall0);
      Float.max((-864.4818F), 0.0F);
      Float float1 = new Float((double) (-1.0F));
      wall1.setArcExtent(float1);
      wall0.getPoints();
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F);
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-144.87358F), (-144.87358F), (-144.87358F), (-144.87358F), (-144.87358F));
      Float float0 = new Float((-144.87358F));
      wall0.setHeightAtEnd((Float) null);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-3878.5137F), (-3878.5137F), (-3878.5137F), (-3878.5137F), (-1.0F), (-3878.5137F));
      Wall wall1 = new Wall(384.41766F, 384.41766F, (-0.99F), (-3878.5137F), (-1178.5F));
      Wall wall2 = wall1.clone();
      wall2.move((-1178.5F), 4647.1597F);
      wall0.setThickness((-3878.5137F));
      wall1.setWallAtStart(wall0);
      wall2.getYEnd();
      wall2.getHeightAtEnd();
      wall2.containsWallEndAt(1579.4956F, 0.0F, (-1.0F));
      Integer integer0 = Integer.valueOf(350);
      wall0.setLeftSideColor(integer0);
      wall2.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(671.7244F, 671.7244F, 0.1F, 0.1F, 0.1F);
      Wall wall1 = new Wall(0.1F, 0.1F, 671.7244F, 0.1F, 671.7244F, 671.7244F);
      wall1.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getLeftSideColor();
      wall0.setRightSideShininess(0.054054055F);
      Integer integer0 = new Integer(14);
      wall0.setRightSideColor(integer0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      Float float0 = new Float(0.0F);
      Float.sum((-1.0F), 0.0F);
      Float.min(0.0F, 444.154F);
      Float.max((-864.4818F), 0.0F);
      Float.min(1351.0F, 0.0F);
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      wall0.move(701.2802F, (-1649.3948F));
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("com.eteks.sweethome3d.tools.URLContent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.com.eteks.sweethome3d.tools.URLContent
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(183.58F, (-1014.8947F), (-1014.8947F), 0.1F, 2289.6052F);
      wall0.setXStart((-1.0F));
      wall0.getLength();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      wall0.clone();
      Float float0 = new Float((double) 0.0F);
      Level level0 = new Level((String) null, (-2876.5F), 0.01F, 2608.3F);
      level0.setVisible(false);
      wall0.setLevel(level0);
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall((-160.18F), (-160.18F), (-160.18F), (-160.18F), (-160.18F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 799.1799F, 1413.199F, 649.5F, 0.0F);
      wall0.setXStart(799.1799F);
      wall0.setThickness(0.0F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.setPattern((TextureImage) null);
      wall0.getRightSideTexture();
      Float float0 = new Float((double) 2146672051);
      wall0.setHeightAtEnd(float0);
      wall0.setWallAtEnd((Wall) null);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 693.9F, (-1433.7891F), 0.0F, 693.9F);
      wall0.setXStart(704.071F);
      Level level0 = new Level((String) null, 693.9F, 693.9F, (-1433.7891F));
      level0.setVisible(true);
      wall0.setLevel(level0);
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(704.071F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      wall0.getHeightAtEnd();
      wall0.getLevel();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-961.8525F), (-2990.3794F), (-2990.3794F), 1164.9966F, (-961.8525F), (-2990.3794F));
      wall0.setThickness(1164.9966F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(976.0F, 1.0F, 976.0F);
      Float.sum((-1.0F), 0.0F);
      wall1.setWallAtEnd(wall0);
      Float.min(0.0F, 444.154F);
      Float.max((-864.4818F), 0.0F);
      Float.min(1351.0F, 0.0F);
      wall0.intersectsRectangle((-26.42091F), 2078.0F, (-1698.3911F), (-1.0F));
      wall1.getHeight();
      wall0.getRightSideTexture();
      Wall wall2 = wall1.clone();
      wall2.setLevel((Level) null);
      Integer integer0 = new Integer((-2031));
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.1F, (-1.0F), 0.1F, (-1178.5F));
      wall0.move((-1.0F), (-1.0F));
      wall0.setThickness(0.01F);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.max(173.46313F, 0.0F);
      Float.compare(1.0F, 1.0F);
      ((Float)1.0F).floatValue();
      Float float0 = Float.valueOf(0.1F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle((-1559.2F), (-1559.2F), (-829.0F), 1343.2952F);
      Level level0 = new Level("5", 1343.2952F, 0.0F, (-1622.2942F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall((-1559.2F), (-1559.2F), (-1559.2F), (-1.0F), (-1559.2F));
      wall0.getHeight();
      Float float0 = new Float((double) (-1.0F));
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      wall1.getLevel();
      Float float1 = Float.valueOf((-1559.2F));
      Float.max((-1559.2F), 0.01F);
      Float.sum((-2175.4207F), (-1.0F));
      Float.min((-1.0F), (-1.0F));
      wall0.setHeight(float1);
      wall1.getLeftSideTexture();
      wall0.getStartPointToEndPointDistance();
      Integer integer0 = new Integer((-1265));
      Integer.min((-1265), 5);
      wall1.setLeftSideColor(integer0);
      wall1.getLeftSideColor();
      wall0.clone();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getPoints();
      Wall.Property.values();
      wall1.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.01F, 0.1F, (-1178.5F));
      Wall wall1 = new Wall((-1.0F), (-1.0F), 0.01F, (-1.0F), 0.1F, (-1178.5F));
      wall1.move(0.01F, 0.01F);
      wall1.setThickness(0.01F);
      wall1.setWallAtStart(wall0);
      Float.max(0.01F, 2.0F);
      Float.min((-1.0F), 2.0F);
      Float.max(173.46313F, 0.0F);
      Float.compare(1.0F, 1.0F);
      ((Float)1.0F).floatValue();
      Float float0 = Float.valueOf(0.0F);
      wall0.setThickness(0.010973613F);
      wall1.setArcExtent(float0);
      wall1.intersectsRectangle((-1559.2F), (-1559.2F), (-829.0F), 1343.2952F);
      wall0.getHeight();
      Level level0 = new Level("5", 1343.2952F, 0.0F, (-1622.2942F));
      wall1.getLength();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setLeftSideShininess(0.0F);
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F);
      Float float0 = new Float(2645.0F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(1254.2074F, 3935.0376F, 1.0F, 2645.0F);
      Float float1 = wall0.getHeight();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Wall.clone((List<Wall>) linkedList0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.setHeightAtEnd(float1);
      Float float2 = wall0.getHeightAtEnd();
      wall0.setHeightAtEnd(float2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(3966.9307F, 3966.9307F, 3966.9307F, 3966.9307F, 3966.9307F, 3966.9307F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), 0.0F, (-1178.5F));
      Wall wall1 = wall0.clone();
      Float float0 = new Float(0.0);
      wall1.setArcExtent((Float) null);
      wall0.setYEnd((-2834.1F));
      wall0.setXStart(1640.0F);
      wall1.setThickness((-2876.5F));
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 11.0F, (-4978.49F), 1135.6243F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) (-1.0F));
      wall0.setArcExtent(float0);
      Float.sum(1.0F, (-135.60841F));
      Float.min(444.154F, 1.0F);
      Float.max(1.0F, (-1.0F));
      Float.min(1.0F, 1351.0F);
      Float float1 = Float.valueOf((-1366.0132F));
      float1.floatValue();
      wall1.setArcExtent((Float) null);
      wall0.intersectsRectangle(3553.597F, 4647.1597F, (-2876.5F), (-4978.49F));
      wall1.getHeight();
      wall1.getRightSideTexture();
      wall1.clone();
      Wall wall2 = wall0.clone();
      wall2.setWallAtStart(wall1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(3935.6794F, 3935.6794F, 3935.6794F, 3935.6794F, 3935.6794F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 172.6F, (-3881.695F), 0.0F, 90.50347F);
      String string0 = "#Sl6gk66,%%'";
      Integer integer0 = Integer.getInteger("#Sl6gk66,%%'", 0);
      wall0.setLeftSideColor(integer0);
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-0.6188498F), (-0.6188498F), (-0.6188498F), (-0.6188498F), (-0.6188498F), (-0.6188498F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(671.7244F, 671.7244F, 0.1F, 0.1F, 0.1F);
      Wall wall1 = new Wall(0.1F, 0.1F, 671.7244F, 0.1F, 671.7244F, 671.7244F);
      wall0.setWallAtEnd(wall0);
      wall1.isTrapezoidal();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.setXEnd(3935.3867F);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1413.3712F), 0.0F, (-1413.3712F), 0.0F);
      Integer integer0 = new Integer(5352);
      Integer.getInteger("", 5352);
      integer0.equals("");
      wall0.setRightSideColor(integer0);
      Float float0 = new Float((-341.46F));
      Float float1 = new Float((-341.46F));
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float.max(0.01F, 2.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getHeight();
      Float float0 = new Float((double) (-1.0F));
      wall0.setHeight(float0);
      wall0.setLeftSideColor((Integer) null);
      wall0.getLeftSideTexture();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-134.0F), 7.536227F, 7.536227F, (-134.0F), (-134.0F), (-134.0F));
      wall0.containsPoint(7.536227F, 7.536227F, (-134.0F));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(3396.2698F, 3396.2698F, 3396.2698F, 3917.0F, 3917.0F);
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      Float float0 = new Float((-144.874F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-11.37587F), 0.0F, 0.0F);
      wall0.setXStart(1137.606F);
      Wall wall1 = wall0.clone();
      wall1.containsPoint((-11.37587F), 0.0F, 352.88F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall wall2 = new Wall((-1.0F), (-1941.87F), 1816.8197F, 0.1F, 796.0F);
      wall2.getHeight();
      Float float0 = new Float((double) 1816.8197F);
      Float float1 = new Float(2583.3F);
      wall1.setHeight(float1);
      Integer integer0 = new Integer((-2155));
      integer0.equals("temp");
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float(2645.0F);
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float1);
      wall0.intersectsRectangle(4272.0F, 4272.0F, 2645.0F, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.containsWallEndAt(3935.3867F, 3935.3867F, 3935.3867F);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall((-2237.8386F), (-2237.8386F), (-2237.8386F), (-2237.8386F), (-2237.8386F));
      wall0.getStartPointToEndPointDistance();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-3878.5137F), (-3878.5137F), (-3878.5137F), (-3878.5137F), (-1.0F), (-3878.5137F));
      Float float0 = new Float(4647.1597F);
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt((-3878.5137F), (-3878.5137F), (-3878.5137F));
      Float float1 = new Float(61.0F);
      Float.isFinite(4647.1597F);
      wall0.setArcExtent(float1);
      wall0.setThickness((-1.0F));
      Wall wall1 = new Wall((-1559.2F), (-1559.2F), (-1559.2F), (-1.0F), (-1559.2F));
      wall1.getHeight();
      Float float2 = new Float((double) (-1.0F));
      wall1.setHeight(float2);
      wall0.setWallAtStart(wall1);
      wall0.getYEnd();
      wall1.getHeightAtEnd();
      wall0.containsWallEndAt(61.0F, 0.0F, (-4532.8926F));
      Integer integer0 = Integer.valueOf(0);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(629);
      Wall wall2 = new Wall(1.0F, 0.0F, 0.0F, 629, 0.0F, 1398.261F);
      integer2.equals(wall2);
      wall0.setRightSideColor(integer2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall((-3878.5137F), (-3878.5137F), (-3878.5137F), (-3878.5137F), (-1.0F), (-3878.5137F));
      Float float0 = new Float(4647.1597F);
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt((-3878.5137F), (-3878.5137F), (-3878.5137F));
      Float float1 = new Float(61.0F);
      Float.isFinite(4647.1597F);
      wall0.setArcExtent(float1);
      wall0.containsWallEndAt(813.591F, (-494.04306F), (-1.0F));
      Wall wall1 = wall0.clone();
      wall1.setLeftSideShininess((-1.0F));
      wall1.containsPoint((-3878.5137F), (-2853.4F), (-92.4892F));
      wall0.setLeftSideShininess(0.0F);
      wall1.getPoints();
      wall0.getLevel();
      wall1.isAtLevel((Level) null);
      wall0.getLevel();
      wall1.setXEnd(0.1F);
      Float float2 = new Float((-494.04306F));
      Float.sum(0.0F, 0.0F);
      wall1.setHeightAtEnd(float2);
      wall1.setXStart(0.0F);
      wall0.setThickness(1.0F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.setYStart(3935.3867F);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(351.20053F, 351.20053F, 351.20053F, 351.20053F, (-2599.041F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Float.compare(1.0F, 1.0F);
      Float.compare(0, 1.0F);
      wall0.setArcExtent((Float) 1.0F);
      Wall wall1 = new Wall((-1559.2F), (-1559.2F), (-1559.2F), (-1.0F), (-1559.2F));
      wall1.getHeight();
      Float float0 = new Float((double) (-1.0F));
      wall1.setHeight(float0);
      wall0.setWallAtStart(wall1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1413.3712F), 0.0F, (-1413.3712F), 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("!/", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setArcExtent((Float) null);
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float float0 = 3396.2698F;
      float float1 = 0.1F;
      Wall wall0 = new Wall(3396.2698F, (-3648.916F), 0.1F, (-3648.916F), 768.646F);
      wall0.setXStart(0.1F);
      wall0.getLength();
      float float2 = 2.0F;
      Float float3 = null;
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      linkedList0.add(wall0);
      // Undeclared exception!
      try { 
        linkedList0.addAll(2145251372, (Collection<? extends Wall>) list1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145251372, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-144.06238F), (-144.06238F), 0.0F, (-144.06238F), 0.0F);
      Integer integer0 = Integer.valueOf((-1));
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.02F, 853.1218F, 0.02F, (-1.0F), 853.1218F);
      wall0.containsWallStartAt(4.360696F, 294.759F, 853.1218F);
      wall0.getLength();
      wall0.getThickness();
      wall0.getLeftSideShininess();
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      integer0.equals(object0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall1.setXEnd(1993.0F);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart((Wall) null);
      wall0.setYStart(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      wall0.setRightSideShininess(0.0F);
      wall1.getWallAtStart();
      Object object1 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "", (Object) null, object1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      Object object2 = new Object();
      Integer integer0 = new Integer((-862));
      Level level0 = new Level("", 444.154F, (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall((-134.0F), 7.536227F, 7.536227F, (-134.0F), (-134.0F), (-134.0F));
      Float float0 = new Float((-134.0F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall((-94.59943F), 956.599F, 0.0F, 828.263F, 0.0F, 828.263F);
      Wall wall1 = wall0.clone();
      wall1.getArcExtent();
      wall1.getHeightAtEnd();
      Integer integer0 = new Integer((-4011));
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, (-4028.0413F), 3935.3867F, 1.6693988F, 1.6693988F);
      Float float0 = new Float((double) 1.6693988F);
      wall0.getRightSideTexture();
      Float float1 = new Float(0.009999999776482582);
      wall0.setHeightAtEnd(float0);
      wall0.setWallAtEnd((Wall) null);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      Float float0 = wall0.getHeight();
      wall0.setLeftSideShininess(3935.3867F);
      wall0.setHeight(float0);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F);
      Float float0 = new Float(2645.0F);
      wall0.setArcExtent(float0);
      wall0.containsPoint(268.05F, 355.02887F, 0.0F);
      wall0.intersectsRectangle(1254.2074F, 3935.0376F, 1.0F, 2645.0F);
      wall0.getHeight();
      wall0.getRightSideTexture();
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall(1254.2074F, 2645.0F, 0.0F, (-11.37587F), 2645.0F);
      wall1.getLevel();
      wall2.setLevel((Level) null);
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 11.0F, (-4978.49F), 1135.6243F);
      wall0.clone();
      Float.sum(1.0F, (-135.60841F));
      Float.min(444.154F, 1.0F);
      Float.max(1.0F, (-1.0F));
      Float.min(1.0F, 1351.0F);
      Float float0 = Float.valueOf((-1366.0132F));
      float0.floatValue();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setRightSideShininess(0.0F);
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(6);
      wall0.setRightSideColor(integer1);
      wall0.setRightSideColor(integer1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.intersectsRectangle(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      wall0.getHeight();
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.setPattern((TextureImage) null);
      wall0.getRightSideTexture();
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), (-1.0F), 0.1F, 0.1F);
      Float float0 = Float.valueOf((-1.0F));
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle((-1.0F), 0.1F, (-1.0F), (-1.0F));
      Float float1 = new Float(0.1F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F, 3934.9019F);
      wall0.intersectsRectangle(3934.9019F, 3934.9019F, 3934.9019F, 2645.0F);
      wall0.setWallAtStart(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-134.0F), 0.0F, 0.0F, 0.0F, (-134.0F));
      Float.compare(2717.5642F, 2717.5642F);
      Float float0 = Float.valueOf(0.0F);
      wall0.setThickness(3147.67F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(3147.67F, 0.0F, (-134.0F), (-134.0F));
      wall0.getHeight();
      wall0.getLength();
      Wall wall1 = new Wall(627.10284F, 3935.0376F, 0.0F, 291.543F, 3147.67F);
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.intersectsRectangle(444.154F, 0.0F, 976.0F, 1.0F);
      Float float0 = new Float(0.0F);
      wall1.setYEnd(444.154F);
      wall1.intersectsRectangle(1000.0F, 701.2802F, 0.0F, 1.0F);
      wall0.getStartPointToEndPointDistance();
      wall1.getPattern();
      wall0.getXEnd();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, (-1622.2942F), 1.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      Float.min((-1.0F), (-1649.3948F));
      Float.max(0.0F, (-1622.2942F));
      float0.floatValue();
      wall1.setArcExtent(float0);
      wall0.intersectsRectangle((-1622.2942F), 1343.2952F, 1351.0F, (-1649.3948F));
      wall0.getHeight();
      Level level0 = new Level("X_START", (-1649.3948F), (-1622.2942F), (-579.8173F));
      wall1.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 975.6075F, 975.6075F, 0.42082238F);
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 975.6075F, 0.01F, (-1813.3507F), 975.6075F);
      wall0.getHeight();
      wall1.setHeightAtEnd((Float) null);
      wall1.setThickness(1640.0F);
      wall1.getHeight();
      Float float0 = new Float(19.17802102883);
      wall1.setHeight((Float) null);
      wall1.setWallAtEnd(wall0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-134.0F), (-134.0F), 0.0F, (-134.0F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(0.0F);
      Float float0 = new Float(3054.4046434);
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setArcExtent(float0);
      wall1.intersectsRectangle(0.010973613F, 295.552F, 0.0F, (-1701.7854F));
      wall1.getHeight();
      Level level0 = new Level("5", 3396.2698F, 548.2477F, 295.552F);
      wall1.getLength();
      wall1.clone();
      wall1.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall((-144.87358F), (-144.87358F), (-144.87358F), (-144.87358F), (-144.87358F));
      Float float0 = new Float((-144.87358F));
      wall0.setHeightAtEnd(float0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-2345.0F), 754.5489F, 841.3F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-3241.2F), 0.0F, 0.0F, 3296.339F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("ARC_EXTENT", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      propertyChangeEvent0.toString();
      propertyChangeEvent0.getPropertyName();
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.move((-3241.2F), 1698.8894F);
      Float float0 = new Float(3296.339F);
      Float.sum(2947.741F, 1698.8894F);
      wall0.setHeightAtEnd(float0);
      wall0.getXStart();
      wall0.getPattern();
      wall0.setThickness((-400.9F));
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(1509.1417F, (-2018.7334F), 1509.1417F, (-2018.7334F), (-3878.5137F));
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      Float float0 = new Float(989.36243);
      float0.floatValue();
      wall0.setHeight((Float) 989.3624F);
      wall1.setRightSideTexture((HomeTexture) null);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.setXEnd((-3878.5137F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(0.0F, 1770.661F, (-1964.48F));
      Float.sum((-1.0F), (-1847.1495F));
      wall1.setWallAtEnd(wall0);
      wall0.getHeightAtEnd();
      wall0.setArcExtent((Float) null);
      wall1.getPoints();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 444.154F, 0.0F, 701.2802F);
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(444.154F);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.setXEnd((-1.0F));
      wall0.getRightSideShininess();
      wall0.containsWallEndAt(976.0F, 1.0F, 976.0F);
      Float.sum((-1.0F), 0.0F);
      Float.min(0.0F, 444.154F);
      Float.max((-864.4818F), 0.0F);
      Float.min(1351.0F, 0.0F);
      wall0.intersectsRectangle((-32.583122F), 2078.0F, (-1698.3911F), (-1.0F));
      wall1.getHeight();
      wall0.getRightSideTexture();
      Wall wall2 = wall1.clone();
      wall2.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), (-1.0F), 0.1F, (-1.0F));
      Float float0 = Float.valueOf((-1.0F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(0.1F);
      wall0.setWallAtEnd((Wall) null);
      Float float2 = new Float((-1.0F));
      wall0.setArcExtent(float0);
      wall0.getArcExtent();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1413.3712F), 0.0F, (-1413.3712F), 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Wall wall1 = wall0.clone();
      wall1.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float((-1413.3712F));
      wall1.setHeightAtEnd(float0);
      wall1.setHeightAtEnd(float0);
      wall1.getThickness();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = 3934.9019F;
      float float1 = (-2818.1338F);
      Wall wall0 = new Wall(3934.9019F, 3934.9019F, 3934.9019F, (-2818.1338F), (-2818.1338F), 3934.9019F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2818.1338F), wall0.getThickness(), 0.01F);
      assertEquals(3934.9019F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2818.1338F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(558.38403F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3934.9019F, wall0.getXEnd(), 0.01F);
      assertEquals(6753.0356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3934.9019F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3934.9019F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(6753.0356F, wall0.getLength(), 0.01F);
      assertEquals(3934.9019F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float2 = new Float(2645.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2645.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2818.1338F), wall0.getThickness(), 0.01F);
      assertEquals(3934.9019F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2818.1338F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(558.38403F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3934.9019F, wall0.getXEnd(), 0.01F);
      assertEquals(6753.0356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3934.9019F, wall0.getHeight(), 0.01F);
      assertEquals(8.0982008E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-26495.361F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3934.9019F, wall0.getYStart(), 0.01F);
      
      float float3 = 2787.8442F;
      wall0.intersectsRectangle(float3, float1, float0, float1);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), (-1.0F), 0.1F, (-2265.12F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2265.12F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.555635F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(270.26F);
      assertEquals(270.26F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.6887665F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2265.12F), wall0.getThickness(), 0.01F);
      assertEquals(270.26F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-13.6887665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5064.2925F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(2, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.6887665F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2265.12F), wall0.getThickness(), 0.01F);
      assertEquals(270.26F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-13.6887665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5064.2925F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(2.0043437F, (-1413.3712F), 2.0043437F, (-1413.3712F), 2.0043437F);
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0043437F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0043437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0043437F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0043437F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0043437F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0043437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0043437F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0043437F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall1 = new Wall(2.0043437F, 2.0043437F, (-1413.3712F), 2.0043437F, 2.0043437F, 2.0043437F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0043437F, wall1.getXStart(), 0.01F);
      assertEquals(2.0043437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0043437F, wall1.getThickness(), 0.01F);
      assertEquals(2.0043437F, wall1.getYEnd(), 0.01F);
      assertEquals((-1413.3712F), wall1.getXEnd(), 0.01F);
      assertEquals(1415.3756F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0043437F, wall1.getHeight(), 0.01F);
      assertEquals(2.0043437F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1415.3756F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-705.6834F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Float float0 = new Float((-1413.3712F));
      assertEquals((-1413.3712F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1413.3712F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0043437F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0043437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0043437F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0043437F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 3935.3867F);
      assertEquals(3935.3867F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = wall0.intersectsRectangle(1254.2074F, 3935.3867F, 1.0F, 3935.3867F);
      assertFalse(boolean0);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float1 = wall0.getHeight();
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3935.3867F, (float)float1, 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      boolean boolean1 = Float.isFinite(1254.2074F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float float2 = new Float((double) 3935.3867F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3935.3867F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float1);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3935.3867F, wall1.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall1.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3935.3867F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3935.3867F, wall1.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall1.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3935.3867F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2876.5F), 1.0F, (-1622.2942F), 1.0F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2249.397F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      float float1 = Float.sum((-2876.5F), (-1649.3948F));
      assertEquals((-4525.8945F), float1, 0.01F);
      
      float float2 = Float.min((-1.0F), (-1.0F));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      float float3 = Float.max((-1.0F), (-1622.2942F));
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      
      float float4 = Float.min((-4525.8945F), (-4525.8945F));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals((-4525.8945F), float4, 0.01F);
      
      float float5 = float0.floatValue();
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1622.2942F), 1343.2952F, 1351.0F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float6 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float6);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1254.2074F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1254.2074F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall2.getYStart(), 0.01F);
      assertEquals((-1.0241367E19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.63312384E16F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1622.2942F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNotNull(wall2);
      
      boolean boolean1 = wall2.containsWallEndAt(1343.2952F, (-530.01904F), 3169.64F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1254.2074F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1254.2074F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall2.getYStart(), 0.01F);
      assertEquals((-1.0241367E19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.63312384E16F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1622.2942F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1254.2074F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1254.2074F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall2.getYStart(), 0.01F);
      assertEquals((-1.0241367E19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.63312384E16F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1622.2942F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      Level level0 = wall2.getLevel();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall0.getYEnd(), 0.01F);
      assertEquals(1254.2074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2249.397F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.63312384E16F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1254.2074F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1254.2074F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1622.2942F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0241367E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1254.2074F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1254.2074F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2876.5F), wall2.getYStart(), 0.01F);
      assertEquals((-1.0241367E19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.63312384E16F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1622.2942F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall(3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3935.0376F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.0376F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.0376F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.0376F, wall0.getYStart(), 0.01F);
      assertEquals(3935.0376F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3935.0376F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.0376F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3935.0376F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(2645.0F);
      assertEquals(2645.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(3935.0376F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.0376F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.0376F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.0376F, wall0.getYStart(), 0.01F);
      assertEquals(3935.0376F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3935.0376F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.0376F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3935.0376F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1254.2074F, 3935.0376F, 1.0F, 2645.0F);
      assertFalse(boolean0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(3935.0376F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.0376F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.0376F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.0376F, wall0.getYStart(), 0.01F);
      assertEquals(3935.0376F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3935.0376F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.0376F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3935.0376F, wall0.getXStart(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3935.0376F, (float)float1, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(3935.0376F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.0376F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.0376F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.0376F, wall0.getYStart(), 0.01F);
      assertEquals(3935.0376F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3935.0376F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.0376F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3935.0376F, wall0.getXStart(), 0.01F);
      assertNotNull(float1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add(wall0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(3935.0376F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.0376F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.0376F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.0376F, wall0.getYStart(), 0.01F);
      assertEquals(3935.0376F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3935.0376F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.0376F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3935.0376F, wall0.getXStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertNotNull(list2);
      
      List<Wall> list3 = Wall.clone(list2);
      assertFalse(list0.equals((Object)list1));
      assertFalse(list0.equals((Object)list2));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertNotNull(list3);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      try { 
        linkedList0.addAll(33, (Collection<? extends Wall>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 33, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-144.874F));
      assertEquals((-144.874F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getHeight(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(2645.0F);
      assertEquals(2645.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float1 = new Float((double) 2645.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2645.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1254.2074F, 3935.3867F, 1.0F, 2645.0F);
      assertFalse(boolean0);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3935.3867F, (float)float2, 0.01F);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(float2);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3935.3867F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall1.getHeight(), 0.01F);
      assertEquals(2645.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(3935.3867F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3935.3867F, wall1.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall1.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float3 = new Float((double) 2645.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(2645.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3935.3867F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall1.getHeight(), 0.01F);
      assertEquals(2645.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(3935.3867F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3935.3867F, wall1.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall1.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3935.3867F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3935.3867F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(3935.3867F, wall2.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall2.getYEnd(), 0.01F);
      assertEquals(2645.0F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotNull(wall2);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3935.3867F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall1.getHeight(), 0.01F);
      assertEquals(2645.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(3935.3867F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3935.3867F, wall1.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall1.getYStart(), 0.01F);
      assertEquals(3935.3867F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3935.3867F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3935.3867F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(3935.3867F, wall2.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(3935.3867F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall2.getYEnd(), 0.01F);
      assertEquals(2645.0F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(3935.3867F, wall0.getXStart(), 0.01F);
      assertEquals(3935.3867F, wall0.getThickness(), 0.01F);
      assertEquals(3935.3867F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3935.3867F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2645.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3935.3867F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3935.3867F, wall0.getYEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getXEnd(), 0.01F);
      assertEquals(3935.3867F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 3611.5F, 0.0F, 3611.5F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1805.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.5F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3611.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.5F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1805.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.5F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3611.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.5F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      
      Wall wall1 = new Wall(1306.1F, 417.051F, 417.051F, 417.051F, (-1559.2F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(889.04895F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(417.051F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(417.051F, wall1.getXEnd(), 0.01F);
      assertEquals(417.051F, wall1.getYEnd(), 0.01F);
      assertEquals((-1559.2F), wall1.getThickness(), 0.01F);
      assertEquals(861.5755F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(417.051F, wall1.getYStart(), 0.01F);
      assertEquals(889.04895F, wall1.getLength(), 0.01F);
      assertEquals(1306.1F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setXEnd(0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1306.09F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(417.051F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(417.051F, wall1.getYEnd(), 0.01F);
      assertEquals((-1559.2F), wall1.getThickness(), 0.01F);
      assertEquals(653.055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(417.051F, wall1.getYStart(), 0.01F);
      assertEquals(1306.09F, wall1.getLength(), 0.01F);
      assertEquals(1306.1F, wall1.getXStart(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(3444.0F, 1.0F, (-1.0F), 961.0157F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1306.09F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(417.051F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(417.051F, wall1.getYEnd(), 0.01F);
      assertEquals((-1559.2F), wall1.getThickness(), 0.01F);
      assertEquals(653.055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(417.051F, wall1.getYStart(), 0.01F);
      assertEquals(1306.09F, wall1.getLength(), 0.01F);
      assertEquals(1306.1F, wall1.getXStart(), 0.01F);
      
      Float float0 = new Float(2562.5232F);
      assertEquals(2562.5232F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1805.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.5F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3611.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.5F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle((-1941.214F), 0.1F, 0.02F, 417.051F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1805.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.5F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3611.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.5F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(3611.5F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1805.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.5F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3611.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.5F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1306.09F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(417.051F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(417.051F, wall1.getYEnd(), 0.01F);
      assertEquals((-1559.2F), wall1.getThickness(), 0.01F);
      assertEquals(653.055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(417.051F, wall1.getYStart(), 0.01F);
      assertEquals(1306.09F, wall1.getLength(), 0.01F);
      assertEquals(1306.1F, wall1.getXStart(), 0.01F);
      assertNull(textureImage0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1805.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.5F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3611.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.5F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(integer0);
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1306.09F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(417.051F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(417.051F, wall1.getYEnd(), 0.01F);
      assertEquals((-1559.2F), wall1.getThickness(), 0.01F);
      assertEquals(653.055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(417.051F, wall1.getYStart(), 0.01F);
      assertEquals(1306.09F, wall1.getLength(), 0.01F);
      assertEquals(1306.1F, wall1.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F), (-144.874F));
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.874F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-144.874F));
      assertEquals((-144.874F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setRightSideShininess((-144.874F));
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.874F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-144.874F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.874F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-144.874F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-144.874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-144.874F), wall0.getXEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getYEnd(), 0.01F);
      assertEquals((-144.874F), wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-144.874F), wall0.getYStart(), 0.01F);
      assertEquals((-144.874F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-144.874F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.874F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-144.874F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-144.874F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1413.3712F), 0.0F, (-1413.3712F), 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture1);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((-1413.3712F));
      assertEquals((-1413.3712F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1413.3712F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1413.3712F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      float float1 = wall1.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1413.3712F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1413.3712F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1413.3712F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1413.3712F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1413.3712F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(1509.1417F, (-2018.7334F), 1509.1417F, (-2018.7334F), (-3878.5137F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1509.1417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1509.1417F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1509.1417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1509.1417F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertEquals(1509.1417F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1509.1417F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1509.1417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1509.1417F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertEquals(1509.1417F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1509.1417F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(textureImage0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1509.1417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1509.1417F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      Float float0 = new Float(989.36243);
      assertEquals(989.3624F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(989.3624F, float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(989.3624F, float2, 0.01F);
      
      wall0.setHeight((Float) 989.3624F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1509.1417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1509.1417F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1509.1417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1509.1417F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertEquals(1509.1417F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1509.1417F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setXEnd(2356.7993F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertEquals(1509.1417F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1509.1417F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      
      wall1.setXEnd((-3878.5137F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5387.6553F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5387.6553F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1184.686F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3878.5137F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float float3 = wall0.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 1770.661F, (-1964.48F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float4 = Float.sum((-1.0F), (-1847.1495F));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-1848.1495F), float4, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(847.6576F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5387.6553F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5387.6553F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1184.686F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3878.5137F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float float5 = Float.min(1.0F, 444.154F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(1.0F, float5, 0.01F);
      
      float float6 = Float.max((-40.0F), (-1384.7168F));
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertEquals((-40.0F), float6, 0.01F);
      
      Float float7 = new Float((double) 1770.661F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals(1770.661F, (float)float7, 0.01F);
      assertNotNull(float7);
      
      int int0 = Float.floatToIntBits((-492.43F));
      assertEquals((-1007274230), int0);
      
      int int1 = Float.floatToIntBits((-492.43F));
      assertTrue(int1 == int0);
      assertEquals((-1007274230), int1);
      
      wall0.setArcExtent((Float) (-492.43F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2197.9387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(226595.58F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-492.43F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(989.3624F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2197.9387F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3878.5137F), wall0.getThickness(), 0.01F);
      assertEquals(226595.58F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1509.1417F, wall0.getXStart(), 0.01F);
      assertEquals(847.6576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1932.9705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall0.getYEnd(), 0.01F);
      assertEquals(2356.7993F, wall0.getXEnd(), 0.01F);
      assertEquals((-492.43F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2018.7334F), wall1.getYStart(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5387.6553F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2018.7334F), wall1.getYEnd(), 0.01F);
      assertEquals(1509.1417F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3878.5137F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5387.6553F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1184.686F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3878.5137F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F, 3935.0376F);
      Float float0 = new Float(2645.0F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(1254.2074F, 3935.0376F, 1.0F, 2645.0F);
      Float float1 = new Float(2645.0F);
      wall0.setArcExtent(float1);
      wall0.getLength();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Wall wall1 = wall0.clone();
      wall1.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall1.getXStart();
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 596.0F, 0.1F, 596.0F);
      wall0.setArcExtent((Float) null);
      float float0 = wall0.getRightSideShininess();
      assertEquals(596.0F, wall0.getThickness(), 0.01F);
      assertEquals(595.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 445.0586F, 0.0F, 701.2802F);
      Wall wall1 = new Wall(445.0586F, 701.2802F, 701.2802F, 0.0F, 445.0586F, 0.0F);
      wall1.getPattern();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.setXEnd(445.0586F);
      wall0.setWallAtStart(wall1);
      assertEquals(445.0586F, wall1.getXEnd(), 0.01F);
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(445.0586F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(671.7244F, 671.7244F, (-1.0F), 639.1167F, 0.1F);
      Wall wall1 = new Wall((-1.0F), 0.1F, 671.7244F, 0.1F, 671.7244F, 671.7244F);
      Wall wall2 = wall1.clone();
      wall0.getHeightAtEnd();
      wall2.setHeightAtEnd((Float) null);
      wall0.setWallAtEnd(wall2);
      boolean boolean0 = wall2.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(671.7244F, wall2.getHeight(), 0.01F);
      assertNotSame(wall2, wall1);
      assertEquals(672.7244F, wall2.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.getPoints();
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(673.5142F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(351.20053F, 351.20053F, 351.20053F, 351.20053F, (-2599.0F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Float.compare(1.0F, 1.0F);
      Float.compare(0, 1.0F);
      wall0.setArcExtent((Float) 1.0F);
      Wall wall1 = new Wall((-1.0F), (-1.0F), (-1.0F), 0, (-1), (-1559.2F));
      Float float0 = wall1.getHeight();
      Float float1 = new Float((double) (-1.0F));
      wall1.setHeight(float1);
      wall0.setWallAtStart(wall1);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      
      wall0.getArcExtent();
      wall1.setHeight(float0);
      Integer integer0 = Integer.valueOf((-4511));
      wall1.setRightSideColor(integer0);
      wall0.getLeftSideShininess();
      wall1.getLeftSideColor();
      assertEquals((-1559.2F), wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F, 3935.3867F);
      Float float0 = new Float((double) 3935.3867F);
      Float float1 = new Float((double) 1254.2074F);
      wall0.setHeightAtEnd(float1);
      wall0.setWallAtEnd((Wall) null);
      boolean boolean0 = wall0.isTrapezoidal();
      assertTrue(boolean0);
  }
}
