/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:05:36 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.function.Function;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0);
      Object[] objectArray0 = new Object[5];
      vec0.insertFirst((Vec<Object>) null);
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      vec0.push(vec1);
      vec0.pop();
      vec1.push(objectArray0[1]);
      vec0.iterator();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        vec1.remove(integer0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      IVec<String> iVec0 = readOnlyVec0.clone();
      // Undeclared exception!
      try { 
        vec0.copyTo(iVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e,!`\"H,E,";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.sat4j.core.Vec";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.contains("");
      Vec<Object> vec2 = new Vec<Object>();
      vec2.clone();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.iterator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>(1, 1);
      // Undeclared exception!
      try { 
        vec0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3434);
      vec0.shrinkTo(3434);
      vec0.ensure(3434);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 3434, (-1), 1, 3434).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(662, (Object) null);
      vec0.toString();
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      int int0 = 1280;
      // Undeclared exception!
      try { 
        vec1.moveTo(662, 1280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1280
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Abo*E";
      String string0 = "Oja0D.";
      stringArray0[1] = "Oja0D.";
      stringArray0[2] = "org.sat4j.core.Vec";
      stringArray0[3] = "*'(>W,";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.shrinkTo(1);
      vec0.indexOf("HWIkhm+u]4G5l|*");
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 5);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec0);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(readOnlyVec0);
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>((IVec<String>) null);
      // Undeclared exception!
      try { 
        readOnlyVec3.pop();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ReadOnlyVec<Object> readOnlyVec0 = null;
      Vec<ReadOnlyVec<Object>> vec0 = null;
      try {
        vec0 = new Vec<ReadOnlyVec<Object>>((-1), (ReadOnlyVec<Object>) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        vec0.set((-1), (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      vec0.size();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      int int0 = 0;
      Integer.valueOf(3453);
      Integer integer0 = new Integer(3453);
      integer0.intValue();
      vec0.set(0, (Integer) 3453);
      int int1 = 1;
      IVec<Object> iVec0 = (IVec<Object>) mock(IVec.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(iVec0);
      // Undeclared exception!
      try { 
        readOnlyVec0.removeFromLast(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.push("^$9IO5:mL~u");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 5);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec2);
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec2);
      readOnlyVecArray0[4] = readOnlyVec4;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec1.hashCode();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.sort((Comparator<Object>) null);
      vec0.sort(2620, 2620, (Comparator<Object>) null);
      vec0.unsafePush("#m,vf9wE");
      vec0.shrink((-2658));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#m,vf9wE";
      stringArray0[1] = "#m,vf9wE";
      stringArray0[2] = "#m,vf9wE";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.toString();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      vec0.iterator();
      vec0.insertFirstWithShifting(integer0);
      Object object0 = new Object();
      vec0.indexOf(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.sat4j.core.Vec";
      stringArray0[1] = "org.sat4j.core.Vec";
      stringArray0[2] = "*'(>W,";
      stringArray0[3] = "Abo*E";
      stringArray0[4] = "s$u'~v6GbWEH^";
      stringArray0[5] = "*'(>W,";
      stringArray0[6] = "org.sat4j.core.Vec";
      stringArray0[7] = "*'(>W,";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<String> vec1 = new Vec<String>(1362, "*'(>W,");
      vec1.shrinkTo(195);
      vec0.indexOf("*'(>W,");
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      IVec<String> iVec0 = vec1.push(".V%ZwESP");
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(iVec0);
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(readOnlyVec0);
      Vec<Object> vec2 = new Vec<Object>(stringArray0);
      vec2.pop();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(0, vec2);
      vec3.indexOf(vec2);
      vec1.equals("s$u'~v6GbWEH^");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3434);
      vec0.shrinkTo(3434);
      vec0.ensure(3434);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3434, 26, 2388, 27, 26).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 6);
      Vec<Object> vec0 = new Vec<Object>(662);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[2] = readOnlyVec2;
      Vec<Object> vec1 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(vec1);
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec3);
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(readOnlyVec2);
      readOnlyVecArray0[5] = readOnlyVec5;
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec2.indexOf(readOnlyVec1);
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 3);
      vecArray0[1] = vec0;
      Vec<Object> vec3 = new Vec<Object>();
      vecArray0[2] = vec3;
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(vecArray0);
      vec4.delete(0);
      vec0.indexOf((Object) null);
      vec0.selectionSort(1280, 312, (Comparator<Object>) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer(0);
      vec0.unsafePush(integer0);
      Vec<String> vec1 = new Vec<String>(0);
      vec1.clear();
      vec1.sortUnique((Comparator<String>) null);
      Vec<String> vec2 = new Vec<String>(0, "");
      vec1.copyTo((IVec<String>) vec2);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(0, vec1);
      vec2.sort(0, 0, (Comparator<String>) null);
      vec3.hashCode();
      int int0 = 0;
      vec1.selectionSort(0, 0, (Comparator<String>) null);
      // Undeclared exception!
      try { 
        vec2.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Object> vec1 = new Vec<Object>(357, comparator1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, ",");
      IVec<String> iVec0 = vec0.clone();
      vec0.equals(",");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ",";
      objectArray0[6] = (Object) iVec0;
      objectArray0[2] = (Object) ",";
      Vec<String> vec1 = new Vec<String>();
      objectArray0[3] = (Object) vec1;
      objectArray0[4] = (Object) vec0;
      vec1.growTo(0, ",");
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.pop();
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 2);
      vecArray0[0] = vec0;
      vecArray0[1] = vec1;
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(vecArray0);
      Integer[] integerArray0 = new Integer[3];
      vec3.copyTo((IVec<Vec<String>>) vec3);
      Integer.valueOf(3845);
      Integer integer0 = Integer.valueOf(3845);
      integer0.toString();
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((-123));
      integer1.intValue();
      integerArray0[1] = (Integer) (-123);
      Integer integer2 = new Integer((-2654));
      integerArray0[2] = integer2;
      Vec<Integer> vec4 = new Vec<Integer>(integerArray0);
      vec3.equals(vec4);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      // Undeclared exception!
      try { 
        vec1.removeFromLast(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      Vec<String> vec0 = new Vec<String>(0);
      String string0 = "org.sat4j.core.Vec$1";
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.Vec$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1, "org.sat4j.core.ReadOnlyVec");
      vec0.hashCode();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1086));
      integerArray0[0] = integer0;
      try { 
        Integer.parseInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Abo*E";
      stringArray0[1] = "Oja0D.";
      stringArray0[2] = "org.sat4j.core.Vec";
      stringArray0[3] = "*'(>W,";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.shrinkTo(1);
      vec0.indexOf("HWIkhm+u]4G5l|*");
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 5);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec0);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(readOnlyVec0);
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      vec1.pop();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2915, vec1);
      // Undeclared exception!
      try { 
        vec2.indexOf(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.remove("(p2rVp.wg");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.get(1280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1280
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.selectionSort(0, 2028, (Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.indexOf((ReadOnlyVec<Object>) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = 454;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.sat4j.core.Vec$1";
      objectArray0[1] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(454, 5, 5, (-1437), 5).when(comparator0).compare(any() , any());
      vec1.sort(comparator0);
      int int1 = 2620;
      int int2 = 2229;
      int int3 = 1;
      String string0 = "org.sat4j.core.ReadOnlyVec";
      try { 
        Integer.parseInt("org.sat4j.core.ReadOnlyVec");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.sat4j.core.ReadOnlyVec\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      vec1.growTo((-1539), readOnlyVec0);
      vec1.hashCode();
      Vec<Integer> vec2 = new Vec<Integer>();
      Vec<Object> vec3 = new Vec<Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec3.sort((-1539), 1, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -769
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|wOpn,[<";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sortUnique((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(919, (Comparable<Object>) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0);
      vec0.shrinkTo(1356);
      Vec<Object> vec1 = new Vec<Object>(0);
      // Undeclared exception!
      try { 
        vec0.insertFirst(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(2105, vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2105, 2105, 2105, (-702), 541).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3434);
      vec0.shrinkTo(3434);
      vec0.ensure(3434);
      vec0.iterator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>();
      vec1.moveTo(1280, 1280);
      Vec<Integer> vec2 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec2.get(1280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1280
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1876, (Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>();
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(0);
      vec1.toString();
      // Undeclared exception!
      try { 
        vec0.remove("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 1357;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e,!`\"H,E,";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.sat4j.core.Vec";
      stringArray0[4] = "";
      stringArray0[5] = "rV+{q$8Z+bO&V:";
      stringArray0[6] = "";
      stringArray0[7] = "org.sat4j.core.Vec$1";
      stringArray0[8] = ",";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      int int1 = (-1391);
      Vec<Object> vec2 = null;
      try {
        vec2 = new Vec<Object>((-1391), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.equals("O9qOu,Rq9'$f=B1'[");
      Vec<String> vec1 = new Vec<String>();
      vec1.insertFirst("O9qOu,Rq9'$f=B1'[");
      Vec<Object> vec2 = new Vec<Object>(388, vec1);
      // Undeclared exception!
      try { 
        vec2.sort((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(0);
      vec0.moveTo((IVec<Comparable<String>>) vec0);
      vec0.isEmpty();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      // Undeclared exception!
      try { 
        vec1.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 0;
      vec0.shrink(0);
      int int1 = 0;
      IVec<Object> iVec0 = vec0.clone();
      vec0.ensure(0);
      vec0.insertFirstWithShifting((Object) null);
      Vec<String> vec1 = new Vec<String>();
      vec1.iterator();
      vec0.shrinkTo(0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(iVec0);
      vec0.clear();
      // Undeclared exception!
      try { 
        readOnlyVec0.push((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      vec0.clear();
      Vec<Object> vec1 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(2620, 2620, comparator0);
      Integer integer0 = new Integer(0);
      vec1.unsafePush(integer0);
      Integer integer1 = new Integer(15);
      Vec<Object> vec2 = new Vec<Object>(2492, integer1);
      vec2.shrink(2477);
      Vec<String> vec3 = null;
      try {
        vec3 = new Vec<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 1357;
      int int1 = 1388;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(1357, 1388, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1372
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      int int0 = 1487;
      Vec<Integer> vec1 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec1.delete(1487);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1487
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(3542);
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      vec0.growTo(862, vec1);
      vec0.shrinkTo(3542);
      Vec<Object> vec2 = new Vec<Object>(3542);
      vec0.push(vec2);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}S_3k1zxXLl\"8EK ";
      stringArray0[1] = "tXnpH@oZn~`L$(,]";
      stringArray0[2] = "_h!~,_#={>G5";
      stringArray0[3] = ",";
      stringArray0[4] = "c\"EA3sN5Tm{";
      stringArray0[5] = "";
      stringArray0[6] = "4pP/=QkD-qR,";
      stringArray0[7] = "p";
      stringArray0[8] = "F!|%_";
      Vec<String> vec4 = new Vec<String>(stringArray0);
      vec3.push(vec4);
      Vec<ReadOnlyVec<Object>> vec5 = new Vec<ReadOnlyVec<Object>>(3553);
      vec5.moveTo(3542, 862);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(0);
      vec0.moveTo((IVec<Comparable<String>>) vec0);
      Vec<String> vec1 = new Vec<String>(0, ",(Yh");
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(0);
      vec2.iterator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(5, readOnlyVec0);
      vec1.indexOf(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>();
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(1494);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-1648));
      integerArray0[0] = integer0;
      vec1.copyTo(integerArray0);
      Vec<String> vec2 = new Vec<String>(4344);
      vec2.shrinkTo(4344);
      Vec<Vec<Object>> vec3 = null;
      try {
        vec3 = new Vec<Vec<Object>>((int) integerArray0[0]);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>();
      vec0.insertFirstWithShifting(integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5);
      IVec<String> iVec0 = vec0.clone();
      vec0.clear();
      vec0.equals(iVec0);
      Vec<String> vec1 = new Vec<String>();
      vec1.insertFirst("");
      vec0.growTo(1, "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iVec0;
      objectArray0[1] = (Object) "";
      Integer integer0 = new Integer((-1970));
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) iVec0;
      objectArray0[4] = (Object) "";
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.pop();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(5);
      vec0.clone();
      vec0.clear();
      Integer integer0 = new Integer(5);
      Vec<Object> vec1 = new Vec<Object>(5, integer0);
      vec1.insertFirstWithShifting(integer0);
      vec1.delete(0);
      vec1.toArray();
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec2.clear();
      vec1.iterator();
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(5, vec0);
      vec3.toString();
      Vec<Integer> vec4 = new Vec<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.selectionSort((-1449), (-1449), comparator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|wOpn,[<";
      stringArray0[1] = "c[kR.~yKhsUU+";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.contains("|wOpn,[<");
      Vec<Object> vec1 = new Vec<Object>();
      vec1.clone();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.clear();
      vec0.shrinkTo(144);
      vec0.equals(comparator0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(1);
      Vec<Object> vec2 = new Vec<Object>(139, vec0);
      // Undeclared exception!
      try { 
        vec2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(28, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(28, 28, (-883), (-883), 28).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.shrinkTo(381);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 190
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|wOpn,[<";
      stringArray0[1] = "c[kR.~yKhsUU+";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3769), (-231)).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.toString();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      vec1.equals("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      vec0.insertFirst(integer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(411, vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      try { 
        vec0.selectionSort(1, 1416, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3133), 1416, 248).when(comparator0).compare(any() , any());
      // Undeclared exception!
      try { 
        vec0.selectionSort(1, 1416, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1440);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%@l[~FPBG.";
      stringArray0[1] = "%@l[~FPBG.";
      stringArray0[2] = "%@l[~FPBG.";
      stringArray0[3] = "%@l[~FPBG.";
      stringArray0[4] = "%@l[~FPBG.";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      vec1.clear();
      vec1.contains("%@l[~FPBG.");
      Vec<Object> vec2 = new Vec<Object>();
      vec2.clone();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(0);
      ReadOnlyVec<Comparable<String>> readOnlyVec0 = new ReadOnlyVec<Comparable<String>>(vec0);
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Comparable<String>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(602, readOnlyVec0);
      // Undeclared exception!
      try { 
        vec0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3434);
      vec0.shrinkTo(3434);
      vec0.ensure(3434);
      int int0 = (-4189);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3434, (-4189), 3434, 3434, 3434).when(comparator0).compare(any() , any());
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      vec1.moveTo(358, 358);
      // Undeclared exception!
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(662);
      vec0.ensure(662);
      int int0 = 1280;
      // Undeclared exception!
      try { 
        vec0.moveTo(662, 1280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1280
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.moveTo(1476, 1476);
      Vec<Object> vec1 = new Vec<Object>(1476);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1476, vec1);
      vec2.shrink(1476);
      String[] stringArray0 = new String[22];
      stringArray0[0] = "a:IGz8?";
      stringArray0[1] = "org.sat4j.core.Vec";
      stringArray0[2] = "!JAg4OBc";
      stringArray0[3] = "w-qAQkctYlk` >";
      Vec<String> vec3 = new Vec<String>(stringArray0);
      vec3.get(2);
      vec1.growTo(1476, "!JAg4OBc");
      // Undeclared exception!
      try { 
        vec1.removeFromLast("!JAg4OBc");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      vec1.hashCode();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer.toBinaryString(2517);
      Integer.toBinaryString(2517);
      vec0.clone();
      vec0.insertFirstWithShifting((Integer) 2517);
      vec0.toString();
      vec0.toString();
      vec0.size();
      Vec<Comparable<Integer>> vec1 = new Vec<Comparable<Integer>>(1);
      Integer integer0 = new Integer(1);
      vec1.unsafePush(integer0);
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 6);
      Vec<String> vec2 = new Vec<String>();
      vecArray0[0] = vec2;
      Vec<String> vec3 = new Vec<String>();
      vecArray0[1] = vec3;
      Vec<String> vec4 = new Vec<String>();
      vecArray0[2] = vec4;
      Vec<String> vec5 = new Vec<String>(1);
      vecArray0[3] = vec5;
      Vec<Object> vec6 = new Vec<Object>(2517, vec3);
      vec6.iterator();
      Vec<Vec<String>> vec7 = new Vec<Vec<String>>(2517, vec4);
      vec7.toString();
      Vec<Integer> vec8 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.selectionSort((-1449), 15, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|wOpn,[<";
      stringArray0[1] = "c[kR.~yKhsUU+";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 1);
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      vec1.shrinkTo(1080);
      readOnlyVecArray0[0] = readOnlyVec0;
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      // Undeclared exception!
      try { 
        vec2.indexOf(readOnlyVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vec<Integer> vec0 = null;
      try {
        vec0 = new Vec<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.contains("%@l[~FPBG.");
      Vec<Object> vec1 = new Vec<Object>();
      vec1.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 4);
      Vec<String> vec0 = new Vec<String>(1547);
      vecArray0[0] = vec0;
      Vec<String> vec1 = new Vec<String>();
      vecArray0[1] = vec1;
      Vec<String> vec2 = new Vec<String>(1547, "");
      vecArray0[2] = vec2;
      Vec<String> vec3 = new Vec<String>(1, "");
      vecArray0[3] = vec3;
      Vec<Vec<String>> vec4 = new Vec<Vec<String>>(vecArray0);
      vec4.shrinkTo(1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, ",");
      vec0.clone();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(0);
      Vec<Object> vec1 = new Vec<Object>(5, integer1);
      vec1.insertFirstWithShifting(",");
      vec1.delete(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",";
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.toArray();
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 2);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      vec1.iterator();
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(0, vec0);
      vec3.toString();
      Vec<Integer> vec4 = new Vec<Integer>();
      Comparator<Integer> comparator0 = Comparator.naturalOrder();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function2 = function0.compose((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = function2.andThen((Function<? super Object, ?>) function0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator2 = comparator0.thenComparing((Function<? super Integer, ?>) function3, (Comparator<? super Object>) comparator1);
      vec4.selectionSort(0, 0, comparator2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(311);
      Vec<String> vec1 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(662, readOnlyVec0);
      String string0 = vec2.toString();
      Vec<Comparable<String>> vec3 = new Vec<Comparable<String>>(311, string0);
      vec3.remove(string0);
      int int0 = new Integer(662);
      Vec<String> vec4 = new Vec<String>(2007);
      vec1.insertFirst("W'*6]1iha=GO;YPs*x");
      Vec<Vec<Object>> vec5 = new Vec<Vec<Object>>();
      Vec<Vec<String>> vec6 = new Vec<Vec<String>>();
      vec6.shrinkTo(0);
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) "W'*6]1iha=GO;YPs*x";
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec1;
      objectArray0[3] = (Object) readOnlyVec0;
      Vec<Object> vec7 = new Vec<Object>(objectArray0);
      Vec<Object> vec8 = new Vec<Object>(objectArray0);
      vec8.last();
      vec7.remove((Object) null);
      vec6.push(vec4);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = 1357;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e,!`\"H,E,";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.sat4j.core.Vec";
      stringArray0[4] = "";
      stringArray0[5] = "rV+{q$8Z+bO&V:";
      stringArray0[6] = "";
      stringArray0[7] = "org.sat4j.core.Vec$1";
      stringArray0[8] = ",";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1357, 1283, 1357, 1283, 1283).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      int int1 = (-1391);
      Vec<Object> vec2 = null;
      try {
        vec2 = new Vec<Object>((-1391), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 1);
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      vec0.removeFromLast(readOnlyVecArray0[0]);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.clear();
      vec0.growTo(0, vec1);
      vec0.iterator();
      Vec<Object> vec2 = new Vec<Object>();
      vec0.insertFirstWithShifting(vec2);
      vec0.clear();
      vec0.clone();
      vec0.insertFirstWithShifting((Vec<Object>) null);
      Vec<String> vec3 = new Vec<String>();
      vec3.toString();
      vec3.contains("=p^ZY= ");
      Vec<String> vec4 = new Vec<String>();
      vec2.push(vec4);
      Vec<Integer> vec5 = new Vec<Integer>();
      Integer.valueOf((-390));
      Integer integer0 = new Integer((-390));
      integer0.toString();
      vec5.insertFirstWithShifting(integer0);
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 8);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec4);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec3);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(readOnlyVec1);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec4);
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(readOnlyVec3);
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<String> readOnlyVec5 = new ReadOnlyVec<String>(vec3);
      readOnlyVecArray0[5] = readOnlyVec5;
      ReadOnlyVec<String> readOnlyVec6 = new ReadOnlyVec<String>(readOnlyVec0);
      readOnlyVecArray0[6] = readOnlyVec6;
      ReadOnlyVec<String> readOnlyVec7 = new ReadOnlyVec<String>(readOnlyVec2);
      readOnlyVecArray0[7] = readOnlyVec7;
      Vec<ReadOnlyVec<String>> vec6 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      // Undeclared exception!
      try { 
        vec6.delete(3171);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3171
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer.toBinaryString(2517);
      Integer.toBinaryString(2517);
      vec0.clone();
      vec0.insertFirstWithShifting((Integer) 2517);
      vec0.toString();
      vec0.toString();
      vec0.size();
      Vec<Comparable<Integer>> vec1 = new Vec<Comparable<Integer>>(1);
      Integer integer0 = new Integer(1);
      vec1.unsafePush(integer0);
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 6);
      Vec<String> vec2 = new Vec<String>();
      vecArray0[0] = vec2;
      Vec<String> vec3 = new Vec<String>();
      vecArray0[1] = vec3;
      Vec<String> vec4 = new Vec<String>();
      vecArray0[2] = vec4;
      Vec<String> vec5 = new Vec<String>(1);
      vecArray0[3] = vec5;
      Vec<String> vec6 = new Vec<String>(15, "");
      vecArray0[4] = vec6;
      Vec<String> vec7 = new Vec<String>(1);
      vecArray0[5] = vec7;
      Vec<Vec<String>> vec8 = new Vec<Vec<String>>(vecArray0);
      vec8.toString();
      Vec<Object> vec9 = new Vec<Object>(0);
      vec9.shrinkTo(0);
      Vec<String> vec10 = new Vec<String>(47);
      vec2.copyTo((IVec<String>) vec10);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.get(1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "(<Y";
      Integer integer0 = new Integer(1277);
      objectArray0[1] = (Object) integer0;
      Integer[] integerArray0 = new Integer[0];
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer integer1 = new Integer(255);
      objectArray0[3] = (Object) integer1;
      Integer integer2 = new Integer(0);
      Object object2 = new Object();
      Object object3 = new Object();
      objectArray0[4] = object3;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0, vec1);
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.insertFirst((ReadOnlyVec<Object>) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1440);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%@l[~FPBG.";
      stringArray0[1] = "%@l[~FPBG.";
      stringArray0[2] = "%@l[~FPBG.";
      stringArray0[3] = "%@l[~FPBG.";
      stringArray0[4] = "%@l[~FPBG.";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 1440, (-598), (-2084), (-598)).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      vec1.clear();
      vec1.contains("%@l[~FPBG.");
      Vec<Object> vec2 = new Vec<Object>();
      vec2.clone();
      vec0.contains((String) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 5);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.sat4j.core.Vec";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec0.clear();
      vec1.shrinkTo(15);
      vec1.indexOf("");
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec1);
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec1);
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(readOnlyVec3);
      Vec<String> vec2 = new Vec<String>(stringArray0);
      ReadOnlyVec<String> readOnlyVec5 = new ReadOnlyVec<String>(vec2);
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      Vec<Object> vec4 = new Vec<Object>(readOnlyVecArray0);
      vec4.pop();
      Vec<Vec<Object>> vec5 = new Vec<Vec<Object>>(653, vec3);
      vec5.indexOf(vec4);
      vec1.equals("org.sat4j.core.Vec");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, ",");
      IVec<String> iVec0 = vec0.clone();
      vec0.equals(",");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ",";
      objectArray0[1] = (Object) iVec0;
      objectArray0[2] = (Object) ",";
      Vec<String> vec1 = new Vec<String>();
      objectArray0[3] = (Object) vec1;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.pop();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.clone();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      vec0.growTo(310, integer0);
      vec0.insertFirstWithShifting(integer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.moveTo(1476, 1476);
      Vec<Object> vec1 = new Vec<Object>(2);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1476, vec1);
      vec2.shrink(1476);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a:IGz8?";
      stringArray0[1] = "org.sat4j.core.Vec";
      stringArray0[2] = "!JAg4OBc";
      stringArray0[3] = "w-qAQkctYlk` >";
      Vec<String> vec3 = new Vec<String>(stringArray0);
      vec3.get(2);
      vec1.growTo(1476, "!JAg4OBc");
      // Undeclared exception!
      try { 
        vec1.removeFromLast((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object> vec1 = new Vec<Object>(20, "@u}ZmHa6$@eC&*");
      vec1.shrink((-1971));
      vec1.equals(vec0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.toString();
      Vec<String> vec1 = new Vec<String>(1440, "");
      vec1.push("/.ox>76a0%;z3");
      // Undeclared exception!
      try { 
        vec1.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1440);
      vec0.insertFirst("6c");
      vec0.growTo(1440, "6c");
      vec0.contains("%@l[~FPBG.");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(2484);
      Vec<String> vec1 = new Vec<String>(2484);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2484, vec1);
      vec2.iterator();
      Object object0 = null;
      // Undeclared exception!
      try { 
        vec1.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      vec1.growTo((-1539), readOnlyVec0);
      vec1.hashCode();
      Vec<Integer> vec2 = new Vec<Integer>();
      Vec<Object> vec3 = new Vec<Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec3.sort((-3961), 1, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1980
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<String> vec1 = new Vec<String>(2, "org.sat4j.core.Vec$1");
      vec1.hashCode();
      Integer integer0 = new Integer(2);
      vec0.iterator();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Comparator<ReadOnlyVec<Object>> comparator0 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort((-1202), (-1202), comparator0);
      vec0.moveTo(1476, 1476);
      Vec<Object> vec1 = new Vec<Object>(2);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1476, vec1);
      vec2.shrink(1476);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a:IGz8?";
      stringArray0[1] = "org.sat4j.core.Vec";
      Vec<Comparable<Object>> vec3 = new Vec<Comparable<Object>>();
      // Undeclared exception!
      try { 
        vec3.moveTo(2, (-602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -602
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.clear();
      vec0.growTo((-4), vec1);
      vec0.iterator();
      Vec<Object> vec2 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.insertFirstWithShifting(vec2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.toString();
      Vec<String> vec1 = new Vec<String>(2028, "org.sat4j.core.Vec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2028, 3905, 2028, 3905, 2028).when(comparator0).compare(anyString() , anyString());
      vec1.toString();
      vec1.sortUnique(comparator0);
      vec1.clear();
      vec1.contains("org.sat4j.core.Vec");
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(1);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(2028, vec1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1400L), 984L, (long)1, (long)3905, (-604L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Vec<String>> comparator1 = Comparator.comparingLong((ToLongFunction<? super Vec<String>>) toLongFunction0);
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-655L), (-604L), 0L, (-1L), 0L).when(toLongFunction1).applyAsLong(any());
      Comparator<Vec<String>> comparator2 = comparator1.thenComparingLong(toLongFunction1);
      // Undeclared exception!
      vec3.sort(1, 1178, comparator2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<ReadOnlyVec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(5, readOnlyVec0);
      vec1.indexOf(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Vec<Object> vec0 = new Vec<Object>(5, integer0);
      assertEquals(5, vec0.size());
      
      vec0.insertFirstWithShifting(integer0);
      assertEquals(6, vec0.size());
      
      vec0.delete(5);
      assertEquals(5, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(5);
      vec1.growTo((-2424), "uagkS()&(f");
      vec1.contains("org.sat4j.core.Vec$1");
      assertEquals((-2424), vec1.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3434);
      vec0.shrinkTo(3434);
      vec0.ensure(3434);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(0);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      vec1.toString();
      vec0.push("");
      vec0.isEmpty();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      int int0 = (-5641);
      Vec<String> vec3 = null;
      try {
        vec3 = new Vec<String>((-5641), "%@l[~FPBG.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.set(0, (String) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      int int0 = 2105;
      Vec<String> vec1 = new Vec<String>(2105, "sLssSQ Lx`[/:OYY(U");
      // Undeclared exception!
      try { 
        vec1.unsafePush("sLssSQ Lx`[/:OYY(U");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2105
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      IVec<String> iVec0 = new Vec<String>();
      vec0.clear();
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(327);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1440);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%@l[~FPBG.";
      stringArray0[1] = "%@l[~FPBG.";
      stringArray0[3] = "%@l[~FPBG.";
      stringArray0[4] = "%@l[~FPBG.";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort((-598), (-598), comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 1440, (-598), (-2084), (-598)).when(comparator1).compare(anyString() , anyString());
      vec1.sortUnique(comparator1);
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(4871);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(327);
      IVec<String> iVec0 = vec0.clone();
      vec0.equals(iVec0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3434);
      vec0.unsafePush("$z+b1Mv=J7PP( ]Rb");
      vec0.shrinkTo(3434);
      vec0.ensure(3434);
      vec0.iterator();
      // Undeclared exception!
      try { 
        vec0.remove("$z+b1Mv=J7PP( ]Rb");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = ")N)L=->47F";
      stringArray0[2] = "Wldj?K7.5o ";
      stringArray0[3] = "";
      stringArray0[4] = "F9/hf=GGdRV<Ze";
      stringArray0[5] = ",";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.iterator();
      vec0.shrinkTo(310);
      // Undeclared exception!
      try { 
        vec0.insertFirst(")N)L=->47F");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.toString();
      Vec<String> vec1 = new Vec<String>(2028, "org.sat4j.core.Vec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, (-1249), 1, 1).when(comparator0).compare(anyString() , anyString());
      vec1.toString();
      vec1.sortUnique(comparator0);
      vec1.clear();
      vec1.contains("org.sat4j.core.Vec");
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(1);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(2028, vec1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1320L, 0L, (long)(-1249), (long)2028, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Vec<String>> comparator1 = Comparator.comparingLong((ToLongFunction<? super Vec<String>>) toLongFunction0);
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3437L, 0L, 3437L, (long)(-1249), 3437L).when(toLongFunction1).applyAsLong(any());
      Comparator<Vec<String>> comparator2 = comparator1.thenComparingLong(toLongFunction1);
      // Undeclared exception!
      vec3.sort(1, 1178, comparator2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>();
      vec0.isEmpty();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.unsafePush(vec0);
      Vec<Object> vec2 = new Vec<Object>(310, vec1);
      // Undeclared exception!
      try { 
        vec1.remove(vec2);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|wOpn,[<";
      stringArray0[1] = "c[kR.~yKhsUU+";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IVec<String> iVec0 = vec0.clone();
      vec0.equals(iVec0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1476, vec1);
      vec2.shrink(1476);
      String[] stringArray0 = new String[22];
      stringArray0[0] = "a:IGz8?";
      Vec<String> vec3 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec3.sortUnique(comparator0);
      vec3.clear();
      vec3.toString();
      vec3.contains("Ws4,o'88tzWYLRjb");
      Vec<Object> vec4 = new Vec<Object>();
      vec1.clone();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.toString();
      Vec<String> vec1 = new Vec<String>(2028, "org.sat4j.core.Vec");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.toString();
      vec1.sortUnique(comparator0);
      vec1.clear();
      vec1.contains("org.sat4j.core.Vec");
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>(1);
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(2028, vec1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Vec<String>> comparator1 = Comparator.comparingLong((ToLongFunction<? super Vec<String>>) toLongFunction0);
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction1).applyAsLong(any());
      Comparator<Vec<String>> comparator2 = comparator1.thenComparingLong(toLongFunction1);
      // Undeclared exception!
      vec3.sort(1, 1178, comparator2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      int int0 = (-2248);
      Vec<String> vec1 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      vec0.growTo(0, readOnlyVec0);
      int int1 = 2835;
      Vec<String> vec2 = new Vec<String>(2835);
      IVec<String> iVec0 = vec2.push((String) null);
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(iVec0);
      // Undeclared exception!
      try { 
        readOnlyVec1.delete((-73));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 1);
      Vec<String> vec0 = new Vec<String>();
      vecArray0[0] = vec0;
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(vecArray0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<String>> comparator0 = Comparator.comparingInt((ToIntFunction<? super Vec<String>>) toIntFunction0);
      vec1.sort((-478), (-5212), comparator0);
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vec<Object> vec0 = null;
      try {
        vec0 = new Vec<Object>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(662, (Object) null);
      String string0 = vec0.toString();
      Vec<String> vec1 = new Vec<String>(36, string0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) vec1;
      objectArray0[2] = null;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      Integer integer0 = new Integer(23);
      vec2.insertFirst(integer0);
      assertEquals(4, vec2.size());
      
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>(0);
      vec3.iterator();
      Vec<Integer> vec4 = new Vec<Integer>();
      int int0 = vec4.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<String> vec1 = new Vec<String>();
      vec1.clone();
      Vec<String> vec2 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec2.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Object object0 = new Object();
      vec0.unsafePush(object0);
      boolean boolean0 = vec0.isEmpty();
      assertEquals(1, vec0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertTrue(vec1.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      vec2.last();
      Vec<Object> vec3 = new Vec<Object>(34, "");
      assertEquals(34, vec3.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = (-3226);
      vec0.growTo((-3226), "z8BR|4]mna}");
      vec0.shrink((-1));
      // Undeclared exception!
      try { 
        vec0.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = 454;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.sat4j.core.Vec$1";
      objectArray0[1] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(677, 677, (-1437), 1438, (-286)).when(comparator0).compare(any() , any());
      vec1.sort(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.sort(2229, 2620, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2424
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 5);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(vec0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b(D':xN'jdiO?x";
      stringArray0[1] = "";
      stringArray0[2] = "Q{M^-";
      stringArray0[3] = "";
      stringArray0[4] = "K6E0s|xIo]1\tX";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec1);
      IVec<String> iVec0 = readOnlyVec3.clone();
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(iVec0);
      Vec<Object> vec2 = new Vec<Object>(stringArray0);
      vec2.pop();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(5146, vec0);
      // Undeclared exception!
      vec3.indexOf(vec2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      int int0 = 17;
      vec0.ensure(17);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|wOpn,[<";
      String string0 = "c[kR.~yKhsUU+";
      stringArray0[1] = "c[kR.~yKhsUU+";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>();
      // Undeclared exception!
      try { 
        vec2.removeFromLast(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ReadOnlyVec<Object> readOnlyVec0 = null;
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(327, (ReadOnlyVec<Object>) null);
      // Undeclared exception!
      try { 
        vec0.indexOf((ReadOnlyVec<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      vec0.copyTo(objectArray0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      int int0 = 2105;
      String string0 = "+cX\\u~g";
      Vec<String> vec1 = new Vec<String>(2105, "sLssSQ Lx`[/:OYY(U");
      // Undeclared exception!
      try { 
        vec1.removeFromLast(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.push("");
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1406, "cGc7LE@?K_28y");
      vec0.clear();
      // Undeclared exception!
      try { 
        vec0.shrink(1406);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object> vec1 = new Vec<Object>(5, vec0);
      boolean boolean0 = vec1.isEmpty();
      assertEquals(5, vec1.size());
      assertTrue(vec0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Comparator<ReadOnlyVec<Object>> comparator0 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(15, 15, comparator0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = 454;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.sat4j.core.Vec$1";
      objectArray0[1] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec1.sort(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.sort(2229, 2620, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2424
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "+cX\\u~g";
      Vec<Object> vec0 = new Vec<Object>(2105, string0);
      String string1 = vec0.toString();
      assertEquals(2105, vec0.size());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(6);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(6, vec0);
      vec0.iterator();
      int int0 = (-343);
      vec1.growTo((-343), vec0);
      // Undeclared exception!
      try { 
        vec1.insertFirstWithShifting(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -343
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "d*jrt&cD= 5$c_4v; ";
      stringArray0[3] = "dCv)EW4>da8rKjOJ'rK";
      stringArray0[4] = "q&";
      stringArray0[5] = "t1P&G9\"f7hmk.w2";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.shrinkTo(368);
      // Undeclared exception!
      try { 
        vec0.growTo(845, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.toString();
      Vec<String> vec1 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 4);
      Vec<Object> vec1 = new Vec<Object>();
      vecArray0[0] = vec1;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "p28W-";
      stringArray0[4] = "]<gHVQv<~AUVb ?02";
      stringArray0[5] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      Vec<Object> vec3 = new Vec<Object>(2097, vec2);
      vecArray0[1] = vec3;
      Vec<Object> vec4 = new Vec<Object>();
      vecArray0[2] = vec4;
      Vec<Object> vec5 = new Vec<Object>(2065);
      vecArray0[3] = vec5;
      Vec<Vec<Object>> vec6 = new Vec<Vec<Object>>(vecArray0);
      // Undeclared exception!
      vec6.toString();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1440);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%@l[~FPBG.";
      stringArray0[1] = "%@l[~FPBG.";
      stringArray0[2] = "%@l[~FPBG.";
      stringArray0[3] = "%@l[~FPBG.";
      stringArray0[4] = "%@l[~FPBG.";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      boolean boolean0 = vec1.contains("%@l[~FPBG.");
      assertTrue(boolean0);
      assertEquals(5, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      IVec<Object> iVec0 = vec2.clone();
      assertEquals(0, iVec0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(0);
      vec0.toArray();
      Integer[] integerArray0 = new Integer[6];
      try { 
        Integer.parseInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "c[kR.~yKhsUU+";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec0.contains(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IVec<Integer> iVec0 = (IVec<Integer>) mock(IVec.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(iVec0);
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(15, readOnlyVec0);
      IVec<ReadOnlyVec<Integer>> iVec1 = vec0.clone();
      Vec<Object> vec1 = new Vec<Object>(15, iVec1);
      int int0 = 1;
      vec0.moveTo(iVec1);
      // Undeclared exception!
      try { 
        readOnlyVec0.shrinkTo(15);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }
}
