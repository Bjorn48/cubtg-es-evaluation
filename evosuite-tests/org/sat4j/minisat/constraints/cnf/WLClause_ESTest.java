/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:37:54 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WLClause_ESTest extends WLClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(27, 27);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      vecInt0.push(5);
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 27);
      assertEquals((-1), int0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt1, lits0);
      learntWLClause0.calcReasonOnTheFly(27, iVecInt0, iVecInt1);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.equals(learntWLClause1);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      learntWLClause0.rescaleBy((-1.0));
      assertEquals(-0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, (byte)7);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, (-593));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      lits0.satisfies(1);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>((-318));
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder(1);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, pureOrder0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver0, (-935));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -935
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3811, 3811);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(3374);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      SearchParams searchParams0 = new SearchParams(1655);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        learntWLClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1655, 0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      DotSearchTracing<SingleSolutionDetector> dotSearchTracing0 = new DotSearchTracing<SingleSolutionDetector>("?@");
      originalWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      VecInt vecInt0 = new VecInt(5, 5);
      SearchParams searchParams0 = new SearchParams();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraint(solver0);
      Constr constr0 = learntWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      learntWLClause0.size();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(2326.18499293, (-475.291427), (-475.291427), 3802);
      int[] intArray0 = new int[7];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 3802);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
      VecInt vecInt0 = new VecInt(3802, 3802);
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      ILits iLits0 = solver0.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.propagate(solver0, (-1698));
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getVocabulary();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.getLits();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(27, 27);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      IVecInt iVecInt0 = vecInt0.push(27);
      int int0 = learntWLClause0.getAssertionLevel(iVecInt0, 27);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.activity = (double) 1596;
      double double0 = learntWLClause0.getActivity();
      assertEquals(1596.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.setActivity((-484.343900937));
      double double0 = learntWLClause0.getActivity();
      assertEquals((-484.343900937), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.get(5);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 1);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.get(1);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      DotSearchTracing<SingleSolutionDetector> dotSearchTracing0 = new DotSearchTracing<SingleSolutionDetector>("vvl/TC]");
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1647);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3808;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      VecInt vecInt0 = new VecInt(5, 5);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        learntWLClause0.propagate(solver0, 2337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt(27, 27);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(2914, 2914);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.getAssertionLevel((IVecInt) null, 907);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(27, 27);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt1 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt1, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.getAssertionLevel(vecInt0, (-3339));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly(1, vecInt0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReason((-282), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReason(5000, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5000
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      VecInt vecInt0 = new VecInt(5, 5);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(48);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.calcReason(1596, vecInt0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 1);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.size();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      double double0 = learntWLClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(27, 27);
      VecInt vecInt1 = new VecInt(27, 27);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt1, (ILits) null);
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 27);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1596);
      VecInt vecInt1 = new VecInt(5, 591);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt1, (ILits) null);
      int int0 = learntWLClause0.getAssertionLevel(iVecInt0, 0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      VecInt vecInt0 = new VecInt(5, 5);
      SearchParams searchParams0 = new SearchParams(5);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraint(solver0);
      boolean boolean0 = learntWLClause0.isSatisfied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.isSatisfied();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      VecInt vecInt0 = new VecInt(5, 5);
      SearchParams searchParams0 = new SearchParams();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.hashCode();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause1.equals(learntWLClause0);
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.equals(lits0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.equals((Object) null);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, pureOrder0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      boolean boolean0 = learntWLClause0.equals(learntWLClause0);
      assertTrue(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      VecInt vecInt0 = new VecInt(5, 5);
      SearchParams searchParams0 = new SearchParams(5);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraintIfNeeded(solver0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.locked());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      Lits lits0 = new Lits();
      DotSearchTracing<SingleSolutionDetector> dotSearchTracing0 = new DotSearchTracing<SingleSolutionDetector>("$O(6ROpz42Aq");
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      originalWLClause0.toString((VarMapper) null);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      String string0 = learntWLClause0.toString();
      assertEquals("0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] ", string0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(48);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.toString();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      VecInt vecInt0 = new VecInt(5, 5);
      SearchParams searchParams0 = new SearchParams(5);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraint(solver0);
      boolean boolean0 = learntWLClause0.locked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(5, 0);
      ILits iLits0 = solver0.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      lits0.satisfies(1);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>((-318));
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder((-1));
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, pureOrder0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraint(solver0);
      // Undeclared exception!
      try { 
        learntWLClause0.propagate(solver0, (-1291));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1291
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReason((-1), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      lits0.satisfies(1);
      originalWLClause0.calcReason((-1), vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, 0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.getVocabulary();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      boolean boolean0 = originalWLClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      int int0 = learntWLClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      boolean boolean0 = originalWLClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, glucose21Restarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      assertFalse(learntWLClause0.simplify());
      
      learntWLClause0.assertConstraint(solver0);
      boolean boolean0 = learntWLClause0.simplify();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, 0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.rescaleBy(0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.get(3811);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3811
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly(5000, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5000
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.getLits();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }
}
