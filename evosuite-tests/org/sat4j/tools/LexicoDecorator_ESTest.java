/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:57:50 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LexicoDecorator_ESTest extends LexicoDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      LexicoDecorator<NegationDecorator<DimacsStringSolver>> lexicoDecorator0 = new LexicoDecorator<NegationDecorator<DimacsStringSolver>>(negationDecorator0);
      int[] intArray0 = new int[7];
      lexicoDecorator0.prevfullmodel = intArray0;
      int[] intArray1 = lexicoDecorator0.modelWithInternalVariables();
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      boolean boolean0 = lexicoDecorator0.manageUnsatCase();
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4InclusionModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<FullClauseSelectorSolver<Minimal4InclusionModel>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.evaluate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solver<MixedDataStructureSingleWL> solver0 = (Solver<MixedDataStructureSingleWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<Solver<MixedDataStructureSingleWL>> lexicoDecorator0 = new LexicoDecorator<Solver<MixedDataStructureSingleWL>>(solver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(lexicoDecorator0, solutionFoundListener0);
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator1 = new LexicoDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        lexicoDecorator1.evaluate();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>((DimacsStringSolver) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardSolutionsForOptimizing();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>((MaxSatDecorator) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1492);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = new LexicoDecorator<Minimal4CardinalityModel>((Minimal4CardinalityModel) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>((DimacsStringSolver) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardCurrentSolution();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      IteratorInt iteratorInt0 = mock(IteratorInt.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iteratorInt0).hasNext();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(iteratorInt0).when(iVecInt0).iterator();
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      boolean boolean0 = lexicoDecorator0.admitABetterSolution((IVecInt) null);
      assertFalse(boolean0);
      assertFalse(lexicoDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      boolean boolean0 = lexicoDecorator0.admitABetterSolution();
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>((MinOneDecorator) null);
      Number number0 = lexicoDecorator0.getObjectiveValue();
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.fixCriterionValue();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ManyCore<SingleSolutionDetector> manyCore0 = (ManyCore<SingleSolutionDetector>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<ManyCore<SingleSolutionDetector>> lexicoDecorator0 = new LexicoDecorator<ManyCore<SingleSolutionDetector>>(manyCore0);
      VecInt vecInt0 = new VecInt();
      lexicoDecorator0.addCriterion(vecInt0);
      assertEquals(1, lexicoDecorator0.numberOfCriteria());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>((SubModelIterator) null);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(lexicoDecorator0, 768L, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      LexicoDecorator<NegationDecorator<ModelIteratorToSATAdapter>> lexicoDecorator1 = new LexicoDecorator<NegationDecorator<ModelIteratorToSATAdapter>>(negationDecorator0);
      // Undeclared exception!
      try { 
        lexicoDecorator1.model((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      int[] intArray0 = lexicoDecorator0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>((MinOneDecorator) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.setTimeoutForFindingBetterSolution((-2631));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      LexicoDecorator<ClausalCardinalitiesDecorator<DimacsStringSolver>> lexicoDecorator0 = new LexicoDecorator<ClausalCardinalitiesDecorator<DimacsStringSolver>>(clausalCardinalitiesDecorator0);
      boolean boolean0 = lexicoDecorator0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.calculateObjective();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      LexicoDecorator<GroupClauseSelectorSolver<DimacsOutputSolver>> lexicoDecorator0 = new LexicoDecorator<GroupClauseSelectorSolver<DimacsOutputSolver>>(groupClauseSelectorSolver0);
      boolean boolean0 = lexicoDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>((DimacsStringSolver) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.getObjectiveValue((-1998));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      LexicoDecorator<ClausalCardinalitiesDecorator<SolutionCounter>> lexicoDecorator0 = new LexicoDecorator<ClausalCardinalitiesDecorator<SolutionCounter>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LexicoDecorator<FullClauseSelectorSolver<DimacsOutputSolver>> lexicoDecorator0 = new LexicoDecorator<FullClauseSelectorSolver<DimacsOutputSolver>>((FullClauseSelectorSolver<DimacsOutputSolver>) null);
      int int0 = lexicoDecorator0.numberOfCriteria();
      assertEquals(0, int0);
  }
}
