/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:23:49 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(2498.2F, 2498.2F, 2498.2F, 2498.2F, 2498.2F, 2184.0F);
      wall0.getLength();
      wall0.getXArcCircleCenter();
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getHeight();
      wall0.setYEnd(0.0F);
      wall0.isTrapezoidal();
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      wall0.setYStart(0.0F);
      wall0.setXEnd(742.8988F);
      Integer.getInteger("");
      wall0.setLeftSideColor((Integer) null);
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = Float.valueOf(1345.7041F);
      wall0.setHeight(float0);
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint((-1.0F), (-1.0F), 0.0F);
      wall0.setXEnd((-1.0F));
      Integer integer0 = new Integer(537);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideColor();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, (-2117.0679F), 0.01F, 2.0F, 289.0F);
      Float float0 = new Float(0.01F);
      wall0.setHeightAtEnd(float0);
      Wall wall1 = wall0.clone();
      wall1.containsWallStartAt(2.0F, 2.0F, 1487.1F);
      wall1.setHeight(float0);
      wall1.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setRightSideShininess((-4053.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall1.setXEnd((-4053.0F));
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.01F, 0.0F, 0.0F, 1.0F, 410.33F);
      Wall wall1 = wall0.clone();
      wall1.getRightSideColor();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall((-2836.93F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Wall wall2 = new Wall((-2836.93F), 1227.44F, (-635.0393F), (-635.0393F), (-1.0F), 8.1890556E-7F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float.min((-1.0F), 1997.59F);
      Float float0 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      try { 
        wall0.containsWallStartAt(3874.724F, (-976.14F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setRightSideShininess((-4053.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      Integer integer0 = new Integer((-2602));
      wall0.getPoints();
      wall1.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 1.0F, (-3513.5828F), 0.0F, 1.0F, 1.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.setYEnd(0.0F);
      wall0.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      Wall wall2 = wall1.clone();
      Integer.compare(88, 15);
      wall0.setLeftSideShininess((-3513.5828F));
      Integer integer0 = new Integer(40);
      Integer integer1 = new Integer(88);
      wall0.setRightSideColor(integer1);
      wall2.getStartPointToEndPointDistance();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(390.0025F, 390.0025F, 390.0025F, 390.0025F, (-1.0F), (-1.0F));
      wall0.containsWallStartAt(390.0025F, (-1.0F), 390.0025F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 2.0F, 289.0F, 289.0F);
      Float float0 = new Float(2.0F);
      wall0.setArcExtent(float0);
      wall0.setYEnd(222.291F);
      wall0.getXArcCircleCenter();
      wall0.intersectsRectangle(37.25749F, 289.0F, 289.0F, 289.0F);
      wall0.getPoints();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.getXArcCircleCenter();
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.isTrapezoidal();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = wall0.getWallAtEnd();
      linkedList0.add(wall1);
      linkedList0.add(wall0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float float0 = Float.valueOf((-1.0F));
      Float float1 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float1);
      Float.min(0.01F, 178.3549F);
      wall0.containsWallStartAt((float) float0, (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall0.setArcExtent(float1);
      wall0.getArcExtent();
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = (-1.0F);
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 1545.2609F);
      Float.max((-213.987F), 1545.2609F);
      wall0.setXStart(1545.2609F);
      Float.min((-1.0F), 1997.59F);
      Float float1 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float1);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      float float2 = (-475.951F);
      wall0.setThickness(float2);
      wall0.setArcExtent(float1);
      float float3 = (-976.14F);
      float float4 = 0.0F;
      wall0.intersectsRectangle(float4, float0, float2, float3);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, (-2117.0679F), (-2117.0679F), 2.0F, 289.0F, (-2117.0679F));
      Float.max((-3108.8F), (-7690.2F));
      wall0.setXStart(1.0F);
      Float.min((-7690.2F), 1997.59F);
      Float float0 = new Float((-1772.4158614027));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(2420.2358F, 2903.786F, (-2117.0679F));
      wall0.setThickness(966.612F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(2903.786F, 2903.786F, 2903.786F, 1.0F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-986.064F), (-1109.896F), 1061.0F);
      Integer integer0 = new Integer((-1));
      Integer.min((-1), (-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-986.064F));
      wall0.setRightSideShininess((-1109.896F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("J0#8,Iy=W)qfGNcu_Q", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.clone();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.getPattern();
      wall0.getLength();
      wall0.setYStart((-2622.1F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Wall wall2 = new Wall(0.0F, (-1.0F), (-1.0F), 560.6303F, (-1.0F), 3571.4F);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", "", object0, (Object) null);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      Integer integer0 = new Integer(0);
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(wall2, "", propertyChangeListenerProxy0, integer0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getThickness();
      wall1.getHeight();
      wall1.setWallAtEnd(wall0);
      wall1.setXEnd((-3975.81F));
      wall2.getRightSideTexture();
      wall1.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.getLength();
      wall0.setYStart((-2622.1F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("J0#8,Iy=W)qfGNcu_Q", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy2);
      Wall wall2 = wall0.getWallAtStart();
      wall2.isTrapezoidal();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-1000.7835F), (-1109.896F), 1061.0F);
      Float float0 = new Float((-1109.896F));
      wall0.setArcExtent(float0);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-1000.7835F));
      wall0.setRightSideShininess((-1109.896F));
      Wall wall1 = new Wall((-1), (-1000.7835F), (-1109.896F), (-1997.884F), 2.0F, (-1997.884F));
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      Integer integer2 = new Integer(1);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "8+(IO\nijG", integer2, integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Pf4Z@sU@a.GTZ{_% r", propertyChangeListener0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getThickness();
      wall1.getHeight();
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      Float.max((-715.41F), (-715.41F));
      wall0.setArcExtent(float1);
      wall0.setYEnd(0.0F);
      wall0.containsPoint(0.0F, 1.0F, 0.0F);
      wall0.containsWallEndAt(3604.331F, (-1.0F), 0.0F);
      Integer.getInteger("bWbg");
      Wall wall1 = new Wall(0.0F, 1.0F, (-1.0F), 1058.9192F, 222.291F, 0.0F);
      wall1.getLength();
      wall0.setXStart(1.0F);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, (-485.53F), (-3693.7957F));
      Float float0 = new Float((double) 1.0F);
      wall0.setHeight(float0);
      wall0.getWallAtEnd();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(237.92502F, 237.92502F, 237.92502F, 2.0F, 237.92502F, 237.92502F);
      Float float0 = new Float(1.901551449246562);
      wall0.setHeightAtEnd(float0);
      wall0.getLevel();
      wall0.getHeightAtEnd();
      wall0.isTrapezoidal();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(3966.7F, 3966.7F, 3966.7F, 3966.7F, 2120.8F);
      wall0.getPattern();
      wall0.setPattern((TextureImage) null);
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(474);
      wall0.setLeftSideColor(integer0);
      wall0.containsPoint(2120.8F, 3966.7F, (-271.5F));
      Wall wall1 = wall0.clone();
      wall0.getYStart();
      Wall.Property.values();
      wall1.move((-271.5F), 702.5784F);
      wall0.setXStart(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Unknown resource ", propertyChangeListener0);
      Integer integer1 = new Integer(474);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer1, "Super class isn't cloneable", (Object) null, "474");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getHeightAtEnd();
      wall1.getYStart();
      wall1.getHeight();
      wall0.containsWallStartAt(568.81F, 3966.7F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall1.setWallAtStart(wall0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(292.0F, 292.0F, 292.0F, 292.0F, 292.0F, 292.0F);
      wall0.setYEnd(292.0F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0231F);
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint(1598.9729F, 1598.9729F, (-2206.47F));
      Wall wall1 = new Wall(0.0F, 3750.8625F, (-2206.47F), 1598.9729F, 1598.9729F, 3750.8625F);
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(90.0F, 90.0F, 0.0F, 554.7654F, 0.0F);
      wall0.setXEnd(0.0F);
      Wall wall1 = wall0.clone();
      wall1.getYStart();
      wall1.getLevel();
      wall1.containsWallEndAt(554.7654F, 90.0F, (-184.36093F));
      Float float1 = new Float((double) 90.0F);
      Float.isFinite(0.0F);
      wall1.setHeightAtEnd(float1);
      float float2 = 0.0F;
      wall0.containsPoint(0.0F, 90.0F, 2.0F);
      float float3 = (-827.0F);
      float float4 = (-2497.0F);
      float float5 = 0.0F;
      String string0 = "5<BfKR8):8uE(-?|y";
      Class<Object> class0 = Object.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource +
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer(3);
      wall0.setLeftSideShininess(3);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideShininess();
      wall0.getStartPointToEndPointDistance();
      wall0.getPoints();
      wall0.setLeftSideColor(integer0);
      wall0.getPoints();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float float0 = Float.valueOf((-1.0F));
      Float float1 = new Float(0.01F);
      wall0.setArcExtent(float1);
      Float.min(0.01F, 178.3549F);
      wall0.containsWallStartAt((float) float0, (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall0.setArcExtent(float1);
      wall0.getArcExtent();
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-1.0F), 355.0F, 0.0F, (-1.0F), 1.0F);
      wall0.setThickness((-2099.0F));
      float float0 = 0.0F;
      Wall wall1 = wall0.clone();
      wall0.setXStart(355.0F);
      wall0.intersectsRectangle(0.0F, (-1.0F), 0.0F, 0.0F);
      wall0.setLeftSideShininess(266.1F);
      wall0.containsWallStartAt((-736.674F), 1.0F, 0.0F);
      wall0.getHeight();
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
      String string0 = "LEFT_SIDE_TEXTURE";
      Class<Integer> class0 = Integer.class;
      wall1.getRightSideShininess();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "$VALUES", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource $VALUES
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(1669.07F, 1669.07F, 1.0F, 0.0F, 3506.45F);
      Wall wall1 = new Wall((-1995.2734F), 3506.45F, (-2791.9F), 3506.45F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall1);
      Level level0 = new Level((String) null, (-713.48F), (-1995.2734F), 0.0F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setRightSideShininess((-353.1F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(";]%ht!", propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(propertyChangeListenerProxy0, "RIGHT_SIDE_COLOR", propertyChangeListenerProxy0, object0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLevel();
      wall0.getPoints();
      Integer integer0 = new Integer((-1735));
      wall1.setLeftSideColor(integer0);
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setRightSideShininess((-1.0F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F);
      Float float0 = new Float(291.7418F);
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("Q5o}v\r", temporaryURLContent0, 291.7418F, 291.7418F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(9.898462F, 9.898462F, 0.0F, 0.0F, 9.898462F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.move((-1.0F), 0.0F);
      wall0.containsWallEndAt((-1.0F), (-1.0F), 9.898462F);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.getWallAtStart();
      linkedList1.add(wall0);
      linkedList1.add((Wall) null);
      wall0.setThickness(0.01F);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall((-1239.1F), (-1239.1F), 0.0F, (-1239.1F), 0.0F, 0.0F);
      Wall wall1 = new Wall((-408.3F), 721.432F, 721.432F, (-1636.24F), (-542.0F), 0.0F);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object1, "rna5>bk6", object2, "rna5>bk6");
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      Integer integer0 = new Integer((-2587));
      Integer integer1 = new Integer((-2587));
      Object object3 = new Object();
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(integer1, "rna5>bk6", object3, integer1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getThickness();
      Wall wall2 = new Wall(3571.4F, (-1636.24F), (-2099.0F), 0.0F, (-1.0F));
      wall2.getHeight();
      Wall wall3 = new Wall((-1.0F), (-2099.0F), 1219.0F, 3571.4F, (-1636.24F), (-775.466F));
      wall1.setWallAtEnd(wall3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setYEnd(0.0F);
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.setYStart((-2622.1F));
      wall0.getWallAtStart();
      Wall.Property wall_Property0 = Wall.Property.Y_END;
      wall0.setLeftSideColor((Integer) null);
      wall0.getLevel();
      wall1.setXStart((-1.0F));
      wall1.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(709.1911F, 709.1911F, (-2117.0679F), (-2117.0679F), 709.1911F);
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall1.clone();
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall((-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F));
      wall0.setLeftSideShininess((-8.265605F));
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      Wall wall1 = new Wall(1102.0F, 137.46927F, 2121.0F, 2129.374F, 1102.0F);
      wall0.setWallAtStart(wall1);
      wall0.intersectsRectangle((-629.192F), (-629.192F), 2945.2F, 1166.2662F);
      wall0.getXArcCircleCenter();
      wall0.clone();
      wall0.intersectsRectangle(899.4F, 899.4F, 231.46F, (-591.1723F));
      wall0.getYStart();
      wall0.getStartPointToEndPointDistance();
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float float0 = Float.valueOf((-1.0F));
      Float float1 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float1);
      Float.min(0.01F, 178.3549F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("=", (PropertyChangeListener) null);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsWallStartAt((float) float0, (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      wall0.setArcExtent(float1);
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setRightSideShininess((-4053.0F));
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(2.0567966F, 2.0567966F, 2.0567966F, 2.0567966F, 2.0567966F, 2.0567966F);
      Float float0 = new Float(2.0567966F);
      wall0.setArcExtent(float0);
      wall0.containsPoint(2.0567966F, 2.0567966F, 2.0567966F);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      Wall wall1 = new Wall(2945.2F, 2945.2F, 899.4F, 0.0F, (-1.0F), 0.1F);
      wall0.setWallAtEnd(wall1);
      wall0.getThickness();
      Wall wall2 = new Wall(1102.0F, 2945.2F, 2.0F, 291.5213F, 291.5213F, 0.0F);
      wall2.setThickness(291.5213F);
      wall0.setRightSideShininess(0.0F);
      wall0.setWallAtStart(wall2);
      wall0.getPattern();
      wall1.setXEnd(2945.2F);
      wall0.containsPoint(3613.65F, (-2329.1768F), 0.01F);
      wall0.setRightSideShininess((-1.0F));
      wall2.intersectsRectangle(2.0F, 0.0F, 0.1F, 291.5213F);
      wall0.getRightSideShininess();
      wall2.getRightSideColor();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.01F, 0.0F);
      wall0.setLevel((Level) null);
      Wall wall1 = wall0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float((double) 0.0F);
      wall1.setArcExtent(float0);
      wall1.getHeight();
      Integer integer0 = new Integer(780);
      wall0.setRightSideColor(integer0);
      Random.setNextRandom((-552));
      wall1.getRightSideColor();
      Float float1 = new Float((double) 780);
      Float.sum(0.0F, 0.0F);
      wall1.setHeight(float1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F));
      wall0.containsPoint((-8.265605F), (-8.265605F), (-8.265605F));
      wall0.getRightSideColor();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(2835.135F, 0.0F, 0.0F, 2835.135F, 0.0F, 0.0F);
      wall0.containsPoint(0.0F, 2085.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("?", propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "com.eteks.sweethome3d.io.HomeURLContent", "com.eteks.sweethome3d.io.HomeURLContent", "com.eteks.sweethome3d.io.HomeURLContent");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      Float float0 = new Float(0.0);
      Float.max(0.0F, 0.0F);
      wall0.setHeight(float0);
      wall0.setYStart(0.0F);
      wall0.containsWallEndAt(0.0F, 1658.0F, (-1.0F));
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float((double) (-1.0F));
      wall0.setHeightAtEnd(float0);
      wall0.setYEnd((-1.0F));
      wall0.move((-1.0F), 0.0F);
      wall0.containsWallStartAt(0.0F, (-974.9535F), 2163.0F);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getWallAtStart();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setThickness((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F));
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float.min((-1.0F), 1997.59F);
      Float float0 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      try { 
        wall0.containsWallStartAt(3874.724F, (-976.14F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 2.0F, 2.0F, (-1.0F), 2.0F);
      wall0.getRightSideColor();
      wall0.setThickness(2.0F);
      Float float0 = new Float(2.0F);
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall0.setYEnd(0.0F);
      wall0.containsPoint(2.0F, 1.0F, (-1608.8004F));
      wall0.containsWallEndAt(1777.19F, 0.0F, 0.030303031F);
      Integer.getInteger("bWbg");
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(2835.135F, 0.0F, 0.0F, 2835.135F, 0.0F, 0.0F);
      wall0.containsPoint(0.0F, 2085.0F, 0.0F);
      Wall wall1 = new Wall(1425.937F, 2912.2822F, 150.848F, 3067.58F, (-1233.9805F));
      wall1.setWallAtStart(wall0);
      wall0.intersectsRectangle(2606.0F, 137.46927F, 371.6705F, 4669.2783F);
      wall1.getXArcCircleCenter();
      Wall wall2 = wall0.clone();
      wall2.intersectsRectangle((-986.064F), 6006.515F, 1166.2662F, 6006.515F);
      wall0.getYStart();
      wall1.getStartPointToEndPointDistance();
      wall2.isTrapezoidal();
      wall1.setXStart(0.0F);
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), (-0.44778875F));
      Float.max((-213.987F), (-0.44778875F));
      wall0.setXStart((-0.44778875F));
      Float.min((-1.0F), 1997.59F);
      Float float0 = new Float((double) (-1.0F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      try { 
        wall0.intersectsRectangle(0.0F, (-1.0F), (-475.951F), (-976.14F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 2.0F, 2.0F, (-2943.0F), 2.0F);
      Float float0 = new Float(2.0F);
      wall0.setArcExtent(float0);
      wall0.containsPoint((-2943.0F), 2.0F, 2.0F);
      Float float1 = new Float((-2943.0F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(2.1F, 2.1F, 2.1F, 2.1F, 2.1F);
      Float float0 = new Float(2.1F);
      wall0.setArcExtent(float0);
      wall0.containsPoint(2.1F, 2.1F, 2.1F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      Float float0 = new Float(289.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(2.0567966F, 2.0567966F, 2.0567966F, 2.0567966F, 2.0567966F, 2.0567966F);
      wall0.containsPoint(2.0567966F, 2.0567966F, 2.0567966F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(237.92502F, 237.92502F, 237.92502F, 2.0F, 237.92502F, 237.92502F);
      Float float0 = new Float(1.0001);
      wall0.setHeightAtEnd(float0);
      wall0.getLevel();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      wall0.setYStart(289.0F);
      wall0.getLevel();
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 0.0F, 0.0F, 1.0F);
      wall0.setHeightAtEnd((Float) null);
      wall0.setYEnd(0.0F);
      wall0.move((-1.0F), (-1.0F));
      wall0.containsWallStartAt(1.0F, 0.0F, 0.0F);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(709.1911F, 709.1911F, (-2117.0679F), (-2117.0679F), 709.1911F);
      wall0.getLeftSideColor();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F);
      wall0.setXStart(474.43103F);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      Integer integer0 = new Integer(3);
      wall1.setRightSideColor(integer0);
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      wall1.setRightSideShininess(0.0F);
      wall1.intersectsRectangle(0.0F, 0.01F, (-1.0F), (-1.0F));
      wall1.getRightSideShininess();
      wall1.getRightSideColor();
      wall1.getXStart();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(9.898462F, 9.898462F, 0.0F, 0.0F, 9.898462F);
      assertNotNull(wall0);
      assertEquals(4.949231F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4.949231F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.99854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(4.949231F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4.949231F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.99854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(4.949231F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4.949231F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.99854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-4.5165844F));
      assertEquals((-4.5165844F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float1 = wall0.getXEnd();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(9.013217F, float2, 0.01F);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(40.904835F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(9.013217F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(9.898462F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.8852449F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4.5165844F), wall1.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall1.getXStart(), 0.01F);
      assertEquals(13.99854F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.013217F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(9.898462F, wall2.getYStart(), 0.01F);
      assertEquals(40.904835F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.99854F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.5165844F), wall2.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall2.getXStart(), 0.01F);
      assertEquals(0.8852449F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(9.898462F, wall2.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float3 = wall2.getYArcCircleCenter();
      assertEquals(0.8852449F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.013217F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(9.898462F, wall2.getYStart(), 0.01F);
      assertEquals(40.904835F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.99854F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.5165844F), wall2.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall2.getXStart(), 0.01F);
      assertEquals(0.8852449F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(9.898462F, wall2.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      wall0.setLeftSideShininess(1.0F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      float float4 = wall0.getThickness();
      assertEquals(9.898462F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertNull(homeTexture1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      wall2.setPattern((TextureImage) null);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.8852449F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.5165844F), wall0.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall0.getXStart(), 0.01F);
      assertEquals(13.99854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(40.904835F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.013217F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.898462F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(9.898462F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.013217F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(9.898462F, wall2.getYStart(), 0.01F);
      assertEquals(40.904835F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.99854F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.5165844F), wall2.getArcExtent(), 0.01F);
      assertEquals(9.898462F, wall2.getXStart(), 0.01F);
      assertEquals(0.8852449F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(9.898462F, wall2.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setXEnd(2835.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(1353.1F, 1353.1F, 1353.1F, 1353.1F, 1353.1F, 1353.1F);
      wall0.getLength();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall(2944.0098F, 2944.0098F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      wall0.setWallAtStart(wall0);
      wall0.intersectsRectangle((-629.192F), (-629.192F), 2944.0098F, (-629.192F));
      wall0.intersectsRectangle(899.4F, (-629.192F), 899.4F, 1355.0582F);
      wall0.getYStart();
      Float float0 = new Float(2129.374F);
      wall0.isTrapezoidal();
      wall0.setYStart((-629.192F));
      Wall wall1 = new Wall(0.0F, 2944.0098F, 137.46927F, 3053.3523F, 343.8655F);
      wall1.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.getLength();
      wall1.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall((-7.923199F), (-7.923199F), (-7.923199F), (-7.923199F), (-7.923199F));
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-1.3722744F), (-1.3722744F), (-1.3722744F), (-1.3722744F), (-1.3722744F));
      Integer integer0 = new Integer((-16));
      wall0.setRightSideColor(integer0);
      Level level0 = new Level("", (-1.3722744F), (-1.3722744F), (-1.3722744F));
      wall0.isTrapezoidal();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 3827.7913F, 3827.7913F, 0.0F, (-3176.349F));
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.intersectsRectangle((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      wall1.setRightSideShininess(0.0F);
      wall1.intersectsRectangle(8.898462F, 0.01F, (-1.0F), (-1.0F));
      wall1.getRightSideShininess();
      wall1.getRightSideColor();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.tools.ResourceURLContent", "com.eteks.sweethome3d.tools.ResourceURLContent", uRLContent0, (-1.0F), (-1.0F), "com.eteks.sweethome3d.tools.ResourceURLContent");
      wall0.setPattern(catalogTexture0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = (-1397.0F);
      Wall wall0 = new Wall(1488.995F, 1.0F, (-1397.0F), 2.0F, 2.0F, (-1397.0F));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float float1 = 0.32128343F;
      Wall wall1 = new Wall((-77.54178F), (-1397.0F), (-1397.0F), 1019.3354F, 0.32128343F);
      wall0.setWallAtEnd(wall1);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", uRLContent0, 1488.995F, 3208.7383F, "");
      wall0.setPattern(catalogTexture0);
      Wall wall2 = wall0.clone();
      Integer integer0 = new Integer(68);
      int int0 = (-183);
      Integer.divideUnsigned(82, (-183));
      Integer.compareUnsigned(68, (-183));
      Integer integer1 = new Integer(59);
      wall1.setRightSideColor(integer1);
      wall2.setRightSideColor(integer0);
      wall0.getLeftSideTexture();
      wall2.setRightSideTexture((HomeTexture) null);
      wall2.getPattern();
      wall0.getLeftSideShininess();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F));
      Float float0 = new Float((double) (-8.265605F));
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float((double) (-1.0F));
      wall0.setHeightAtEnd(float0);
      wall0.getLevel();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(0.0F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall0.setYEnd(0.0F);
      wall0.containsPoint(0.0F, 1.0F, 0.0F);
      wall0.containsWallEndAt(3604.331F, (-1.0F), 0.0F);
      Integer.getInteger("bWbg");
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getPoints();
      Integer integer0 = new Integer(18);
      wall0.setLeftSideShininess(18);
      Integer.getInteger((String) null);
      wall0.setLeftSideColor(integer0);
      wall0.getLength();
      wall0.getStartPointToEndPointDistance();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(287.90585F, 287.90585F, 287.90585F, 287.90585F, 287.90585F);
      Float float0 = new Float(287.90585F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(388.7736F, 388.7736F, 388.7736F, 388.7736F, 388.7736F, 388.7736F);
      wall0.getRightSideTexture();
      wall0.setThickness((-1609.5016F));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setThickness((-1.0F));
      wall0.setRightSideShininess(0.01F);
      wall0.setWallAtStart(wall0);
      wall0.setYStart((-2622.1F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("J0#8,Iy=W)qfGNcu_Q", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy2);
      Wall wall1 = wall0.getWallAtStart();
      wall1.isTrapezoidal();
      Wall.Property wall_Property0 = Wall.Property.Y_END;
      wall0.getLevel();
      Float float0 = new Float(517.0);
      wall1.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      wall0.containsWallEndAt(827.393F, (-1.0F), 0.0F);
      wall0.intersectsRectangle(0.01F, 0.0F, 827.393F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(2944.0098F, 2944.0098F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      wall0.setWallAtStart(wall0);
      Wall wall1 = wall0.clone();
      wall0.setXEnd(899.4F);
      wall0.getPoints();
      wall1.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float.min((-1.0F), 1997.59F);
      Float float0 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      wall0.setThickness((-475.951F));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      try { 
        wall0.intersectsRectangle(0.0F, (-1.0F), (-475.951F), (-976.14F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(2498.2F, 2498.2F, 2498.2F, 2498.2F, 2498.2F, 2498.2F);
      wall0.getXArcCircleCenter();
      wall0.getRightSideTexture();
      wall0.containsWallEndAt(2498.2F, 2498.2F, 2498.2F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getHeight();
      wall0.getYArcCircleCenter();
      Integer.compare(16, 16);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.getPattern();
      wall0.getLength();
      wall0.setYStart((-2622.1F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.getXEnd();
      wall1.getXArcCircleCenter();
      Wall wall2 = wall0.clone();
      wall2.getYArcCircleCenter();
      wall1.setLeftSideShininess(1.0F);
      wall0.getThickness();
      wall2.getLeftSideTexture();
      wall1.getRightSideTexture();
      wall1.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint((-1.0F), (-1.0F), 0.0F);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall(0.0F, 0.0F, (-1.0F), (-1.0F), 1523.1633F);
      wall0.setWallAtEnd(wall1);
      wall0.containsPoint((-1.0F), (-1.0F), 0.0F);
      wall0.setXEnd((-1.0F));
      wall0.getLeftSideColor();
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(2944.0098F, 2944.0098F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      wall0.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getArcExtent();
      wall0.setArcExtent((Float) null);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Level level0 = new Level("G", (-1.0F), (-1.0F), (-1.0F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F);
      wall0.move(1812.32F, 291.7418F);
      wall0.getRightSideTexture();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(390.0025F, 390.0025F, 390.0025F, 390.0025F, (-1.0F), (-1.0F));
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-0.5632081F), (-0.5632081F), (-0.5632081F), (-0.5632081F), (-0.5632081F), (-0.5632081F));
      Integer integer0 = new Integer((-736));
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("WALL_AT_START", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsPoint((-1.0F), (-1.0F), 0.0F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(31.9F, 840.328F, 1014.87F, 0.0F, 1.0F);
      wall0.setYEnd(1425.937F);
      wall0.move(0.0F, 1.0F);
      wall0.containsWallStartAt(1014.87F, 0.0F, 3156.2F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-1.0F), 355.0F, 0.0F, (-1.0F), 1.0F);
      wall0.setThickness((-2099.0F));
      float float0 = 0.0F;
      wall0.setXStart(355.0F);
      wall0.intersectsRectangle(0.0F, (-1.0F), 0.0F, 0.0F);
      wall0.setLeftSideShininess(266.1F);
      wall0.containsWallStartAt((-736.674F), 1.0F, 0.0F);
      wall0.getHeight();
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
      String string0 = "LEFT_SIDE_TEXTURE";
      Class<Integer> class0 = Integer.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "$VALUES", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource $VALUES
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setRightSideShininess((-4053.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.containsPoint((-4053.0F), 578.0F, (-414.0F));
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      Wall wall1 = new Wall(1102.0F, 137.46927F, 2121.0F, 2129.374F, 1102.0F);
      wall0.setWallAtStart(wall1);
      wall0.intersectsRectangle((-629.192F), (-629.192F), 2945.2F, 1166.2662F);
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Wall wall2 = wall0.getWallAtStart();
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>();
      linkedList2.add(wall2);
      wall2.move(137.46927F, 0.1F);
      wall2.setThickness((-720.098F));
      Wall.clone((List<Wall>) linkedList0);
      wall2.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, (-2117.0679F), (-2117.0679F), 2.0F, 289.0F, (-2117.0679F));
      wall0.setHeightAtEnd((Float) null);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Wall wall0 = new Wall((-2402.0173F), 2865.52F, 4082.6755F, 0.0F, 4082.6755F);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(2865.52F, 4082.6755F, 321.045F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.getPattern();
      wall0.setYStart((-1961.4187F));
      wall0.getLeftSideTexture();
      wall0.getRightSideColor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Wall wall2 = wall0.getWallAtEnd();
      wall2.clone();
      Float float0 = new Float(55660.61426483188);
      wall2.setArcExtent(float0);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 4813.0F, 4813.0F, (-1.0F), (-1.0F));
      wall0.getRightSideColor();
      wall0.setThickness((-1.0F));
      Float float0 = new Float(4813.0F);
      Float float1 = new Float((-1606.0F));
      Float float2 = new Float((double) (-1606.0F));
      wall0.setArcExtent(float2);
      wall0.setYEnd(0.0F);
      wall0.containsPoint((-1025.09F), 1.0F, 0.0F);
      wall0.containsWallEndAt((-836.0F), 633.3815F, 0.0F);
      Integer.getInteger("aY");
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall1.getHeightAtEnd();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      float float0 = (-1737.9F);
      Wall wall0 = new Wall(5100.425F, 1888.8F, (-1737.9F), (-3110.897F), 4130.3726F);
      Float float1 = new Float(100000.0);
      wall0.setArcExtent(float1);
      Wall wall1 = new Wall(1888.8F, 2476.5364F, 1018.737F, 1018.737F, 5100.425F);
      Wall wall2 = new Wall((-2365.0F), (-1737.9F), 1888.8F, 1326.6984F, 1326.6984F);
      wall1.setWallAtStart(wall2);
      float float2 = 2666.0F;
      wall1.intersectsRectangle(4130.3726F, (-2365.0F), 2666.0F, 650.0F);
      wall1.getXArcCircleCenter();
      wall1.clone();
      wall0.intersectsRectangle(650.0F, 4130.3726F, (-957.0F), 295.629F);
      wall2.getYStart();
      float float3 = wall0.getStartPointToEndPointDistance();
      Wall wall3 = wall2.clone();
      String string0 = null;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(string0, propertyChangeListener0);
      wall3.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsWallEndAt(float3, float2, float0);
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = (-1011.64F);
      Wall wall0 = new Wall(292.0F, 872.2335F, 292.0F, (-1011.64F), 2.0F, 1.0F);
      Float float1 = new Float(1.0F);
      Float float2 = new Float(8656001.984628916);
      wall0.setArcExtent(float2);
      wall0.containsPoint(292.0F, (-1.0F), 0.0F);
      wall0.setArcExtent(float1);
      wall0.getLevel();
      Float float3 = new Float(float0);
      wall0.setHeightAtEnd(float3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      Wall wall1 = new Wall(1102.0F, 137.46927F, 2121.0F, 2129.374F, 1102.0F);
      wall0.setWallAtStart(wall1);
      wall0.intersectsRectangle((-629.192F), (-629.192F), 2945.2F, 1166.2662F);
      wall0.getXArcCircleCenter();
      Wall wall2 = wall0.clone();
      wall0.intersectsRectangle(899.4F, 899.4F, 231.46F, (-591.1723F));
      wall0.getYStart();
      wall0.getStartPointToEndPointDistance();
      wall0.isTrapezoidal();
      CatalogTexture catalogTexture0 = new CatalogTexture("!y", "z)67\"#Qe_JJe*BAB,", (Content) null, (-1908.5629F), (-591.1723F), "Wj4])`ns_Pr5wu\"9m%M", false);
      wall2.setPattern(catalogTexture0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-986.064F), (-1109.896F), 1061.0F);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-986.064F));
      wall0.setRightSideShininess((-1109.896F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("J0#8,Iy=W)qfGNcu_Q", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-988.25116F), (-1109.896F), 1061.0F);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-988.25116F));
      wall0.setRightSideShininess((-1109.896F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.intersectsRectangle(1061.0F, (-988.25116F), (-1109.896F), (-988.25116F));
      Float float0 = new Float(1061.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1457.4F), (-1457.4F), (-3363.7F));
      Wall wall1 = new Wall(354.0107F, 354.0107F, (-1.0F), (-1457.4F), 0.1F, 1.0F);
      wall1.setWallAtEnd(wall0);
      Float.max((-3363.7F), 1.0F);
      Float.max((-2414.559F), 310.4167F);
      wall0.setXStart((-1457.4F));
      Float.valueOf(0.1F);
      Float float0 = new Float(1.0);
      wall0.setArcExtent(float0);
      Float.min((-370.301F), (-2414.559F));
      wall1.containsWallStartAt(956.869F, 178.3549F, (-3363.7F));
      wall1.setThickness(2.0F);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float1 = new Float((-475.951F));
      wall1.setArcExtent(float1);
      wall0.getArcExtent();
      wall1.getPoints();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-2096.4019F));
      wall0.setArcExtent(float0);
      wall0.setYEnd(1.0F);
      wall0.containsPoint((-2117.0679F), 1.0F, 2850.089F);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Integer.getInteger((String) null);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      wall0.setLeftSideColor(integer1);
      Wall wall1 = new Wall(2065.5F, 0.0F, (-898.5F), (-2117.0679F), 1.0F, (-2065.61F));
      wall1.getLevel();
      wall1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setRightSideShininess((-1.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F);
      Float float0 = new Float(291.7418F);
      wall0.setHeight(float0);
      wall0.setHeight(float0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "com.eteks.sweethome3d.tools.ResourceURLContent", (Content) null, 291.7418F, 291.7418F, "com.eteks.sweethome3d.tools.ResourceURLContent", false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(1426.2F, 1426.2F, (-3188.8574F), 3127.1602F, 1426.2F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((-4229.68F));
      wall1.setHeight(float0);
      Level level0 = new Level("9", (-528.0F), (-528.0F), (-528.0F));
      level0.setElevation(1426.2F);
      level0.setVisible(false);
      wall0.setRightSideShininess(1426.2F);
      wall1.setLevel(level0);
      wall1.setLevel((Level) null);
      wall0.setWallAtStart(wall1);
      wall0.getHeight();
      wall1.getLevel();
      wall1.clone();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideTexture();
      Wall.clone(list0);
      wall0.getWallAtStart();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall(291.36725F, 291.36725F, 291.36725F, 291.36725F, 291.36725F, 291.36725F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(1374.0002F, 1374.0002F, 1374.0002F, 1374.0002F, 1374.0002F);
      wall0.setYEnd(0.0F);
      wall0.getRightSideColor();
      Level level0 = new Level("4$W~b[UR}j.eJH9;;m", (-3139.11F), (-1.0F), 1374.0002F);
      level0.getBackgroundImage();
      level0.removePropertyChangeListener((PropertyChangeListener) null);
      level0.setBackgroundImage((BackgroundImage) null);
      wall0.setLevel(level0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsPoint((-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.setRightSideShininess(269.9686F);
      wall0.isTrapezoidal();
      wall0.isTrapezoidal();
      wall0.getPoints();
      Float float1 = wall0.getHeightAtEnd();
      wall0.isTrapezoidal();
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float1);
      wall1.getHeight();
      wall0.getRightSideTexture();
      wall0.setRightSideColor((Integer) null);
      wall0.getArcExtent();
      wall0.getLength();
      wall1.getRightSideTexture();
      Float float2 = new Float(0.0F);
      wall1.setHeight(float2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0.0F, 2129.374F, 2121.0F, 0.0F, (-1.0F));
      Wall wall2 = new Wall((-1.0F), 0.01F, (-1.0F), (-750.8083F), 1326.6984F);
      wall2.setWallAtStart(wall0);
      wall1.intersectsRectangle(0.0F, 2666.0F, 1326.6984F, 2666.0F);
      wall1.getXArcCircleCenter();
      wall0.clone();
      wall2.intersectsRectangle((-750.8083F), (-1.0F), (-1316.2369F), 231.46F);
      wall0.getYStart();
      wall0.getStartPointToEndPointDistance();
      Wall wall3 = wall0.clone();
      wall3.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 0.1F, (-475.951F), 0.01F, 0.01F);
      Wall wall1 = new Wall(289.0F, 0.1F, (-475.951F), 0.1F, 289.0F, 289.0F);
      wall1.setWallAtEnd(wall0);
      Float.max((-488.9181F), 0.01F);
      Float.max(0.01F, 354.96582F);
      wall1.setXStart((-4.5165844F));
      Float.min(0.1F, 0.01F);
      Float float0 = new Float((double) (-488.9181F));
      Float float1 = new Float((-3225.08511532));
      wall0.setArcExtent(float1);
      Wall wall2 = wall1.getWallAtEnd();
      wall2.containsWallStartAt((-1.0F), (-488.9181F), (-1.0F));
      wall0.setThickness(1997.59F);
      wall2.setArcExtent(float0);
      Wall wall3 = new Wall(2088.2207F, (-4.5165844F), (-213.987F), (-213.987F), 0.01F);
      wall3.intersectsRectangle(0.01F, (-1129.7291F), (-1.0F), (-475.951F));
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      Float float2 = new Float(0.0F);
      wall0.setArcExtent(float2);
      wall0.setYEnd((-1010.2995F));
      wall0.containsPoint(0.0F, (-1171.8734F), (-1171.8734F));
      wall0.containsWallEndAt(831.8F, (-1.0F), 1.0F);
      Integer.getInteger("5c 92mF`.>^7T/");
      Integer integer0 = new Integer((-308));
      wall0.setLeftSideColor(integer0);
      wall0.getLevel();
      Level level0 = new Level("5c 92mF`.>^7T/", 0.0F, 1.0F, (-2140.2F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setXEnd((-1.0F));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall0.setYEnd(0.0F);
      wall0.containsPoint((-1128.53F), 1.0F, 0.0F);
      wall0.containsWallEndAt(3604.331F, (-1.0F), 0.0F);
      Integer.getInteger("bWbg");
      Integer integer0 = new Integer((-308));
      wall0.setLeftSideColor(integer0);
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
      wall0.getYEnd();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 3352.11F, 0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.getWallAtStart();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      try { 
        Integer.valueOf("|'[s<ma2", 8192);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 8192 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-114.6F), 652.0F, 3186.6355F);
      wall0.setYStart((-114.6F));
      wall0.setRightSideShininess((-4053.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall0.getWallAtStart();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall2.containsPoint((-4053.0F), 578.0F, (-414.0F));
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(2162.0F, 2162.0F, 2162.0F, 2162.0F, 2162.0F);
      wall0.getLeftSideColor();
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-988.25116F), (-1109.896F), 1061.0F);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-988.25116F));
      wall0.setRightSideShininess((-1109.896F));
      wall0.getYArcCircleCenter();
      wall0.setLeftSideShininess((-1109.896F));
      Wall wall1 = wall0.clone();
      wall1.getThickness();
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall(390.0025F, 390.0025F, 390.0025F, 390.0025F, (-1.0F), (-1.0F));
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(292.0F, 292.0F, 292.0F, 292.0F, 292.0F, 292.0F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(0.0F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, uRLContent0, 1514.1F, 0.0F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.isTrapezoidal();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 10.978335F, 10.978335F, (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint(10.978335F, 10.978335F, 0.0F);
      wall0.containsWallEndAt(827.393F, (-1.0F), (-1.0F));
      wall0.setXEnd(10.978335F);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(390.0025F, (-1.0F), 390.0025F, 390.0025F, (-1.0F), (-1.0F));
      wall0.containsWallEndAt(390.0025F, (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F, 291.7418F);
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      Float float1 = new Float(291.7418F);
      wall0.setHeight(float1);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.0F);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Wall wall1 = wall0.clone();
      wall1.getLevel();
      wall1.getHeight();
      wall1.getPattern();
      wall1.setPattern((TextureImage) null);
      wall0.getPattern();
      wall1.getHeight();
      wall0.setThickness(0.0F);
      Integer integer0 = Integer.valueOf((-854));
      Integer.getInteger(" s$u0()3Ge4{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      wall1.setLeftSideColor(integer0);
      wall0.getLeftSideShininess();
      wall1.getStartPointToEndPointDistance();
      wall1.getPoints();
      wall1.setLeftSideColor(integer0);
      wall0.getLength();
      Random.setNextRandom((-854));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall1.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), 0.01F);
      Float.max((-213.987F), 0.01F);
      wall0.setXStart(0.01F);
      Float.min((-1.0F), 1997.59F);
      Float float0 = new Float((double) (-7690.2F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      wall0.setHeight(float0);
      wall0.setHeight((Float) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Float.max((-213.987F), (-0.44778875F));
      Float.max((-213.987F), (-0.44778875F));
      Integer integer0 = new Integer((-626127193));
      wall0.setLeftSideColor(integer0);
      wall0.setXStart((-0.44778875F));
      Float.min((-1.0F), 1997.59F);
      Float float0 = new Float((double) (-1.0F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1.0F), (-1.0F), (-7690.2F));
      wall0.getRightSideColor();
      wall0.getWallAtEnd();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      wall0.getRightSideTexture();
      Level level0 = new Level("", 289.0F, 289.0F, 1541.88F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getLevel();
      Random.setNextRandom(8192);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 289.0F, 289.0F, 289.0F);
      wall0.getThickness();
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "uHR'_u'c2cy{(E,{o:", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.tools.TemporaryURLContent", resourceURLContent0, 0.0F, 1058.9192F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      Float float0 = new Float(1058.9192F);
      Float float1 = new Float((-4.5165844F));
      wall0.setArcExtent(float1);
      wall0.setYEnd((-4.5165844F));
      wall0.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      Wall wall2 = wall0.clone();
      wall1.getYArcCircleCenter();
      wall2.setLeftSideShininess((-1309.2814F));
      wall1.getThickness();
      wall0.getRightSideTexture();
      wall0.setPattern(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 9.898462F, 1209.4F, 2129.6233F, 2129.6233F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float(8.898462F);
      wall0.setArcExtent(float0);
      wall0.setYEnd(1.0F);
      wall0.move(1029.0F, 1045.6821F);
      wall0.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall1 = new Wall((-2383.3816F), 1.0F, 1209.4F, (-1.0F), 2930.081F, (-534.0F));
      wall1.clone();
      wall1.getYArcCircleCenter();
      wall0.setLeftSideShininess(2162.0F);
      wall1.getThickness();
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      wall0.setXStart(0.0F);
      wall0.setYEnd((-2622.1F));
      wall0.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall0.getYArcCircleCenter();
      wall1.setLeftSideShininess(1614.0F);
      wall1.containsWallEndAt(1705.1007F, (-971.8383F), (-1737.9F));
      wall0.getThickness();
      wall1.getLeftSideTexture();
      wall1.setPattern((TextureImage) null);
      wall0.getRightSideShininess();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(237.92502F, 237.92502F, 237.92502F, 2.0F, 237.92502F, 237.92502F);
      Float float0 = new Float(1.0001);
      wall0.setHeightAtEnd(float0);
      Wall wall1 = wall0.clone();
      wall1.setHeight(float0);
      String string0 = "com.eteks.sweethome3d.tools.TemporaryURLContent";
      String string1 = "GGgMQ3EQ";
      String string2 = "FLOOR_THICKNESS";
      try { 
        MockURL.URL("FLOOR_THICKNESS");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: FLOOR_THICKNESS
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness((-1.0F));
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float1);
      wall0.setYEnd(3457.8572F);
      Wall wall1 = wall0.clone();
      wall1.containsPoint(0.0F, 0.0F, (-1.0F));
      wall1.containsWallEndAt(0.0F, 2.0F, 3604.331F);
      Integer.getInteger("bWbg");
      Wall wall2 = new Wall((-4362.197F), 3604.331F, (-1.0F), (-833.26F), 2.0F, 2.0F);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.getPattern();
      wall0.setWallAtStart(wall1);
      wall1.intersectsRectangle(2322.3F, (-1.0F), (-1.413354F), (-310.6521F));
      Float float0 = new Float((double) 1058.9192F);
      wall1.setHeightAtEnd(float0);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-1239.1F), (-1239.1F), 0.0F, (-1239.1F), 0.0F, 0.0F);
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(9.898462F, 9.898462F, 0.0F, 0.0F, 9.898462F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.move((-1.0F), 0.0F);
      wall0.containsWallStartAt((-175.0747F), (-1.0F), 9.898462F);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.getWallAtStart();
      linkedList1.add(wall0);
      linkedList1.add((Wall) null);
      wall0.setThickness(0.01F);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(9.898462F, 9.898462F, 0.0F, 0.0F, 9.898462F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setThickness(1058.9192F);
      Wall wall1 = wall0.clone();
      wall1.setThickness(0.0F);
      wall1.setRightSideShininess(166.34906F);
      wall1.setYStart(31.0F);
      wall0.setWallAtStart(wall1);
      wall0.getPattern();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setXEnd(1362.0F);
      wall0.setRightSideShininess(9.898462F);
      wall2.intersectsRectangle(2184.0F, 1.0F, 0.01F, 2507.6206F);
      wall2.getRightSideShininess();
      wall2.getRightSideColor();
      wall0.getPoints();
      wall0.getXStart();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Wall wall0 = new Wall(2476.5364F, (-2305.0442F), 2476.5364F, 2476.5364F, 2476.5364F, (-2305.0442F));
      Float float0 = new Float(7341100.6914473325);
      wall0.setArcExtent(float0);
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(9.898462F, 9.898462F, 0.0F, 0.0F, 9.898462F);
      HomeTexture homeTexture0 = null;
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float((-4.5165844F));
      wall0.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.move((-1.0F), 0.0F);
      wall0.containsWallStartAt((-1.0F), (-1.0F), 9.898462F);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.getWallAtStart();
      linkedList1.add(wall0);
      linkedList1.add((Wall) null);
      wall0.setThickness((-4.5165844F));
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F);
      wall0.getWallAtStart();
      String string0 = ".x5I?xN*%--Phr*0ML";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.setThickness(1058.9192F);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall0.setYEnd(0.0F);
      wall0.move((-988.25116F), 2.0F);
      wall0.containsWallStartAt(607.0087F, 0.0F, (-97.0F));
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      linkedList1.add(wall0);
      Wall wall1 = wall0.clone();
      linkedList1.add(wall1);
      Wall.clone((List<Wall>) linkedList1);
      Wall wall2 = wall0.clone();
      wall2.getPoints();
      wall2.getPoints();
      Wall wall3 = new Wall(1145.6F, 607.0087F, (-2352.756F), (-1.0F), 314.2227F);
      wall3.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      Float float0 = new Float(899.4F);
      wall1.setHeightAtEnd(float0);
      wall1.getLevel();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-1635.3031F), (-1635.3031F), (-1635.3031F), (-1635.3031F), 4077.8691F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      wall0.setYEnd((-1.0F));
      wall0.move((-1.0F), 0.0F);
      wall0.containsWallStartAt((-175.0747F), (-1.0F), (-1.0F));
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.getWallAtStart();
      linkedList1.add((Wall) null);
      wall0.setThickness(0.01F);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(390.0025F, 390.0025F, 390.0025F, 390.0025F, 390.0025F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-988.25116F), (-988.25116F), 1061.0F);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-988.25116F));
      wall0.setRightSideShininess((-988.25116F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.intersectsRectangle(1061.0F, (-988.25116F), 1061.0F, (-988.25116F));
      wall0.setYEnd(1.0F);
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideColor();
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(2944.0098F, 2944.0098F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      wall0.setWallAtStart(wall0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Wall wall1 = wall0.clone();
      wall0.getPoints();
      wall1.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      wall0.setXEnd(899.4F);
      wall0.getThickness();
      wall0.getRightSideColor();
      Wall wall1 = new Wall(1102.0F, 137.46927F, 2121.0F, 2129.374F, 1102.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Wall$Property", propertyChangeListener0);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setWallAtStart(wall1);
      wall0.intersectsRectangle((-629.192F), (-629.192F), 2945.2F, 1166.2662F);
      wall0.getXArcCircleCenter();
      wall0.clone();
      wall0.intersectsRectangle(899.4F, 899.4F, 231.46F, (-591.1723F));
      wall0.getYStart();
      wall0.getStartPointToEndPointDistance();
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall1.getXEnd();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      wall0.setXStart(0.0F);
      wall0.setYEnd((-2622.1F));
      wall0.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall0.getYArcCircleCenter();
      wall1.setLeftSideShininess(1614.0F);
      wall0.getThickness();
      wall1.getLeftSideTexture();
      wall1.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(292.0F, 292.0F, 292.0F, 292.0F, 292.0F);
      wall0.setPattern((TextureImage) null);
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, (-1.0F), 362.08466F);
      wall0.getRightSideShininess();
      wall0.getRightSideColor();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F), (-23.094557F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(2498.2F, 2498.2F, 2498.2F, 2498.2F, 2498.2F, 2184.0F);
      wall0.getLength();
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      wall0.getRightSideTexture();
      wall0.getHeight();
      wall0.setYEnd(0.0F);
      wall0.isTrapezoidal();
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      wall0.setThickness(2184.0F);
      Float float0 = new Float((-2300.2F));
      Float.sum(2255.9246F, (-1271.0F));
      Float.isFinite(2498.2F);
      Float.max(1249.1F, 798.569F);
      Float.isFinite(1.0F);
      wall0.setHeight(float0);
      wall0.setXEnd(1249.1F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setRightSideShininess((-4053.0F));
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.setXEnd((-414.0F));
      wall2.getPoints();
      wall2.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(727.0F, 0.01F, 0.0F, 0.0F, 727.0F);
      wall0.setLevel((Level) null);
      wall0.setXEnd((-1.0F));
      wall0.setXStart(0.0F);
      wall0.setYEnd(0.01F);
      wall0.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall1.getYArcCircleCenter();
      wall0.setLeftSideShininess((-1.0F));
      wall0.getThickness();
      wall0.getLeftSideTexture();
      wall1.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(31.9F, 0.0F, 2.0F, 0.1F, 31.9F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setYEnd(0.1F);
      wall0.setYStart((-542.0F));
      wall0.setXEnd((-544.13F));
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("g^pxVjCq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.g^pxVjCq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(292.0F, 292.0F, 292.0F, 292.0F, 292.0F, 292.0F);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall1.getStartPointToEndPointDistance();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 909.9218F, 0.0F, 853.0F, 0.0F);
      wall0.getYEnd();
      wall0.getLevel();
      wall0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(289.0F, 289.0F, 289.0F, 289.0F, 289.0F);
      wall0.setHeightAtEnd((Float) null);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall((-2661.5876F), (-2661.5876F), (-1547.2F), (-475.951F), (-475.951F));
      wall0.getRightSideColor();
      wall0.setThickness(2.0F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      Wall wall1 = new Wall((-2093.7803F), 0.0F, 0.0F, (-1.0F), (-1547.2F));
      Float float2 = new Float((double) (-2117.0679F));
      wall1.setArcExtent(float2);
      wall1.setYEnd(998.0F);
      wall1.containsPoint(179.0F, 0.0F, (-2212.536F));
      // Undeclared exception!
      wall1.containsWallEndAt(0.0F, (-1112.609F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint((-1.0F), (-1.0F), 0.0F);
      wall0.setXEnd((-1.0F));
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer(9982);
      wall0.setLeftSideColor(integer0);
      wall0.getPoints();
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(292.0F, 292.0F, 292.0F, 292.0F, 292.0F);
      wall0.setXEnd(292.0F);
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setThickness((-1.0F));
      wall1.setRightSideShininess((-27.091614F));
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.setYStart((-2622.1F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("J0#8,Iy=W)qfGNcu_Q", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy2);
      Wall wall2 = wall0.getWallAtStart();
      wall2.isTrapezoidal();
      Wall.Property wall_Property0 = Wall.Property.Y_END;
      wall0.getLevel();
      wall1.setXStart((-1.0F));
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 2.0F, (-2117.0679F), 2.0F);
      wall0.setYEnd(2.0F);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(738.1837F, 738.1837F, (-2117.0679F), (-2117.0679F), 738.1837F);
      Level level0 = new Level("`U4-,_GLUA", (-451.4742F), 738.1837F, (-451.4742F));
      wall0.setLevel(level0);
      wall0.getLeftSideColor();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(709.1911F, 709.1911F, (-2117.0679F), (-2117.0679F), 709.1911F);
      Float float0 = new Float((double) 709.1911F);
      wall0.setArcExtent(float0);
      wall0.containsPoint((-2117.0679F), 709.1911F, (-2117.0679F));
      wall0.setXEnd((-2117.0679F));
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      wall0.containsPoint(0.0F, (-1.0F), 0.0F);
      wall0.containsWallEndAt(827.393F, (-1.0F), 0.0F);
      wall0.setArcExtent((Float) null);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.4142195F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.49917F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(99.49917F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 2129.374F, 2121.0F, 0.0F, (-1.0F));
      assertNotNull(wall1);
      assertEquals(3005.474F, wall1.getLength(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1064.687F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2129.374F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1060.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3005.474F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-1.0F), 0.01F, (-1.0F), (-750.8083F), 1326.6984F);
      assertNotNull(wall2);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall wall3 = wall1.clone();
      assertNotNull(wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(3005.474F, wall1.getLength(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1064.687F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2129.374F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1060.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3005.474F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(1064.687F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(1060.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(3005.474F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2129.374F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2121.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(3005.474F, wall3.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      
      wall3.setWallAtStart(wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(3005.474F, wall1.getLength(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1064.687F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2129.374F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1060.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3005.474F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(1064.687F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(1060.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(3005.474F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2129.374F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2121.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(3005.474F, wall3.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      
      boolean boolean0 = wall0.intersectsRectangle(2624.9902F, 0.01F, 2624.9902F, 5426.772F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.4142195F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.49917F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(99.49917F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-100.49917F), float1, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.4142195F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.49917F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(99.49917F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall4 = wall2.clone();
      assertNotNull(wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-750.8083F), wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(750.8183F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1326.6984F, wall4.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals((-1.0F), wall4.getXStart(), 0.01F);
      assertEquals(750.8183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals(0.01F, wall4.getYStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      
      boolean boolean1 = wall4.intersectsRectangle(0.0F, (-1.0F), (-1239.1F), 2666.0F);
      assertTrue(boolean1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-750.8083F), wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(750.8183F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1326.6984F, wall4.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals((-1.0F), wall4.getXStart(), 0.01F);
      assertEquals(750.8183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals(0.01F, wall4.getYStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(boolean1 == boolean0);
      
      float float2 = wall2.getYStart();
      assertEquals(0.01F, float2, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      
      Wall wall5 = new Wall(3658.044F, 0.01F, (-1238.1F), (-1.0F), 0.0F, 0.0F);
      assertNotNull(wall5);
      assertEquals(4896.144F, wall5.getLength(), 0.01F);
      assertEquals(0.01F, wall5.getYStart(), 0.01F);
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(3658.044F, wall5.getXStart(), 0.01F);
      assertEquals(1209.9719F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getHeight(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertFalse(wall5.isTrapezoidal());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getArcExtent());
      assertEquals((-1238.1F), wall5.getXEnd(), 0.01F);
      assertEquals(4896.144F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.495F), wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertFalse(wall5.equals((Object)wall0));
      assertFalse(wall5.equals((Object)wall2));
      assertFalse(wall5.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall1));
      
      float float3 = wall5.getStartPointToEndPointDistance();
      assertEquals(4896.144F, float3, 0.01F);
      assertNotSame(wall5, wall0);
      assertNotSame(wall5, wall2);
      assertNotSame(wall5, wall3);
      assertNotSame(wall5, wall4);
      assertNotSame(wall5, wall1);
      assertEquals(4896.144F, wall5.getLength(), 0.01F);
      assertEquals(0.01F, wall5.getYStart(), 0.01F);
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(3658.044F, wall5.getXStart(), 0.01F);
      assertEquals(1209.9719F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getHeight(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertFalse(wall5.isTrapezoidal());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getArcExtent());
      assertEquals((-1238.1F), wall5.getXEnd(), 0.01F);
      assertEquals(4896.144F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.495F), wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertFalse(wall5.equals((Object)wall0));
      assertFalse(wall5.equals((Object)wall2));
      assertFalse(wall5.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Wall wall6 = wall4.clone();
      assertNotNull(wall6);
      assertNotSame(wall6, wall3);
      assertNotSame(wall6, wall4);
      assertNotSame(wall6, wall1);
      assertNotSame(wall6, wall5);
      assertNotSame(wall6, wall0);
      assertNotSame(wall6, wall2);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall6);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getRightSideColor());
      assertNull(wall6.getArcExtent());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertEquals(1326.6984F, wall6.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall6.getYStart(), 0.01F);
      assertEquals((-750.8083F), wall6.getYEnd(), 0.01F);
      assertEquals(750.8183F, wall6.getLength(), 0.01F);
      assertNull(wall6.getHeight());
      assertNull(wall6.getLeftSideColor());
      assertEquals((-1.0F), wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall6.getXStart(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals((-1.0F), wall6.getXArcCircleCenter(), 0.01F);
      assertEquals(750.8183F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-750.8083F), wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(750.8183F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1326.6984F, wall4.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals((-1.0F), wall4.getXStart(), 0.01F);
      assertEquals(750.8183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals(0.01F, wall4.getYStart(), 0.01F);
      assertFalse(wall6.equals((Object)wall3));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall6.equals((Object)wall5));
      assertFalse(wall6.equals((Object)wall0));
      assertFalse(wall6.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall5));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      
      Wall wall7 = wall6.clone();
      assertNotNull(wall7);
      assertNotSame(wall6, wall3);
      assertNotSame(wall6, wall4);
      assertNotSame(wall6, wall1);
      assertNotSame(wall6, wall5);
      assertNotSame(wall6, wall0);
      assertNotSame(wall6, wall2);
      assertNotSame(wall6, wall7);
      assertNotSame(wall7, wall6);
      assertNotSame(wall7, wall4);
      assertNotSame(wall7, wall0);
      assertNotSame(wall7, wall1);
      assertNotSame(wall7, wall3);
      assertNotSame(wall7, wall5);
      assertNotSame(wall7, wall2);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall7);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall7);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall6);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getRightSideColor());
      assertNull(wall6.getArcExtent());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertEquals(1326.6984F, wall6.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall6.getYStart(), 0.01F);
      assertEquals((-750.8083F), wall6.getYEnd(), 0.01F);
      assertEquals(750.8183F, wall6.getLength(), 0.01F);
      assertNull(wall6.getHeight());
      assertNull(wall6.getLeftSideColor());
      assertEquals((-1.0F), wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall6.getXStart(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals((-1.0F), wall6.getXArcCircleCenter(), 0.01F);
      assertEquals(750.8183F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall7.isTrapezoidal());
      assertEquals(0.0F, wall7.getLeftSideShininess(), 0.01F);
      assertEquals((-375.39914F), wall7.getYArcCircleCenter(), 0.01F);
      assertNull(wall7.getLeftSideColor());
      assertEquals((-1.0F), wall7.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall7.getXEnd(), 0.01F);
      assertEquals((-750.8083F), wall7.getYEnd(), 0.01F);
      assertNull(wall7.getRightSideColor());
      assertNull(wall7.getArcExtent());
      assertNull(wall7.getHeightAtEnd());
      assertEquals(1326.6984F, wall7.getThickness(), 0.01F);
      assertEquals(750.8183F, wall7.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(750.8183F, wall7.getLength(), 0.01F);
      assertEquals(0.0F, wall7.getRightSideShininess(), 0.01F);
      assertNull(wall7.getHeight());
      assertEquals((-1.0F), wall7.getXStart(), 0.01F);
      assertEquals(0.01F, wall7.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-750.8083F), wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(750.8183F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1326.6984F, wall4.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals((-1.0F), wall4.getXStart(), 0.01F);
      assertEquals(750.8183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals(0.01F, wall4.getYStart(), 0.01F);
      assertFalse(wall6.equals((Object)wall3));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall6.equals((Object)wall5));
      assertFalse(wall6.equals((Object)wall0));
      assertFalse(wall6.equals((Object)wall2));
      assertFalse(wall7.equals((Object)wall6));
      assertFalse(wall7.equals((Object)wall4));
      assertFalse(wall7.equals((Object)wall0));
      assertFalse(wall7.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall3));
      assertFalse(wall7.equals((Object)wall5));
      assertFalse(wall7.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall5));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall6));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall6));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      
      boolean boolean2 = wall2.isTrapezoidal();
      assertFalse(boolean2);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall7);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(wall2.equals((Object)wall5));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall6));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall7));
      
      Float float4 = wall7.getHeight();
      assertNull(float4);
      assertNotSame(wall6, wall3);
      assertNotSame(wall6, wall4);
      assertNotSame(wall6, wall1);
      assertNotSame(wall6, wall5);
      assertNotSame(wall6, wall0);
      assertNotSame(wall6, wall2);
      assertNotSame(wall6, wall7);
      assertNotSame(wall7, wall6);
      assertNotSame(wall7, wall4);
      assertNotSame(wall7, wall0);
      assertNotSame(wall7, wall1);
      assertNotSame(wall7, wall3);
      assertNotSame(wall7, wall5);
      assertNotSame(wall7, wall2);
      assertNotSame(wall2, wall5);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall7);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall7);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall6);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getRightSideColor());
      assertNull(wall6.getArcExtent());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertEquals(1326.6984F, wall6.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall6.getYStart(), 0.01F);
      assertEquals((-750.8083F), wall6.getYEnd(), 0.01F);
      assertEquals(750.8183F, wall6.getLength(), 0.01F);
      assertNull(wall6.getHeight());
      assertNull(wall6.getLeftSideColor());
      assertEquals((-1.0F), wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall6.getXStart(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals((-1.0F), wall6.getXArcCircleCenter(), 0.01F);
      assertEquals(750.8183F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall7.isTrapezoidal());
      assertEquals(0.0F, wall7.getLeftSideShininess(), 0.01F);
      assertEquals((-375.39914F), wall7.getYArcCircleCenter(), 0.01F);
      assertNull(wall7.getLeftSideColor());
      assertEquals((-1.0F), wall7.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall7.getXEnd(), 0.01F);
      assertEquals((-750.8083F), wall7.getYEnd(), 0.01F);
      assertNull(wall7.getRightSideColor());
      assertNull(wall7.getArcExtent());
      assertNull(wall7.getHeightAtEnd());
      assertEquals(1326.6984F, wall7.getThickness(), 0.01F);
      assertEquals(750.8183F, wall7.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(750.8183F, wall7.getLength(), 0.01F);
      assertEquals(0.0F, wall7.getRightSideShininess(), 0.01F);
      assertNull(wall7.getHeight());
      assertEquals((-1.0F), wall7.getXStart(), 0.01F);
      assertEquals(0.01F, wall7.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-375.39914F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1326.6984F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(750.8183F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(750.8183F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-750.8083F), wall2.getYEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-750.8083F), wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(750.8183F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1326.6984F, wall4.getThickness(), 0.01F);
      assertEquals((-375.39914F), wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals((-1.0F), wall4.getXStart(), 0.01F);
      assertEquals(750.8183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals(0.01F, wall4.getYStart(), 0.01F);
      assertFalse(wall6.equals((Object)wall3));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall6.equals((Object)wall5));
      assertFalse(wall6.equals((Object)wall0));
      assertFalse(wall6.equals((Object)wall2));
      assertFalse(wall6.equals((Object)wall7));
      assertFalse(wall7.equals((Object)wall6));
      assertFalse(wall7.equals((Object)wall4));
      assertFalse(wall7.equals((Object)wall0));
      assertFalse(wall7.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall3));
      assertFalse(wall7.equals((Object)wall5));
      assertFalse(wall7.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall5));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall6));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall7));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall7));
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall6));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(2498.2F, 2498.2F, 2498.2F, 2498.2F, 2498.2F, 2184.0F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2498.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(2498.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(2498.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setThickness(2498.2F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setRightSideShininess(0.1F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(2498.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(2498.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(2498.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(1249.105F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.19F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(2498.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2498.19F, wall1.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(2498.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(1249.105F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.19F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(2498.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2498.19F, wall1.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setXEnd(0.0F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(1249.105F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(3532.9812F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(3532.9812F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1249.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(1249.105F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(3532.9812F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(3532.9812F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1249.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1249.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3532.9812F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2498.2F, wall2.getYEnd(), 0.01F);
      assertEquals(1249.105F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall2.getThickness(), 0.01F);
      assertEquals(2498.2F, wall2.getXStart(), 0.01F);
      assertEquals(3532.9812F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2184.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setRightSideShininess(0.0F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(1249.105F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(3532.9812F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(3532.9812F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1249.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1249.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3532.9812F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2498.2F, wall2.getYEnd(), 0.01F);
      assertEquals(1249.105F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall2.getThickness(), 0.01F);
      assertEquals(2498.2F, wall2.getXStart(), 0.01F);
      assertEquals(3532.9812F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2184.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, (-3434.8628F), (-59.7F), (-1.0F));
      assertFalse(boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getRightSideShininess();
      assertEquals(0.1F, float1, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2498.2F, wall1.getYEnd(), 0.01F);
      assertEquals(2184.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2498.2F, wall1.getXStart(), 0.01F);
      assertEquals(1249.105F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(3532.9812F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall1.getThickness(), 0.01F);
      assertEquals(3532.9812F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1249.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2498.2F, wall0.getThickness(), 0.01F);
      assertEquals(2498.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2498.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2184.0F, wall0.getHeight(), 0.01F);
      assertEquals(2498.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2498.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2498.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2498.2F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.8068646F, 0.8068646F, 0.8068646F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.8068646F, wall0.getXEnd(), 0.01F);
      assertEquals(0.8068646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.8068646F, wall0.getLength(), 0.01F);
      assertEquals((-0.09656769F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.8068646F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.8068646F, wall0.getYStart(), 0.01F);
      assertEquals(1.8068646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.8068646F, wall0.getXEnd(), 0.01F);
      assertEquals(0.8068646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.8068646F, wall0.getLength(), 0.01F);
      assertEquals((-0.09656769F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.8068646F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.8068646F, wall0.getYStart(), 0.01F);
      assertEquals(1.8068646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.8068646F, wall0.getXEnd(), 0.01F);
      assertEquals(0.8068646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.8068646F, wall0.getLength(), 0.01F);
      assertEquals((-0.09656769F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.8068646F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.8068646F, wall0.getYStart(), 0.01F);
      assertEquals(1.8068646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0.8068646F, 0.0F);
      assertTrue(boolean0);
      assertEquals(0.8068646F, wall0.getXEnd(), 0.01F);
      assertEquals(0.8068646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.8068646F, wall0.getLength(), 0.01F);
      assertEquals((-0.09656769F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.8068646F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.8068646F, wall0.getYStart(), 0.01F);
      assertEquals(1.8068646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(827.393F, (-1.0F), 0.0F);
      assertFalse(boolean1);
      assertEquals(0.8068646F, wall0.getXEnd(), 0.01F);
      assertEquals(0.8068646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.8068646F, wall0.getLength(), 0.01F);
      assertEquals((-0.09656769F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.8068646F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.8068646F, wall0.getYStart(), 0.01F);
      assertEquals(1.8068646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean1 == boolean0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.8068646F, wall0.getXEnd(), 0.01F);
      assertEquals(0.8068646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.8068646F, wall0.getLength(), 0.01F);
      assertEquals((-0.09656769F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.8068646F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.8068646F, wall0.getYStart(), 0.01F);
      assertEquals(1.8068646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      assertNotNull(wall0);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXEnd(899.4F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float0 = wall0.getThickness();
      assertEquals(899.4F, float0, 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(1102.0F, 137.46927F, 2121.0F, 2129.374F, 1102.0F);
      assertNotNull(wall1);
      assertEquals(2129.374F, wall1.getYEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1133.4216F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1102.0F, wall1.getXStart(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getLength(), 0.01F);
      assertEquals(137.46927F, wall1.getYStart(), 0.01F);
      assertEquals(1611.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1102.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2129.374F, wall1.getYEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1133.4216F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1102.0F, wall1.getXStart(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getLength(), 0.01F);
      assertEquals(137.46927F, wall1.getYStart(), 0.01F);
      assertEquals(1611.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1102.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.intersectsRectangle((-629.192F), (-629.192F), 2945.2F, 1166.2662F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1922.3F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2945.2F, wall2.getXStart(), 0.01F);
      assertEquals(899.4F, wall2.getHeight(), 0.01F);
      assertEquals(2945.2F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1922.3F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(899.4F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2893.198F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(899.4F, wall2.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall2.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      boolean boolean1 = wall0.intersectsRectangle(899.4F, 899.4F, 231.46F, (-591.1723F));
      assertFalse(boolean1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      
      float float2 = wall0.getYStart();
      assertEquals(2945.2F, float2, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      float float3 = new Float(2121.0F);
      assertEquals(2121.0F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      boolean boolean2 = wall1.isTrapezoidal();
      assertFalse(boolean2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(2129.374F, wall1.getYEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1133.4216F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1102.0F, wall1.getXStart(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getLength(), 0.01F);
      assertEquals(137.46927F, wall1.getYStart(), 0.01F);
      assertEquals(1611.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1102.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      wall0.setYStart(2121.0F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(2121.0F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2382.7722F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(1510.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(2382.7722F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(2121.0F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2382.7722F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(1510.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(2382.7722F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(2121.0F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2382.7722F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(1510.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(2382.7722F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setLeftSideColor((Integer) null);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(2129.374F, wall1.getYEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1133.4216F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1102.0F, wall1.getXStart(), 0.01F);
      assertEquals(2121.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2237.4194F, wall1.getLength(), 0.01F);
      assertEquals(137.46927F, wall1.getYStart(), 0.01F);
      assertEquals(1611.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1102.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(2944.0098F, 2944.0098F, 899.4F, 899.4F, 899.4F, 899.4F);
      assertNotNull(wall0);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      
      wall0.setXEnd(899.4F);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals(899.4F, float0, 0.01F);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-629.192F), (-629.192F), 2944.0098F, (-2340.2473F));
      assertFalse(boolean0);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      
      Float float1 = new Float((double) (-2340.2473F));
      assertEquals((-2340.2473F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean1 = linkedList0.add(wall0);
      assertTrue(boolean1);
      assertEquals(1921.7048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertEquals(2944.0098F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2891.515F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1921.7048F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2944.0098F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2891.515F, wall0.getLength(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(boolean1 == boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("J0#8,Iy=W)qfGNcu_Q", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("J0#8,Iy=W)qfGNcu_Q", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall0 = new Wall(0.0F, 0.1F, (-986.064F), (-1.0F), (-1508.0065F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(986.06464F, wall0.getLength(), 0.01F);
      assertEquals((-493.032F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-986.064F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(986.06464F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1508.0065F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(986.06464F, wall0.getLength(), 0.01F);
      assertEquals((-493.032F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-986.064F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(986.06464F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1508.0065F), wall0.getThickness(), 0.01F);
      assertEquals((-1508.0065F), wall1.getThickness(), 0.01F);
      assertEquals(986.06464F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-986.064F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(986.06464F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-493.032F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = new Level("J0#8,Iy=W)qfGNcu_Q", 624.777F, 624.777F, (-1109.896F));
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-1109.896F), level0.getHeight(), 0.01F);
      assertEquals(624.777F, level0.getElevation(), 0.01F);
      assertEquals(624.777F, level0.getFloorThickness(), 0.01F);
      assertEquals("J0#8,Iy=W)qfGNcu_Q", level0.getName());
      
      wall1.setLevel(level0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(986.06464F, wall0.getLength(), 0.01F);
      assertEquals((-493.032F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-986.064F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(986.06464F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1508.0065F), wall0.getThickness(), 0.01F);
      assertEquals((-1508.0065F), wall1.getThickness(), 0.01F);
      assertEquals(986.06464F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-986.064F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(986.06464F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-493.032F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1109.896F), level0.getHeight(), 0.01F);
      assertEquals(624.777F, level0.getElevation(), 0.01F);
      assertEquals(624.777F, level0.getFloorThickness(), 0.01F);
      assertEquals("J0#8,Iy=W)qfGNcu_Q", level0.getName());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(827.393F, (-1.0F), 0.0F);
      assertFalse(boolean1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      wall0.setArcExtent((Float) null);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(2945.2F, 2945.2F, 899.4F, 899.4F, 899.4F, 899.4F);
      assertNotNull(wall0);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXEnd(899.4F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getThickness();
      assertEquals(899.4F, float0, 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtStart(wall0);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.intersectsRectangle((-629.192F), (-629.192F), 2945.2F, 1166.2662F);
      assertTrue(boolean0);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1922.3F, float1, 0.01F);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals(float1, float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2893.198F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1922.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2945.2F, wall1.getYStart(), 0.01F);
      assertEquals(1922.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2945.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(899.4F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(899.4F, wall1.getXEnd(), 0.01F);
      assertEquals(899.4F, wall1.getYEnd(), 0.01F);
      assertEquals(899.4F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2893.198F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(2129.374F, 2121.0F, 2121.0F, 1166.2662F, 899.4F);
      assertNotNull(wall2);
      assertEquals(899.4F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(954.7705F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2125.187F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1643.633F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2121.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1166.2662F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2121.0F, wall2.getYStart(), 0.01F);
      assertEquals(954.7705F, wall2.getLength(), 0.01F);
      assertEquals(2129.374F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall2.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(899.4F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(954.7705F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2125.187F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1643.633F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2121.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1166.2662F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2121.0F, wall2.getYStart(), 0.01F);
      assertEquals(954.7705F, wall2.getLength(), 0.01F);
      assertEquals(2129.374F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertNull(integer1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(2893.198F, wall0.getLength(), 0.01F);
      assertEquals(1922.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(899.4F, wall0.getHeight(), 0.01F);
      assertEquals(899.4F, wall0.getXEnd(), 0.01F);
      assertEquals(899.4F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2945.2F, wall0.getYStart(), 0.01F);
      assertEquals(899.4F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1922.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2893.198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2945.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      float float3 = wall2.getLength();
      assertEquals(954.7705F, float3, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(899.4F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(954.7705F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2125.187F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1643.633F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2121.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1166.2662F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2121.0F, wall2.getYStart(), 0.01F);
      assertEquals(954.7705F, wall2.getLength(), 0.01F);
      assertEquals(2129.374F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd(float0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getHeightAtEnd();
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(237.92502F, 237.92502F, 237.92502F, 2.0F, 237.92502F, 237.92502F);
      assertNotNull(wall0);
      assertEquals(237.92502F, wall0.getXStart(), 0.01F);
      assertEquals(237.92502F, wall0.getYStart(), 0.01F);
      assertEquals(119.96251F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(237.92502F, wall0.getThickness(), 0.01F);
      assertEquals(235.92502F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(237.92502F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(237.92502F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(237.92502F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(235.92502F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(2.0F);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(237.92502F, wall0.getXStart(), 0.01F);
      assertEquals(237.92502F, wall0.getYStart(), 0.01F);
      assertEquals(119.96251F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(237.92502F, wall0.getThickness(), 0.01F);
      assertEquals(313.66788F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(235.92502F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.37213F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(237.92502F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(237.92502F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(237.92502F, 2.0F, 237.92502F);
      assertTrue(boolean0);
      assertEquals(237.92502F, wall0.getXStart(), 0.01F);
      assertEquals(237.92502F, wall0.getYStart(), 0.01F);
      assertEquals(119.96251F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(237.92502F, wall0.getThickness(), 0.01F);
      assertEquals(313.66788F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(235.92502F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.37213F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(237.92502F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(237.92502F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNull(float1);
      assertEquals(237.92502F, wall0.getXStart(), 0.01F);
      assertEquals(237.92502F, wall0.getYStart(), 0.01F);
      assertEquals(119.96251F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(237.92502F, wall0.getThickness(), 0.01F);
      assertEquals(313.66788F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(235.92502F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.37213F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(237.92502F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(237.92502F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setThickness((-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(8.1656197E15F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setYEnd(3457.8572F);
      assertEquals(1728.9286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3457.8572F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8235547E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3457.8572F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3457.8572F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1728.9286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3457.8572F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8235547E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3457.8572F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3457.8572F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3457.8572F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(3457.8572F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2.8235547E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3457.8572F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1728.9286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsPoint(0.0F, 0.0F, (-1463.3551F));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1728.9286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3457.8572F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8235547E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3457.8572F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3457.8572F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3457.8572F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(3457.8572F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2.8235547E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3457.8572F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1728.9286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.containsWallEndAt(0.0F, 2.0F, 3604.331F);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1728.9286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3457.8572F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8235547E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3457.8572F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3457.8572F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3457.8572F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(3457.8572F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2.8235547E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3457.8572F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1728.9286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      Integer integer1 = Integer.getInteger("bWbg");
      assertNull(integer1);
      
      Wall wall2 = new Wall(2401.588F, (-4362.197F), 2294.9702F, 994.9794F, 3874.724F, 3457.8572F);
      assertNotNull(wall2);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3457.8572F, wall2.getHeight(), 0.01F);
      assertEquals(2348.279F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(994.9794F, wall2.getYEnd(), 0.01F);
      assertEquals(3874.724F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5358.237F, wall2.getLength(), 0.01F);
      assertEquals((-1683.6086F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-4362.197F), wall2.getYStart(), 0.01F);
      assertEquals(2401.588F, wall2.getXStart(), 0.01F);
      assertEquals(5358.237F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2294.9702F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall0.getLength();
      assertEquals(3457.8572F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(1728.9286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3457.8572F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8235547E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3457.8572F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3457.8572F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNotNull(wall1);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      
      Level level0 = wall1.getLevel();
      assertNull(level0);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F));
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess(0.01F);
      wall1.setYStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall0.setYStart((-2622.1F));
      Wall wall2 = wall0.getWallAtStart();
      wall2.isTrapezoidal();
      Wall.Property wall_Property0 = Wall.Property.Y_END;
      wall0.getLevel();
      wall1.setXStart((-1.0F));
      Float float0 = new Float(0.0F);
      Float.isFinite((-311.24F));
      wall0.setHeight(float0);
      Float float1 = new Float(0.14334869384765625);
      wall2.setArcExtent(float1);
      assertEquals((-2622.1F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 1029.4591F, 2.0F, 2.0F, (-2943.1F), 2.0F);
      Float float0 = new Float(2.0F);
      wall0.setArcExtent(float0);
      boolean boolean0 = wall0.containsPoint((-2943.1F), 1029.4591F, 2.0F);
      assertEquals(331.86194F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setLeftSideShininess(0.0F);
      wall0.setXStart((-1.0F));
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(31.9F, 0.0F, 2.0F, 0.1F, 31.9F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setYEnd(0.1F);
      wall0.setThickness(0.1F);
      Float float0 = new Float(31.9F);
      Float.sum((-2047.6193F), 31.9F);
      Float.isFinite(0.1F);
      Float.max(2428.6F, 2428.6F);
      Float.isFinite(31.9F);
      Float float1 = new Float(798.569F);
      wall0.setHeight(float1);
      wall1.setXEnd(798.569F);
      assertEquals(798.569F, wall1.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(390.0025F, 390.0025F, 390.0025F, 390.0025F, (-1.0F), (-1.0F));
      wall0.getLevel();
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall((-2836.93F), (-1.0F), (-1.0F), (-1.0F), 1523.1633F);
      wall0.setWallAtEnd(wall1);
      boolean boolean0 = wall0.containsPoint((-1.0F), (-1.0F), (-2836.93F));
      wall0.setXEnd((-1.0F));
      Integer integer0 = new Integer(12);
      wall0.setLeftSideColor((Integer) null);
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      
      wall2.getWallAtStart();
      assertEquals(2835.93F, wall2.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.getLevel();
      assertEquals(1523.1633F, wall1.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(1061.0F, 1061.0F, 1061.0F, (-988.25116F), (-1109.896F), 1061.0F);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.setXEnd((-988.25116F));
      wall0.setRightSideShininess((-1109.896F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.intersectsRectangle(1061.0F, (-988.25116F), (-1109.896F), (-988.25116F));
      wall0.getRightSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideColor();
      assertEquals((-1109.896F), wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(2476.5364F, (-2305.0442F), 2476.5364F, (-2305.0442F), (-2305.0442F));
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(list0.contains(wall0));
      assertFalse(list0.isEmpty());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2305.0442F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.setXStart((-1.0F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall((-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F), (-8.265605F));
      Float float0 = wall0.getHeight();
      assertEquals((-8.265605F), (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      wall0.setHeight(float0);
      assertEquals((-8.265605F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }
}
