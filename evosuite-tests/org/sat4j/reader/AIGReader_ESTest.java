/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:25:11 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.reader.AIGReader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AIGReader_ESTest extends AIGReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = AIGReader.decode((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1072296379, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)126;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader.decode((InputStream) byteArrayInputStream0);
      try { 
        aIGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG format only!
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader aIGReader0 = new AIGReader(modelIterator0);
      try { 
        aIGReader0.parseInt(byteArrayInputStream0, 'T');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorunexpected character
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = AIGReader.safeGet(byteArrayInputStream0);
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-255)).when(inputStream0).read();
      int int0 = AIGReader.decode(inputStream0);
      assertEquals((-255), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        AIGReader.safeGet(sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG Error, EOF met too early
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AIGReader.safeGet((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        AIGReader.safeGet(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      AIGReader aIGReader0 = new AIGReader(modelIterator0);
      // Undeclared exception!
      try { 
        aIGReader0.parseInt((InputStream) null, '@');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-156), 217);
      // Undeclared exception!
      try { 
        aIGReader0.parseInt(byteArrayInputStream0, '\'');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      AIGReader aIGReader0 = new AIGReader(modelIterator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3562);
      try { 
        aIGReader0.parseInt(pipedInputStream0, 'c');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      // Undeclared exception!
      try { 
        aIGReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1423), 958);
      // Undeclared exception!
      try { 
        aIGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      AIGReader aIGReader0 = new AIGReader(modelIterator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        aIGReader0.parseInstance((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1615), 0).when(inputStream0).read();
      int int0 = AIGReader.decode(inputStream0);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        AIGReader.decode((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        AIGReader.decode((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        AIGReader.decode((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG Error, EOF met too early
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = AIGReader.safeGet(byteArrayInputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ModelIterator[] modelIteratorArray0 = new ModelIterator[8];
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      modelIteratorArray0[0] = modelIterator0;
      modelIteratorArray0[1] = modelIterator0;
      modelIteratorArray0[2] = modelIterator0;
      modelIteratorArray0[3] = modelIterator0;
      modelIteratorArray0[4] = modelIterator0;
      modelIteratorArray0[5] = modelIterator0;
      modelIteratorArray0[6] = modelIterator0;
      modelIteratorArray0[7] = modelIterator0;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(stringArray0, modelIteratorArray0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader aIGReader0 = new AIGReader(manyCore0);
      try { 
        aIGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG format only!
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      AIGReader aIGReader0 = new AIGReader(modelIterator0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        aIGReader0.parseInt(pushbackInputStream0, 'B');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorexpected digit
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      try { 
        aIGReader0.parseInt(byteArrayInputStream0, '~');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorexpected digit
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      AIGReader aIGReader0 = new AIGReader(modelIterator0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      aIGReader0.decode((int[]) null, printWriter0);
      assertFalse(aIGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(604.586);
      ClausalDataStructureWL clausalDataStructureWL0 = mock(ClausalDataStructureWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(clausalDataStructureWL0).getVocabulary();
      PureOrder pureOrder0 = new PureOrder(0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, pureOrder0, fixedPeriodRestarts0);
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 0, checkMUSSolutionListener0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(modelIteratorToSATAdapter0);
      ISolver iSolver0 = negationDecorator0.getSolvingEngine();
      AIGReader aIGReader0 = new AIGReader(iSolver0);
      int[] intArray0 = new int[1];
      String string0 = aIGReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
