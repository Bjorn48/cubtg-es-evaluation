/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:14:11 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotNull(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[not]", jSTerm1.toString());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[not, [not]]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[not]", jSTerm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[not, [not]]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      boolean boolean2 = jSTerm1.add((Object) null);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[not, [not, null]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[not, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      boolean boolean0 = jSTerm0.add((Object) "nlt");
      assertFalse(jSTerm0.isConstant());
      assertEquals("[nlt]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[nlt]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      assertNotNull(jSPredicateForm0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[nlt]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[nlt]", jSPredicateForm0.toString());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[nlt]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[nlt]", jSPredicateForm0.toString());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(5, stringBuffer0.length());
      assertEquals("(nlt)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      String string0 = "not";
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertEquals("[]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(0, jSPredicateForm0.size());
      assertTrue(jSPredicateForm0.isEmpty());
      
      Stream stream0 = jSPredicateForm0.parallelStream();
      assertNotNull(stream0);
      assertEquals("[]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(0, jSPredicateForm0.size());
      assertTrue(jSPredicateForm0.isEmpty());
      
      int int0 = 0;
      JSJshopVars.leftPar = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertNotNull(jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeFunction();
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      Object object0 = jSTerm1.lastElement();
      assertNotNull(object0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("%%%", object0);
      
      boolean boolean1 = jSTerm1.add((Object) "");
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[%%%, ]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) null);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[not, null]", jSTerm0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      assertEquals("[not]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'e';
      charArray0[2] = '|';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'n', 'o', 't'}, charArray0);
      assertEquals(3, int0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = 39;
      streamTokenizer0.wordChars(39, 39);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      
      jSTerm0.makeFunction();
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      Object object0 = jSTerm0.lastElement();
      assertNotNull(object0);
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("not", object0);
      
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) "nWt");
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[nWt]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[nWt, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[nWt, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      StringReader stringReader0 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader0);
      
      boolean boolean0 = jSTerm0.add((Object) stringReader0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm0.add((Object) "nt");
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[nt]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) "nt");
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[nt, nt]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(0, jSPredicateForm0.size());
      
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(0, jSPredicateForm0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.add((Object) "nt");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertEquals("[nt]", jSTerm0.toString());
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertEquals("[nt]", jSTerm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[nt]", jSPredicateForm0.toString());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("(null )", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "``%E";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("``%E");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.add((Object) "Reading Predicate");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotNull(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      StringReader stringReader0 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader0);
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(2, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      
      boolean boolean2 = jSSubstitution0.fail();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      jSSubstitution0.assignFailure();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertNotNull(jSSubstitution1);
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSSubstitution1.addElements(jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSSubstitution1.addElements(jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      assertNotNull(jSPredicateForm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(2, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertEquals(10, jSPredicateForm1.capacity());
      assertEquals(2, jSPredicateForm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      jSPredicateForm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(2, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertEquals(10, jSPredicateForm1.capacity());
      assertEquals(2, jSPredicateForm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      assertNotNull(jSPredicateForm2);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(10, jSPredicateForm2.capacity());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm2.toString());
      assertFalse(jSPredicateForm2.isEmpty());
      assertEquals(2, jSPredicateForm2.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm0));
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      assertNotNull(jSPredicateForm0);
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(0, jSPredicateForm0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertNotNull(jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.add((Object) "Reading Predicate");
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotNull(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      StringReader stringReader0 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      jSTerm0.makeFunction();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      boolean boolean2 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) "nlt");
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[null, nlt]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.add((Object) "98F~k5");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[98F~k5]", jSTerm0.toString());
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertNotNull(jSTerm1);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeFunction();
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      Object object0 = jSTerm1.lastElement();
      assertNotNull(object0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Vqd", object0);
      
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      assertNotNull(jSPredicateForm0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSPredicateForm0.size());
      assertEquals("[Vqd]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertNotNull(stringBuffer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSPredicateForm0.size());
      assertEquals("[Vqd]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(5, stringBuffer0.length());
      assertEquals("(Vqd)", stringBuffer0.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertNotNull(jSSubstitution1);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[98F~k5]", jSTerm0.toString());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm0.add((Object) "nyt");
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[nyt]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[nyt, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[nyt, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[nyt, (this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(0, jSPredicateForm0.size());
      assertEquals("[]", jSPredicateForm0.toString());
      
      StringReader stringReader0 = new StringReader("AH6c<XYnBhml8<");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      assertNotNull(jSPredicateForm1);
      assertEquals(0, jSPredicateForm1.size());
      assertEquals(10, jSPredicateForm1.capacity());
      assertTrue(jSPredicateForm1.isEmpty());
      assertEquals("[]", jSPredicateForm1.toString());
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[null, not]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSTerm0.add((Object) jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(3, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null, not, (this Collection)]", jSTerm0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertNotNull(jSTerm0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals("[Vqd]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertNotNull(jSSubstitution1);
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader1 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      assertNotNull(streamTokenizer1);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals(41, streamTokenizer1.ttype);
      assertEquals("Token[')'], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeFunction();
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals(41, streamTokenizer1.ttype);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("Token[')'], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals(41, streamTokenizer1.ttype);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals("[Vqd]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("Token[')'], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[Vqd]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm0.add((Object) "Reading Predicate");
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotNull(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      StringReader stringReader0 = new StringReader("Vqd)F{l2)");
      assertNotNull(stringReader0);
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertNotNull(jSTerm2);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[Vqd]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      assertNotNull(jSPredicateForm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSPredicateForm1.size());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertEquals(10, jSPredicateForm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      boolean boolean2 = jSTerm0.equals(jSPredicateForm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSPredicateForm1.size());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertEquals(10, jSPredicateForm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertNotNull(stringBuffer0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSPredicateForm1.size());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertEquals(10, jSPredicateForm1.capacity());
      assertEquals("(Reading Predicate(Reading Predicate ))", stringBuffer0.toString());
      assertEquals(39, stringBuffer0.length());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      JSPredicateForm jSPredicateForm2 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      assertNotNull(jSPredicateForm2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[Reading Predicate]", jSPredicateForm2.toString());
      assertEquals(1, jSPredicateForm2.size());
      assertFalse(jSPredicateForm2.isEmpty());
      assertEquals(10, jSPredicateForm2.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSPredicateForm2.equals((Object)jSPredicateForm0));
      assertFalse(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(0, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[null]", jSTerm0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) null);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) "Reading Predicate");
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotNull(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertNotNull(stringBuffer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(40, stringBuffer0.length());
      assertEquals("(Reading Predicate (Reading Predicate ))", stringBuffer0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      assertNotNull(jSPredicateForm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(2, jSPredicateForm0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      assertNotNull(jSPredicateForm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSPredicateForm1.size());
      assertEquals(10, jSPredicateForm1.capacity());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      StringBuffer stringBuffer1 = jSPredicateForm1.toStr();
      assertNotNull(stringBuffer1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSPredicateForm1.size());
      assertEquals(10, jSPredicateForm1.capacity());
      assertFalse(jSPredicateForm1.isEmpty());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm1.toString());
      assertEquals(39, stringBuffer1.length());
      assertEquals("(Reading Predicate(Reading Predicate ))", stringBuffer1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      
      boolean boolean0 = jSTerm0.add((Object) "Reading Predicate");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotNull(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[Reading Predicate]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertEquals(2, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      
      jSPredicateForm0.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[Reading Predicate, [Reading Predicate]]", jSPredicateForm0.toString());
      assertEquals(2, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      int int0 = jSTerm1.size();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, int0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertNotNull(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[not, []]", jSTerm0.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[not, []]", jSTerm0.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertEquals(0, jSPredicateForm0.size());
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertNotNull(jSSubstitution2);
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertEquals(0, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      boolean boolean0 = jSPredicateForm0.add((Object) jSTerm0);
      assertEquals("[[]]", jSPredicateForm0.toString());
      assertEquals(1, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertFalse(jSPredicateForm0.isEmpty());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertNotNull(jSSubstitution1);
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSTerm0.print();
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[not]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.add((Object) "not");
      assertFalse(jSTerm0.isVariable());
      assertEquals("[not]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm0);
      assertEquals("[not, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
