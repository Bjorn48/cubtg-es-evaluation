/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:32:01 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(35);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(35, jSTerm0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(35, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";K5McJd%&#^8tn|");
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[]", jSTerm2.toString());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertNotNull(jSTerm2);
      
      StringReader stringReader0 = new StringReader(";K5McJd%&#^8tn|");
      assertNotNull(stringReader0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("(;K5McJd%&#^8tn| )", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      JSTerm jSTerm3 = new JSTerm();
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertNotNull(jSTerm3);
      
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      
      boolean boolean1 = jSTerm3.isConstant();
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertFalse(boolean1);
      
      StringReader stringReader1 = new StringReader(";K5McJd%&#^8tn|");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean2 = jSTerm3.isVariable();
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9(D|`iD.N)_K%]Q");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".-");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.resetSyntax();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";ZK5McJd%&#^8tn|");
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      
      Integer integer0 = new Integer(63);
      assertNotNull(integer0);
      assertEquals(63, (int)integer0);
      
      Integer integer1 = new Integer(60);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(60, (int)integer1);
      
      jSTerm0.addElement(integer1);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("[;ZK5McJd%&#^8tn|, 60]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;ZK5McJd%&#^8tn|, 60]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;ZK5McJd%&#^8tn|, 60]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("7Zggp%9K)^ydth");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wA7#TDg");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";ZK5McJd%&#^8tn|");
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      
      JSTerm jSTerm3 = new JSTerm();
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertNotNull(jSTerm3);
      
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm2.toString());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
      assertNotNull(jSTerm4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      int int0 = 0;
      jSTerm0.addElement((Object) null);
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      
      JSJshopVars.leftPar = 0;
      JSJshopVars.lessT = 0;
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      
      int int1 = (-1291);
      StringReader stringReader0 = new StringReader("member");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      float float0 = JSEvaluate.numericValue(jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm1.subList(0, (-1291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1291)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N}C{00fYk3<`udem\"bO");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("%%% ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      int int0 = 61;
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertNotNull(jSSubstitution2);
      
      streamTokenizer0.quoteChar(0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSSubstitution2.add((Object) jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals("[[]]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(boolean0);
      
      JSJshopVars.exclamation = (-1368);
      // Undeclared exception!
      try { 
        jSSubstitution2.add(61, (Object) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("D|piD.N");
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement("D|piD.N");
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[D|piD.N, D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      int int0 = 855;
      jSTerm0.setSize(855);
      assertEquals(855, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(855, jSTerm0.size());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertFalse(jSSubstitution2.isEmpty());
      assertNotNull(jSSubstitution2);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.lastElement();
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[(this Collection)]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm0.addElement(jSTerm1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[(this Collection), (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection), (this Collection)]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("%%%");
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%, null]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R9a;!");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm1.add((Object) streamTokenizer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.capacity());
      assertEquals("[%%%, Token[EOF], line 1]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertTrue(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      stringReader0.close();
      StringReader stringReader1 = new StringReader("<");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(60, int0);
      
      streamTokenizer0.parseNumbers();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      JSJshopVars.leftBrac = (-4);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("(+[oqh`8_?");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertNotNull(streamTokenizer1);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals((-4), streamTokenizer1.ttype);
      
      int int0 = streamTokenizer1.nextToken();
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals("Token['('], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals(40, int0);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals(40, streamTokenizer1.ttype);
      
      stringReader0.reset();
      streamTokenizer1.resetSyntax();
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals("Token['('], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals(40, streamTokenizer1.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";ZK5McJd%&#^8tn|");
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) ";ZK5McJd%&#^8tn|");
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      
      boolean boolean1 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean1 == boolean0);
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean1);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      
      JSTerm jSTerm3 = new JSTerm();
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      assertEquals("[]", jSTerm3.toString());
      assertNotNull(jSTerm3);
      
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm4.toString());
      assertNotNull(jSTerm4);
      
      boolean boolean2 = jSTerm1.isEval();
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(boolean2);
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("? ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(2210);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2210, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2210, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      jSTerm0.insertElementAt(object0, 0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>&#<>ytv|wVyiFF1J$");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      
      StringReader stringReader0 = new StringReader("9(D|piD.N)_K%]Q");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9eaZ:\"<#e7!");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm0.addElement("#@1lI0o]oGC6Wu.+");
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm1.toString());
      assertEquals(2, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm1.toString());
      assertEquals(2, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm1.toString());
      assertEquals(2, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      
      Object object0 = jSTerm0.lastElement();
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0, #@1lI0o]oGC6Wu.+]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertNotNull(object0);
      assertEquals("#@1lI0o]oGC6Wu.+", object0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm2.firstElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      
      jSTerm1.addElement(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals("[[]]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals("[[]]", jSTerm2.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.trimToSize();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      JSJshopVars.coma = (-2511);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.replaceAll(unaryOperator0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[[]]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm0.isEmpty();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.print();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("wA7#TDg");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals("[wA7#TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("wA7#TDg");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[wA7#TDg, wA7#TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(5rRT");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("([(this Collection)] )", stringBuffer0.toString());
      assertEquals(22, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("wA7#TDg");
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[wA7#TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("wA7#TDg");
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[wA7#TDg, wA7#TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      Iterator iterator0 = jSTerm0.iterator();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(iterator0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[[]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      
      // Undeclared exception!
      try { 
        jSTerm0.removeElementAt(2875);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2875 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D47");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.trimToSize();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      JSJshopVars.coma = (-2511);
      JSJshopVars.greaterT = (-2676);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.replaceAll(unaryOperator0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      
      boolean boolean0 = jSTerm1.removeElement("ceil");
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean1 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("(X*1HN$[M8P_Z");
      assertNotNull(stringReader0);
      
      JSJshopVars.coma = (-2676);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(2222);
      assertEquals(2222, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(2222, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.trimToSize();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeFunction();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<JSSubstitution> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      jSTerm0.replaceAll(unaryOperator1);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm1.removeElement("list");
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm2 = new JSTerm();
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[]", jSTerm2.toString());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      
      boolean boolean1 = jSTerm2.isConstant();
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[]", jSTerm2.toString());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("(X*1HN$[M8P_Z");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.slashSlashComments(false);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.lowerCaseMode(true);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      streamTokenizer1.resetSyntax();
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(914);
      assertFalse(jSTerm0.isConstant());
      assertEquals(914, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(914, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      StringReader stringReader0 = new StringReader("7Zggp%9K)^ydth");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertEquals(914, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(914, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.isGround();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertEquals(914, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(914, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertTrue(boolean0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("wA7#TDg");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[wA7#TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      
      jSTerm0.addElement("wA7#TDg");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[wA7#TDg, wA7#TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Object object0 = jSTerm1.lastElement();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(object0);
      assertEquals("?%%%", object0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertEquals(1, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = new JSTerm();
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertNotNull(jSTerm3);
      
      boolean boolean0 = jSTerm1.equals(jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(boolean0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      streamTokenizer0.slashSlashComments(false);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm4 = new JSTerm();
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertEquals("[]", jSTerm4.toString());
      assertTrue(jSTerm4.isEmpty());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isConstant());
      assertEquals(0, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertNotNull(jSTerm4);
      
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      boolean boolean0 = jSTerm0.retainAll(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";K5McJd%&#^8tn|");
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.isGround();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      
      Integer integer0 = new Integer(44);
      assertNotNull(integer0);
      assertEquals(44, (int)integer0);
      
      jSTerm0.addElement((Object) null);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[;K5McJd%&#^8tn|, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("D|piD.N");
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertEquals("[D|piD.N]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";K5McJd%&#^8tn|");
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      
      Object object0 = jSTerm0.lastElement();
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertNotNull(object0);
      assertEquals(";K5McJd%&#^8tn|", object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      String string0 = jSTerm1.toString();
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(string0.equals((Object)object0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(string0);
      assertEquals("[;K5McJd%&#^8tn|]", string0);
      
      objectArray0[1] = (Object) "[;K5McJd%&#^8tn|]";
      StringReader stringReader0 = new StringReader("9.0");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("?");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.trimToSize();
      assertEquals(1, jSTerm0.capacity());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, jSTerm0.capacity());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      
      jSTerm0.addElement(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(2, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(2, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9eaZ:\"<#e7!");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
      
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9eaZ:\"<#e7!");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      streamTokenizer0.nval = 1.0;
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      boolean boolean0 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(boolean0);
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(boolean1 == boolean0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(boolean1);
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm1.makeConstant();
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeEval(false);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[9.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.fail());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertEquals(10, jSSubstitution3.capacity());
      assertNotNull(jSSubstitution3);
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm1.print();
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("%%%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.whitespaceChars((-2424), 2333);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertNotNull(streamTokenizer1);
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      jSTerm0.makeConstant();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(235);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(235, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(235, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSJshopVars.leftBrac = 261;
      jSTerm0.makeVariable();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection), []]", jSTerm0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.trimToSize();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      
      int int0 = (-2511);
      JSJshopVars.coma = (-2511);
      JSJshopVars.greaterT = (-2681);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.replaceAll(unaryOperator0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      
      boolean boolean0 = jSTerm1.removeElement("ceil");
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = null;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      boolean boolean1 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("(X*1HN$[M8P_Z");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.slashSlashComments(false);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.whitespaceChars(1, (-691));
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.lowerCaseMode(false);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("wA7@TDg");
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[wA7@TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.addElement("wA7@TDg");
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[wA7@TDg, wA7@TDg]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("wA7#TDg");
      assertEquals("[wA7#TDg]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[wA7#TDg]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[wA7#TDg]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[wA7#TDg]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[wA7#TDg]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(predicate1);
      
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(predicate2);
      
      Predicate<JSSubstitution> predicate3 = predicate0.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(predicate3);
      
      Predicate<JSSubstitution> predicate4 = Predicate.isEqual((Object) predicate3);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate4, predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(predicate4);
      
      boolean boolean0 = jSTerm0.removeIf(predicate3);
      assertNotSame(predicate0, predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(boolean0);
      
      JSJshopVars.percent = 0;
      boolean boolean1 = jSTerm0.isVariable();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(boolean1);
      
      boolean boolean2 = jSTerm0.isFunction();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("(X*1HN$[M8P_Z");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      
      jSTerm0.addElement("D|piD.N");
      assertEquals("[D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) "D|piD.N");
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("[D|piD.N]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("[D|piD.N]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[D|piD.N]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      
      boolean boolean1 = jSTerm0.isEval();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals("[D|piD.N]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("(+[oqh`8_?");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals((-4), streamTokenizer1.ttype);
      
      int int0 = streamTokenizer1.nextToken();
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token['('], line 1", streamTokenizer1.toString());
      assertEquals(40, int0);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals(40, streamTokenizer1.ttype);
      
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("call");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9(D|`iD.N)_K%]Q");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      int int0 = streamTokenizer0.nextToken();
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-2), int0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[D|`iD.N]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      jSTerm0.addElement(streamTokenizer0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals("[D|`iD.N, Token[')'], line 1]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fg#c-9./Wt&5i(ER$c");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate2 = predicate0.negate();
      assertNotSame(predicate2, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate2);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate3 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate3);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate4 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate4);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate5 = predicate0.or(predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate5);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate6 = predicate3.or(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate6);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      Predicate<String> predicate7 = predicate6.and(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate3, predicate7);
      assertNotSame(predicate6, predicate5);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate7, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate7);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSSubstitution0.removeIf(predicate6);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate3, predicate7);
      assertNotSame(predicate6, predicate5);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean1 = jSSubstitution0.add((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSJshopVars.percent = (-1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals("[%%%]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSPredicateForm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean2 = jSTerm1.isFunction();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(boolean2);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean3 = jSTerm1.isEval();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(boolean3);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean4 = jSTerm1.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertTrue(boolean4);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";K5McJd%&#^8tn|");
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      
      Object object0 = jSTerm0.lastElement();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(object0);
      assertEquals(";K5McJd%&#^8tn|", object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm1;
      Object object1 = jSTerm1.firstElement();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(object1);
      assertEquals(";K5McJd%&#^8tn|", object1);
      
      objectArray0[1] = (Object) ";K5McJd%&#^8tn|";
      Object[] objectArray1 = jSTerm2.toArray(objectArray0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      JSTerm jSTerm3 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertNotNull(jSTerm3);
      
      boolean boolean1 = jSTerm3.equals(jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      
      Stream stream0 = jSTerm0.parallelStream();
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(stream0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(855);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(855, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(855, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fg#c-9./Wt&5i(ER$c");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate2 = predicate0.negate();
      assertNotSame(predicate2, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate3 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate4 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate4);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate5 = predicate0.or(predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate5);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate6 = predicate3.or(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate6);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate7 = predicate6.and(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate3, predicate7);
      assertNotSame(predicate6, predicate5);
      assertNotSame(predicate7, predicate3);
      assertNotSame(predicate7, predicate4);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate7);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSSubstitution0.add((Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSJshopVars.percent = (-1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[%%%]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(1, jSPredicateForm0.size());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSPredicateForm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean2 = jSTerm1.equals(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean3 = jSTerm1.isEval();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean4 = jSTerm1.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean4);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSSubstitution1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("7Zggp%9K)^ydth");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.isGround();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(boolean0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[., [7.0], [., [Zggp%9K], [nil]]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s=03");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(3.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertEquals(3.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SBC;(/q!j=wgz9J7@I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      charArray0[0] = 'M';
      charArray0[1] = ';';
      charArray0[2] = '%';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'S', 'B', 'C'}, charArray0);
      assertEquals(3, int0);
      assertEquals(3, charArray0.length);
      
      int int1 = streamTokenizer0.nextToken();
      assertFalse(int1 == int0);
      assertEquals("Token[';'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(59, int1);
      assertEquals(59, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.slashSlashComments(true);
      assertEquals("Token[';'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(59, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      stringReader0.reset();
      streamTokenizer0.parseNumbers();
      assertEquals("Token[';'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(59, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSJshopVars.percent = 3;
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      JSJshopVars.colon = 0;
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeEval(false);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      
      boolean boolean3 = jSTerm1.isConstant();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSEvaluate");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.resetSyntax();
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.trimToSize();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      JSJshopVars.coma = (-2511);
      JSJshopVars.greaterT = (-2676);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.replaceAll(unaryOperator0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      
      boolean boolean0 = jSTerm1.removeElement("ceil");
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      
      boolean boolean1 = jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.capacity());
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("ceil");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSJshopVars.flagLevel = (-4168);
      streamTokenizer0.slashSlashComments(false);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.whitespaceChars(1, (-691));
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.lowerCaseMode(false);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.resetSyntax();
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";K5McJd%&#^8tn|");
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.replaceAll(unaryOperator0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      
      boolean boolean0 = jSSubstitution0.add((Object) ";K5McJd%&#^8tn|");
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSSubstitution0.toString());
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[;K5McJd%&#^8tn|]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[;K5McJd%&#^8tn|]", jSSubstitution0.toString());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.isEmpty());
      assertFalse(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals("[]", jSSubstitution3.toString());
      assertNotNull(jSSubstitution3);
      
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9(D|`iD.N):K%]Q");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      int int0 = streamTokenizer0.nextToken();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=9.0], line 1", streamTokenizer0.toString());
      assertEquals((-2), int0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals("[D|`iD.N]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement((Object) null);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[D|`iD.N, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fg#c-9./Wt&5i(ER$c");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate2 = predicate0.negate();
      assertNotSame(predicate2, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate3 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate4 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate4);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate5 = predicate0.or(predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate5);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate6 = predicate3.or(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate6);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate7 = predicate6.and(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate7);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertNotSame(predicate7, predicate3);
      assertNotSame(predicate7, predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate7);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSSubstitution0.removeIf(predicate6);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate7);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSSubstitution0.add((Object) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("[null]", jSSubstitution0.toString());
      assertTrue(boolean1);
      
      JSJshopVars.percent = (-1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(1, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[%%%]", jSPredicateForm0.toString());
      assertNotNull(jSPredicateForm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean2 = jSTerm0.isFunction();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean3 = jSTerm0.isEval();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean4 = jSTerm0.isConstant();
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean4);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean5 = jSTerm0.isGround();
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean5);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean6 = jSTerm0.isVariable();
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean6);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(";ZK5McJd%&#^8tn|");
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertEquals("[;ZK5McJd%&#^8tn|]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      jSTerm0.addElement(";ZK5McJd%&#^8tn|");
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isConstant());
      assertEquals("[;ZK5McJd%&#^8tn|, ;ZK5McJd%&#^8tn|]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("W$,6.,girNAN`\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'W', '$'}, charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      int int1 = streamTokenizer0.nextToken();
      assertFalse(int1 == int0);
      assertEquals("Token[','], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(44, int1);
      assertEquals(44, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[6.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm1.makeEval(true);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[6.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      StringReader stringReader1 = new StringReader("(");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      streamTokenizer0.slashSlashComments(true);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      streamTokenizer1.lowerCaseMode(true);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer1, streamTokenizer0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(streamTokenizer2.equals((Object)streamTokenizer1));
      assertFalse(streamTokenizer2.equals((Object)streamTokenizer0));
      assertEquals("Token[NOTHING], line 1", streamTokenizer2.toString());
      assertEquals(1, streamTokenizer2.lineno());
      assertNotNull(streamTokenizer2);
      assertEquals(0.0, streamTokenizer2.nval, 0.01);
      assertEquals((-4), streamTokenizer2.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(stringReader0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = jSTerm1.call();
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertEquals("[?%%%]", jSTerm3.toString());
      assertEquals(1, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isConstant());
      assertNotNull(jSTerm3);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm3.equals(jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertEquals("[?%%%]", jSTerm3.toString());
      assertEquals(1, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isConstant());
      assertTrue(boolean0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      StringReader stringReader1 = new StringReader("kq5&n]J$!'KHH%`6)");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertEquals(1, streamTokenizer1.lineno());
      assertNotNull(streamTokenizer1);
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isConstant());
      assertEquals(1, jSTerm4.size());
      assertEquals("[?%%%0]", jSTerm4.toString());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertNotNull(jSTerm4);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SBC;(/q!j=wgz9J7@I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      charArray0[0] = 'M';
      charArray0[1] = ';';
      charArray0[2] = '%';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'S', 'B', 'C'}, charArray0);
      assertEquals(3, int0);
      assertEquals(3, charArray0.length);
      
      int int1 = streamTokenizer0.nextToken();
      assertFalse(int1 == int0);
      assertEquals("Token[';'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(59, int1);
      assertEquals(59, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      stringReader0.reset();
      streamTokenizer0.parseNumbers();
      assertEquals("Token[';'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(59, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSJshopVars.percent = 3;
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSJshopVars.colon = 0;
      boolean boolean2 = jSTerm0.equals(jSTerm0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeEval(false);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean3 = jSTerm0.isConstant();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertNotNull(jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      
      jSTerm0.addElement(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      
      StringReader stringReader0 = new StringReader("jsterm:");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertEquals(2, jSTerm3.size());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      assertNotNull(jSTerm3);
      
      JSTerm jSTerm4 = jSTerm3.cloneT();
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertEquals(2, jSTerm3.size());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isConstant());
      assertEquals(2, jSTerm4.size());
      assertNotNull(jSTerm4);
      
      JSTerm jSTerm5 = jSTerm1.call();
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm5);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm4));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertTrue(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isVariable());
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isConstant());
      assertFalse(jSTerm5.isEmpty());
      assertTrue(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEval());
      assertNotNull(jSTerm5);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.ensureCapacity(817);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(817, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSJshopVars.minus = 3801;
      JSJshopVars.apostrophe = 571;
      stringReader0.reset();
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(817, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(stream0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      
      jSTerm0.setSize(62);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(62, jSTerm0.capacity());
      assertEquals("[?%%%, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", jSTerm0.toString());
      assertEquals(62, jSTerm0.size());
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.isConstant();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(62, jSTerm0.capacity());
      assertEquals("[?%%%, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", jSTerm0.toString());
      assertEquals(62, jSTerm0.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm2.isEval();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(62, jSTerm0.capacity());
      assertEquals("[?%%%, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", jSTerm0.toString());
      assertEquals(62, jSTerm0.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(boolean1);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fg#c-9./Wt&5i(ER$c");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate2 = predicate0.negate();
      assertNotSame(predicate2, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate3 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate4 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate4);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate5 = predicate0.or(predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate5);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate6 = predicate3.or(predicate0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate6);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Predicate<String> predicate7 = predicate6.and(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate7);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate6, predicate5);
      assertNotSame(predicate7, predicate3);
      assertNotSame(predicate7, predicate4);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(predicate7);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSSubstitution0.add((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSJshopVars.percent = (-1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[%%%]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSPredicateForm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean2 = jSTerm1.isFunction();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(boolean2);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean3 = jSTerm1.isFunction();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(boolean3);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeVariable();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean4 = jSTerm1.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(boolean4);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean5 = jSTerm1.equals(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(boolean5);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(4, stringBuffer0.length());
      assertEquals("%%% ", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?4I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("?%%% ", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) null);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.trimToSize();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      
      JSJshopVars.coma = (-2511);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.replaceAll(unaryOperator0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.isFunction();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Ufu(");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[6.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Zggp%9K)^ydth");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=7.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[7.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(7.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Zggp%9K]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[7.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Zggp%9K]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      assertEquals(9.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader(";?4I");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("%%%");
      assertNotNull(stringReader0);
      
      jSTerm0.setSize(44);
      assertEquals(44, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(44, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      StringReader stringReader1 = new StringReader(")GG'*6~J1ABK#)2");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(44, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(44, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("%C%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[C], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%C]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) jSTerm0);
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[[]]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("W$,6.,girNAN`\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'W', '$'}, charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      int int1 = streamTokenizer0.nextToken();
      assertFalse(int1 == int0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[','], line 1", streamTokenizer0.toString());
      assertEquals(44, int1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(44, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[6.0]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeEval(true);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[6.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.slashSlashComments(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[6.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertEquals("[6.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEmpty());
      assertNotNull(jSTerm3);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm2.retainAll(jSTerm0);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(93);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(93, (int)integer0);
      
      jSTerm0.addElement(jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("[[6.0]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[6.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
