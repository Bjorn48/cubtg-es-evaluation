/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 16:59:09 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.shift((-1728), 6767);
      binaryImage0.Y();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 6782);
      binaryImage0.getJavaImage();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      binaryImage0.min();
      BinaryImage binaryImage2 = new BinaryImage(772, 2);
      binaryImage2.getJavaImage();
      BinaryImage binaryImage3 = binaryImage1.union(binaryImage2);
      binaryImage1.difference(binaryImage3);
      Byte byte0 = Byte.valueOf((byte) (-3));
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(844, 844);
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.toString();
      binaryImage1.compliment();
      int int0 = (-3785);
      // Undeclared exception!
      try { 
        binaryImage0.get((-3785), (-3785));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      byte byte0 = (byte)70;
      Byte byte1 = Byte.valueOf((byte)70);
      Byte.compare((byte)0, (byte)0);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 1346, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = new BinaryImage(2, 2);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage2 = binaryImage0.shift(2, (-1158));
      Integer integer0 = new Integer((-1158));
      BinaryImage binaryImage3 = binaryImage2.intersection(binaryImage1);
      BinaryImage binaryImage4 = binaryImage1.intersection(binaryImage2);
      binaryImage3.compliment();
      binaryImage2.union(binaryImage4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      Integer integer0 = new Integer(2);
      ROI rOI0 = new ROI();
      rOI0.setROI(398, 398, 2639, 2275);
      rOI0.setROI(2, 1, 1, 398);
      Integer integer1 = new Integer(2);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(41, 41);
      BinaryImage binaryImage1 = new BinaryImage(41, 41);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage2 = binaryImage0.shift(41, (-1158));
      Integer integer0 = new Integer((-1158));
      Integer integer1 = new Integer((-1158));
      BinaryImage binaryImage3 = new BinaryImage(binaryImage2);
      binaryImage0.compliment();
      binaryImage2.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 2165);
      binaryImage0.shift(0, 0);
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = new BinaryImage(2, 2);
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      BinaryImage binaryImage2 = binaryImage0.shift(2, (-1158));
      Integer integer0 = new Integer((-1158));
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      Integer integer1 = new Integer((-1158));
      BinaryImage binaryImage3 = binaryImage2.intersection(binaryImage1);
      binaryImage1.copy(rOI0);
      BinaryImage binaryImage4 = new BinaryImage(binaryImage2);
      binaryImage3.compliment();
      binaryImage4.difference(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-587);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-587), (-587), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      binaryImage1.copy(rOI0);
      binaryImage1.compliment();
      int int0 = (-1);
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(148, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      binaryImage0.count();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage2.X();
      binaryImage1.intersection(binaryImage2);
      binaryImage1.count();
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(8, 0, (byte[]) null);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.compliment();
      byte[][] byteArray0 = new byte[1][5];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      binaryImage2.getJavaImage();
      binaryImage2.copy();
      binaryImage2.shift(2, (-624));
      binaryImage1.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      ImageKernel imageKernel0 = new ImageKernel(floatArray0);
      BinaryImage binaryImage0 = new BinaryImage(606, 606);
      BinaryImage binaryImage1 = new BinaryImage(imageKernel0);
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][5];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(255, 255);
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      BinaryImage binaryImage2 = binaryImage0.shift(2, (-1158));
      binaryImage1.X();
      // Undeclared exception!
      try { 
        binaryImage2.get((-2785), 1437);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      ImageKernel imageKernel0 = new ImageKernel(floatArray0);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      binaryImage0.max();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(3313, 3313, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1928;
      BinaryImage binaryImage0 = new BinaryImage(2802, 1928);
      binaryImage0.copy();
      int int1 = 2623;
      // Undeclared exception!
      binaryImage0.shift(int0, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)55;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.copy();
      binaryImage0.shift((byte)55, 766);
      Byte byte0 = binaryImage0.max();
      // Undeclared exception!
      try { 
        binaryImage0.set(2562, (int) (byte)55, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      binaryImage1.toString();
      binaryImage1.X();
      binaryImage1.intersection(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage();
      int int0 = new Integer(2);
      BinaryImage binaryImage3 = binaryImage2.compliment();
      binaryImage2.difference(binaryImage3);
      binaryImage1.X();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.X();
      int int0 = 1075;
      ROI rOI0 = new ROI(1075, 1075, 1075, 1075);
      rOI0.setROI(1075, 0, (-1388), (-10));
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.copy();
      binaryImage0.min();
      BinaryImage binaryImage2 = new BinaryImage(2, 1399);
      BinaryImage binaryImage3 = new BinaryImage(binaryImage2);
      binaryImage2.compliment();
      // Undeclared exception!
      try { 
        binaryImage2.difference(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(2, 2);
      binaryImage0.min();
      binaryImage1.shift(2, 2);
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.getJavaImage();
      binaryImage0.copy();
      BinaryImage binaryImage2 = binaryImage0.shift(2, 2);
      binaryImage0.X();
      binaryImage0.min();
      BinaryImage binaryImage3 = new BinaryImage(8, 8);
      binaryImage2.union(binaryImage0);
      binaryImage1.Y();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      ROI rOI0 = new ROI(1075, 1075, 1075, 1075);
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)0;
      BinaryImage binaryImage0 = new BinaryImage(0, 1722, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)33, (byte)58, (byte) (-98), (byte)0, (byte)8, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1722, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.shift((byte)0, (byte)8);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)33, (byte)58, (byte) (-98), (byte)0, (byte)8, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1722, binaryImage0.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(1722, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      
      int int0 = 519;
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, image0.Y());
      assertEquals(2, image0.X());
      
      BinaryImage binaryImage2 = binaryImage0.shift(2, 2);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.Y());
      
      int int0 = binaryImage1.X();
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertEquals(0, int0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage3 = new BinaryImage(2, 2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image0));
      assertEquals(2, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      BinaryImage binaryImage4 = binaryImage1.union(binaryImage3);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)image0));
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, image0);
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.Y());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(219);
      assertNotNull(integer0);
      assertEquals(219, (int)integer0);
      
      BinaryImage binaryImage0 = new BinaryImage(219, 219);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(219, binaryImage0.Y());
      assertEquals(219, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(219, binaryImage0.Y());
      assertEquals(219, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(219, image0.X());
      assertEquals(219, image0.Y());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.count());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      BinaryImage binaryImage2 = binaryImage0.shift((-1158), 0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      BinaryImage binaryImage3 = binaryImage0.intersection(binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      
      Image image0 = binaryImage0.copy(rOI0);
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      
      Image image1 = binaryImage0.copy();
      assertNotNull(image1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertNotSame(image1, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, image1.X());
      assertEquals(2, image1.Y());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2;
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, image0.Y());
      assertEquals(2, image0.X());
      
      BinaryImage binaryImage2 = binaryImage0.shift(2, (-1158));
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      
      int int1 = binaryImage1.X();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage2);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      ROI rOI0 = new ROI(1075, 1075, 1075, 1075);
      assertNotNull(rOI0);
      assertEquals(1075, rOI0.ly());
      assertEquals(1075, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1075, rOI0.ux());
      assertEquals(1075, rOI0.uy());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1075, rOI0.ly());
      assertEquals(1075, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1075, rOI0.ux());
      assertEquals(1075, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(1075, rOI0.ly());
      assertEquals(1075, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1075, rOI0.ux());
      assertEquals(1075, rOI0.uy());
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1075
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage1.shift((-2675), 2162);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, image0.Y());
      assertEquals(2, image0.X());
      
      BinaryImage binaryImage3 = binaryImage0.shift(2, (-1158));
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      int int0 = binaryImage1.X();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals(2, int0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage4 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage4.X());
      assertEquals(2, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      
      Byte byte1 = Byte.valueOf((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      // Undeclared exception!
      try { 
        binaryImage4.set((-1158), (-363), byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -363
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage2 = new BinaryImage(2, 2);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(2, binaryImage3.Y());
      assertEquals(2, binaryImage3.X());
      
      BinaryImage binaryImage4 = null;
      try {
        binaryImage4 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      byte byte0 = (byte) (-64);
      // Undeclared exception!
      try { 
        binaryImage1.set((int) (byte) (-64), (int) (byte) (-64), (Byte) null, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2;
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage1.shift((-2675), 2162);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, image0.Y());
      assertEquals(2, image0.X());
      
      BinaryImage binaryImage3 = binaryImage0.shift(2, (-1158));
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(2, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.X());
      
      int int1 = binaryImage1.X();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      int int2 = 2562;
      Byte byte1 = new Byte((byte) (-66));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-66), (byte)byte1);
      
      byte byte2 = byte1.byteValue();
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-66), byte2);
      
      // Undeclared exception!
      try { 
        binaryImage3.set(2, 2562, (Byte) (byte) (-66));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2562
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      BinaryImage binaryImage2 = binaryImage0.compliment();
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.X());
      
      BinaryImage binaryImage3 = binaryImage2.difference(binaryImage0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      
      String string0 = binaryImage2.toString();
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      
      BinaryImage binaryImage3 = binaryImage2.union(binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage3.X());
      assertEquals(2, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.count());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      BinaryImage binaryImage2 = binaryImage0.shift(2, (-1158));
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.Y());
      
      int int0 = binaryImage1.X();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals(2, int0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      BinaryImage binaryImage3 = binaryImage2.intersection(binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage3.Y());
      assertEquals(2, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      byte byte1 = (byte) (-55);
      byte byte2 = (byte)0;
      int int0 = Byte.compare((byte) (-55), (byte)0);
      assertEquals((-55), int0);
      
      int int1 = Byte.toUnsignedInt((byte) (-17));
      assertFalse(int1 == int0);
      assertEquals(239, int1);
      
      int int2 = Byte.toUnsignedInt((byte) (-119));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(137, int2);
      
      byte byte3 = byte0.byteValue();
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertEquals((byte) (-119), byte3);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) (byte) (-119));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.shift(2, 2);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      BinaryImage binaryImage3 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(2, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.X());
      
      BinaryImage binaryImage4 = binaryImage2.compliment();
      assertNotNull(binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage4);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage3);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(4, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(4, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(4, binaryImage4.count());
      assertEquals(2, binaryImage4.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(2, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      
      BinaryImage binaryImage5 = binaryImage2.difference(binaryImage3);
      assertNotNull(binaryImage5);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage5);
      assertSame(binaryImage2, binaryImage4);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage1);
      assertSame(binaryImage5, binaryImage2);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage3);
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(2, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(2, binaryImage3.X());
      assertEquals(2, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(0, binaryImage5.count());
      assertEquals(2, binaryImage5.Y());
      assertEquals((byte)0, (byte)binaryImage5.min());
      
      // Undeclared exception!
      try { 
        binaryImage1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-53);
      byteArray1[2] = (byte)39;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      byte[][] byteArray0 = new byte[0][2];
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage1.compliment();
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      ImageProducer imageProducer0 = binaryImage2.getJavaImage();
      assertEquals(0, byteArray0.length);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      // Undeclared exception!
      try { 
        binaryImage2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 2165);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2165, binaryImage0.Y());
      
      Byte byte0 = Byte.valueOf((byte) (-3));
      assertNotNull(byte0);
      assertEquals((byte) (-3), (byte)byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(16, 11, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      // Undeclared exception!
      try { 
        binaryImage0.get(7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      Byte byte0 = binaryImage0.max();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)1, (byte)byte0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte byte1 = binaryImage0.min();
      assertNotNull(byte1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.count());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      BinaryImage binaryImage2 = binaryImage0.shift((-1158), (-1158));
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      int int0 = binaryImage0.count();
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(0, int0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 2;
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      ImageProducer imageProducer1 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer1);
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotSame(imageProducer1, imageProducer0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int1 = 6782;
      BinaryImage binaryImage1 = new BinaryImage(2, 6782);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(6782, binaryImage1.Y());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      byte[] byteArray1 = new byte[0];
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(2, 2, byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      Byte byte0 = binaryImage0.max();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)1, (byte)byte0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      // Undeclared exception!
      try { 
        binaryImage1.set(0, 2562, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][7];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      int int0 = (-832);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byte byte2 = byte1.byteValue();
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2 == byte0);
      assertEquals((byte)0, byte2);
      
      int int1 = 1075;
      ROI rOI0 = new ROI(1075, 1075, 1075, 1075);
      assertNotNull(rOI0);
      assertEquals(1075, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1075, rOI0.ly());
      assertEquals(1075, rOI0.lx());
      assertEquals(1075, rOI0.ux());
      
      BinaryImage binaryImage1 = binaryImage0.shift(1743, (-2419));
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1075, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1075, rOI0.ly());
      assertEquals(1075, rOI0.lx());
      assertEquals(1075, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(1075, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1075, rOI0.ly());
      assertEquals(1075, rOI0.lx());
      assertEquals(1075, rOI0.ux());
      
      String string0 = binaryImage1.toString();
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      // Undeclared exception!
      try { 
        binaryImage0.set((-2419), (-832), (Byte) (byte)0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-557), (-557));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.shift((-729), (-729));
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, image0.Y());
      assertEquals(2, image0.X());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(2, 2);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ImageProducer imageProducer1 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(imageProducer1, imageProducer0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = binaryImage1.union(binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.Y());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][8];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-14);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-14);
      byteArray2[2] = (byte) (-14);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-14);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)0;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-14);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-14);
      byteArray4[5] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte) (-61);
      byteArray5[2] = (byte)0;
      byteArray0[4] = byteArray5;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(2, 6782);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(6782, binaryImage1.Y());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(6782, binaryImage1.Y());
      assertEquals(6782, image0.Y());
      assertEquals(2, image0.X());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      
      BinaryImage binaryImage3 = binaryImage0.compliment();
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2, binaryImage0.Y());
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage3.X());
      assertEquals(2, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.count());
      
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1065;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1065, (-585));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(2, 2);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      int int0 = binaryImage1.count();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals(0, int0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      
      BinaryImage binaryImage2 = binaryImage1.compliment();
      assertNotNull(binaryImage2);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.count());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.count());
      assertEquals(2, binaryImage2.Y());
      assertEquals(2, binaryImage2.X());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 2;
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(4, binaryImage1.count());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-10);
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(2, 2, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      ImageKernel imageKernel0 = new ImageKernel(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(imageKernel0);
      assertEquals(32767.0F, imageKernel0.min(), 0.01F);
      assertEquals((-32768.0F), imageKernel0.max(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0, imageKernel0.Y());
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(0, imageKernel0.X());
      
      BinaryImage binaryImage0 = new BinaryImage(128, 461);
      assertNotNull(binaryImage0);
      assertEquals(128, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(461, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(128, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(461, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(461, image0.Y());
      assertEquals(128, image0.X());
      
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-1395), (-1395), (byte[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage2 = new BinaryImage(3305, 3305);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(3305, binaryImage2.Y());
      assertEquals(3305, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage2.union(binaryImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.count());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(2, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, image0.X());
      assertEquals(2, image0.Y());
      
      BinaryImage binaryImage2 = binaryImage0.shift(2, (-1158));
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(2, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      int int0 = binaryImage1.X();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertEquals(2, int0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(2, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int7 = rOI0.ly();
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      Image image1 = binaryImage0.copy(rOI0);
      assertNotNull(image1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(image1, image0);
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1, image1.X());
      assertEquals(1, image1.Y());
      
      BinaryImage binaryImage3 = new BinaryImage();
      assertNotNull(binaryImage3);
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image1));
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      // Undeclared exception!
      try { 
        binaryImage2.union(binaryImage3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      
      Byte byte0 = binaryImage0.max();
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      assertEquals(2, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.set(997, 2, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(787, 758);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(787, binaryImage0.X());
      assertEquals(758, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Integer integer0 = new Integer(255);
      assertNotNull(integer0);
      assertEquals(255, (int)integer0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer1 = new Integer(787);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(787, (int)integer1);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(787, binaryImage0.X());
      assertEquals(758, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(787, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(758, binaryImage1.Y());
      
      // Undeclared exception!
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(2, 6782);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(6782, binaryImage1.Y());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals(6782, binaryImage1.Y());
      assertEquals(6782, image0.Y());
      assertEquals(2, image0.X());
      
      // Undeclared exception!
      binaryImage1.copy();
  }
}
