/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:10:52 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ActivityLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.LBDConflictTimer;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityLCDS_ESTest extends ActivityLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, noRestarts0);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertSame(noRestarts0, conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lubyRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      // Undeclared exception!
      try { 
        activityLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(1);
      Constr constr0 = mixedDataStructureDanielHT0.createCardinalityConstraint(vecInt0, 0);
      // Undeclared exception!
      try { 
        activityLCDS0.onConflictAnalysis(constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, noRestarts0);
      // Undeclared exception!
      try { 
        activityLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(1);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      activityLCDS0.onConflictAnalysis(learntWLClause0);
      assertEquals(1.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, fixedPeriodRestarts0);
      UnitClause unitClause0 = new UnitClause(0);
      activityLCDS0.onConflictAnalysis(unitClause0);
      assertTrue(unitClause0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      solver0.setVerbose(true);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, fixedPeriodRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      activityLCDS0.reduce(vec0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 0);
      solver0.learn(binaryClauses0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, fixedPeriodRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      activityLCDS0.reduce(vec0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      activityLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, lBDConflictTimer0);
      UnitClause unitClause0 = new UnitClause(0);
      activityLCDS0.onPropagation(unitClause0);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[4];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      SearchParams searchParams0 = new SearchParams();
      LubyRestarts lubyRestarts0 = new LubyRestarts(508);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, lubyRestarts0);
      activityLCDS0.onClauseLearning((Constr) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, fixedPeriodRestarts0);
      String string0 = activityLCDS0.toString();
      assertEquals("Activity based learned constraints deletion strategy with timer constant restarts strategy every 0 conflicts", string0);
  }
}
