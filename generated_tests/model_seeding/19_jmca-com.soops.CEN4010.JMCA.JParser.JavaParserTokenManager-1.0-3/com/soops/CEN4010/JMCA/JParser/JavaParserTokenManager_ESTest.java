/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 17:27:47 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}/&X4niS@");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(125, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 125, 125, 125);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int1 = stringReader0.read();
      assertEquals(47, int1);
      assertFalse(int1 == int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(125, javaCharStream0.getLine());
      assertEquals(125, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals(125, javaCharStream0.getColumn());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(125, token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(125, token0.endColumn);
      assertEquals(125, token0.beginColumn);
      assertEquals(125, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(125, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(130, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(130, javaCharStream0.getColumn());
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals("X4niS", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(126, token1.beginColumn);
      assertEquals(125, token1.beginLine);
      assertEquals(130, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(125, token1.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(125, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(130, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(130, javaCharStream0.getColumn());
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals("X4niS", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(126, token1.beginColumn);
      assertEquals(125, token1.beginLine);
      assertEquals(130, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(125, token1.endLine);
  }
}
