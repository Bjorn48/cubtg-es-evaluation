* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 4246
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550377576093
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.19284467713787085
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.10504774897680765
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.068
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06390977443609022
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.1889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1732283464566929
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06275579809004093
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ShutdownTestWriter
[MASTER] 05:26:58.456 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 281
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2425828970331588
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.14051841746248295
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.112
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16917293233082706
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.10231923601637108
[MASTER] 05:27:08.152 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.IOrder
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 368
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 451
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3045375218150087
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19236016371077763
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.168
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21804511278195488
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.36220472440944884
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.13915416098226466
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 534
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 617
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3621291448516579
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2291950886766712
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.244
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5590551181102362
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.47244094488188976
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.16371077762619374
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 698
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 789
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.37783595113438045
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.272
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2669172932330827
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17598908594815826
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 880
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.38219895287958117
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24829467939972716
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2733333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2819548872180451
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6299212598425197
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1800818553888131
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 974
* naaame: org.evosuite.ShutdownTestWriter
[MASTER] 05:27:39.150 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.Constr
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1061
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.40575916230366493
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27694406548431105
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.312
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2932330827067669
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6850393700787402
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20463847203274216
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1151
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1239
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.40924956369982546
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.31466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3007518796992481
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7244094488188977
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5905511811023622
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.23601637107776263
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1327
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.41535776614310643
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2837653478854025
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32133333333333336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3082706766917293
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7637795275590551
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6220472440944882
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24010914051841747
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1407
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1491
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.42408376963350786
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29058663028649384
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3253333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3233082706766917
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6456692913385826
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24693042291950887
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1578
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1670
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4293193717277487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2946793997271487
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.328
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3233082706766917
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8188976377952756
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6614173228346457
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.25102319236016374
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1759
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1847
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.462478184991274
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3165075034106412
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3308270676691729
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6850393700787402
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2728512960436562
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1931
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2022
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.47033158813263526
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32060027285129605
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3506666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7007874015748031
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.27694406548431105
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2121
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2200
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5078534031413613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36289222373806274
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3973333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3609022556390977
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7322834645669292
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.30286493860845837
* Search finished after 124s and 23 generations, 44056 statements, best individual has fitness: 2213.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5078534031413613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36289222373806274
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3973333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3609022556390977
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7322834645669292
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.30286493860845837
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5078534031413613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36289222373806274
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3973333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3609022556390977
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7322834645669292
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.30286493860845837
* Minimizing test suite
[MASTER] 05:29:35.389 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 53%
* Total number of goals: 1146
* Number of covered goals: 602
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 36%
* Total number of goals: 733
* Number of covered goals: 266
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 41%
* Total number of goals: 750
* Number of covered goals: 308
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 266
* Number of covered goals: 96
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 127
* Number of covered goals: 117
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 73%
* Total number of goals: 127
* Number of covered goals: 93
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 30%
* Total number of goals: 733
* Number of covered goals: 222
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5078534031413613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36289222373806274
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3973333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3609022556390977
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7322834645669292
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.30286493860845837
* Generated 261 tests with total length 5706
* Resulting test suite's coverage: 57% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 05:30:28.626 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6683666666666667% of time used, but only 35/261 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5078534031413613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36289222373806274
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3973333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3609022556390977
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8818897637795275
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7322834645669292
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.30286493860845837
* Compiling and checking tests
[MASTER] 05:31:10.005 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 05:31:10.024 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 05:31:10.967 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 05:31:10.968 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
PureOrder pureOrder0 = new PureOrder(2524);
LubyRestarts lubyRestarts0 = new LubyRestarts(128);
lubyRestarts0.shouldRestart();
lubyRestarts0.onBackjumpToRootLevel();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts0);
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, lubyRestarts0);
solver1.setLearnedConstraintsDeletionStrategy(solver0.activity_based);

[MASTER] 05:31:14.359 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:14.360 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
SearchParams searchParams0 = new SearchParams((-2238.222878), 0, 0.0, 0);
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
solver0.isSatisfiable(true);
assertEquals(1, solver0.nVars());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
ILogAble iLogAble0 = ILogAble.CONSOLE;
Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, iLogAble0);
solver1.getOutLearnt();
assertEquals(1, solver1.nVars());


[MASTER] 05:31:15.836 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 05:31:15.837 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams0 = new SearchParams();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
varOrderHeap0.assignLiteral(1424);
FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(512);
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams1 = new SearchParams(512, (-596));
PureOrder pureOrder0 = new PureOrder();
ArminRestarts arminRestarts0 = new ArminRestarts();
MUSLauncher mUSLauncher0 = new MUSLauncher();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, arminRestarts0, mUSLauncher0);
SearchParams searchParams2 = solver0.getSearchParams();
LubyRestarts lubyRestarts0 = new LubyRestarts();
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, searchParams2, pureOrder0, lubyRestarts0);
RestartStrategy restartStrategy0 = solver1.getRestartStrategy();
restartStrategy0.shouldRestart();
lubyRestarts0.onBackjumpToRootLevel();
Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, restartStrategy0, mUSLauncher0);
DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(7);
IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
iVecInt0.size();
iVecInt0.shrink(0);
iVecInt0.size();
Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, varOrderHeap0, arminRestarts0);
solver3.clearLearntClauses();
assertEquals(2, solver3.nVars());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, lubyRestarts0);
solver4.isSatisfiable(iVecInt0);
assertEquals(1, solver4.nVars());


[MASTER] 05:31:17.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 05:31:17.536 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
PureOrder pureOrder0 = new PureOrder(0);
NoRestarts noRestarts0 = new NoRestarts();
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, noRestarts0);
SearchParams searchParams0 = solver1.getSearchParams();
Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, noRestarts0);
solver2.newVar(0);
assertEquals(3, solver2.nVars());

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("cleaning ");
Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
boolean boolean0 = solver3.isSolverKeptHot();
assertFalse(boolean0);


[MASTER] 05:31:20.713 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 05:31:20.714 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder(0);
NoRestarts noRestarts0 = new NoRestarts();
PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
lubyRestarts0.onBackjumpToRootLevel();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, pureOrder0, lubyRestarts0);
Glucose2LCDS glucose2LCDS0 = (Glucose2LCDS)solver0.lbd_based;
ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(32);
activeLearning0.setLimit(0);
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, lubyRestarts0);
solver1.getTimeout();
solver0.getLearnedConstraints();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, tabuListDecorator0, noRestarts0);
solver2.toString("");

[MASTER] 05:31:23.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:23.874 [logback-1] WARN  JUnitAnalyzer - Failing test:
 VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(18);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(18, int0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertNotNull(naturalStaticOrder1);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder1.getPhaseSelectionStrategy();
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(negativeLiteralSelectionStrategy0);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

negativeLiteralSelectionStrategy0.init(1148);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

VarOrderHeap varOrderHeap1 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap1);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(solver0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams1 = new SearchParams(18);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(18, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

vecInt0.growTo(6, 1148);
assertEquals(1148, vecInt0.last());
assertEquals(6, vecInt0.size());
assertFalse(vecInt0.isEmpty());

ConstrGroup constrGroup0 = (ConstrGroup)solver0.addExactly(vecInt0, 6);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1150, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1149, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1149, solver0.nVars());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1148, vecInt0.last());
assertEquals(6, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(0.0, constrGroup0.getActivity(), 0.01);
assertEquals(2, constrGroup0.size());
assertFalse(constrGroup0.canBePropagatedMultipleTimes());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(constrGroup0);
assertNotSame(searchParams0, searchParams1);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>((-2710));
assertEquals((-2710), percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

solver0.setKeepSolverHot(true);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertTrue(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1151, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1152, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1151, solver0.realNumberOfVariables());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotSame(searchParams0, searchParams1);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

solver0.cancelUntilTrailLevel((-275));

[MASTER] 05:31:24.207 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:24.218 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(128);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
SearchParams searchParams0 = null;
LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap1);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap1, noRestarts0, mUSLauncher0);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

VecInt vecInt0 = (VecInt)solver1.learnedLiterals;
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

VecInt vecInt1 = (VecInt)solver1.decisions;
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotNull(vecInt1);
assertNotSame(vecInt1, vecInt0);
assertTrue(vecInt1.equals((Object)vecInt0));

vecInt0.copyTo((IVecInt) vecInt1);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt1.equals((Object)vecInt0));

boolean boolean1 = vecInt0.contains((-4208));
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(boolean1);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(vecInt0, vecInt1);
assertFalse(boolean1 == boolean0);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertTrue(vecInt0.equals((Object)vecInt1));

int int0 = vecInt0.size();
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, int0);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(vecInt0, vecInt1);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertTrue(vecInt0.equals((Object)vecInt1));

vecInt1.moveTo(0, 0);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(vecInt1, vecInt0);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertTrue(vecInt1.equals((Object)vecInt0));

VecInt vecInt2 = new VecInt();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertNotNull(vecInt2);
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));

int int1 = vecInt2.size();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertEquals(0, int1);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(int1 == int0);

MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertNotNull(solver2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));

solver2.addAtMostOnTheFly((int[]) null, 3230);

[MASTER] 05:31:24.582 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:24.595 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning1 = new MiniSATLearning<MixedDataStructureSingleWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(4);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertNotNull(dimacsStringSolver0);

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(iVecInt0.isEmpty());
assertEquals(2, iVecInt0.size());
assertEquals((-2), iVecInt0.last());
assertNotNull(iVecInt0);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, eMARestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

int int0 = iVecInt0.size();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(iVecInt0.isEmpty());
assertEquals(2, iVecInt0.size());
assertEquals((-2), iVecInt0.last());
assertEquals(2, int0);

iVecInt0.shrink(4);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals((-2), iVecInt0.size());
assertFalse(iVecInt0.isEmpty());

int int1 = iVecInt0.size();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals((-2), iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals((-2), int1);
assertFalse(int1 == int0);

Lbool lbool0 = solver1.truthValue(4);
assertEquals("U", lbool0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(lbool0);

solver1.model((-4));

[MASTER] 05:31:24.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:24.969 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int int0 = 0;
PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>((-2524));
assertEquals((-2524), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("|fj'q&");
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, pureOrder0, noRestarts0, iLogAble0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals((-2524), percentLengthLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

solver1.truthValue(1822);

[MASTER] 05:31:25.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:25.405 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.setKeepSolverHot(true);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertTrue(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

solver0.cancelUntilTrailLevel(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertTrue(solver0.isSolverKeptHot());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, lubyRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.newConflict();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = solver1.out;
assertNotNull(iLogAble0);

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(5, solver2.newVar());
assertEquals(4, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(4, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(5, solver1.realNumberOfVariables());
assertNotNull(solver2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver2.equals((Object)solver1));

long long0 = solver2.getTimeoutMs();
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(8, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(9, solver2.newVar());
assertEquals(8, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(10, solver1.newVar());
assertEquals(9, solver1.nVars());
assertEquals(2147483647L, long0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(solver2, solver1);
assertNotSame(solver1, solver2);
assertFalse(solver2.equals((Object)solver1));
assertFalse(solver1.equals((Object)solver2));

solver0.initStats((SolverStats) null);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertTrue(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

solver0.expireTimeout();
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertTrue(solver0.isSolverKeptHot());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(solver3);

solver3.addExactly((IVecInt) null, 0);

[MASTER] 05:31:26.319 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:26.326 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin1);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin1, pureOrder0, eMARestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

solver0.decayActivities();
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

SearchParams searchParams0 = new SearchParams(0, (-2769.49069575), (-2025.74086653), 0);
assertEquals((-2025.74086653), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-2769.49069575), searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin1, searchParams0, pureOrder0, eMARestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals((-2025.74086653), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-2769.49069575), searchParams0.getClaDecay(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(5, solver1.realNumberOfVariables());
assertNotNull(solver1);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver1.equals((Object)solver0));

int int0 = solver1.newVar(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals((-2025.74086653), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-2769.49069575), searchParams0.getClaDecay(), 0.01);
assertEquals(7, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(0, int0);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertNotSame(solver1, solver0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver1.equals((Object)solver0));

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 05:31:26.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:26.673 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1716));
assertEquals((-1716), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

pureOrder0.assignLiteral((-1716));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertNotNull(noRestarts0);

noRestarts0.onBackjumpToRootLevel();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
assertEquals((-1716), percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

IVecInt iVecInt0 = solver0.unsatExplanation();
assertEquals((-1716), percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertNull(iVecInt0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, noRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);

Map<String, Number> map0 = solver1.getStat();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(map0.isEmpty());
assertEquals(17, map0.size());
assertNotNull(map0);

VecInt vecInt0 = new VecInt(3417, (-1716));
assertEquals((-1716), vecInt0.last());
assertEquals(3417, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertNotNull(vecInt0);

solver1.fromLastDecisionLevel(vecInt0);

[MASTER] 05:31:27.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:27.024 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

boolean boolean0 = noRestarts0.shouldRestart();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(boolean0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertNotNull(naturalStaticOrder1);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder1.getPhaseSelectionStrategy();
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(negativeLiteralSelectionStrategy0);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

negativeLiteralSelectionStrategy0.init(0);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(varOrderHeap0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(tabuListDecorator0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertNotNull(solver0);
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams1 = new SearchParams(0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams1, naturalStaticOrder1, noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

ConstrGroup constrGroup0 = (ConstrGroup)solver0.addExactly(vecInt0, 0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(2, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(constrGroup0.canBePropagatedMultipleTimes());
assertEquals(0.0, constrGroup0.getActivity(), 0.01);
assertEquals(2, constrGroup0.size());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertNotNull(constrGroup0);
assertNotSame(searchParams0, searchParams1);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

solver2.varBumpActivity(0);

[MASTER] 05:31:27.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:27.418 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.setKeepSolverHot(true);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertTrue(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, pureOrder0, eMARestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

int int0 = solver1.newVar(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, int0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 05:31:27.868 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:27.872 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureDanielHT0).getVocabulary();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(learningStrategy0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(constr0).getActivity();
solver0.claBumpActivity(constr0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

double[] doubleArray0 = solver0.getVariableHeuristics();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams((-2523));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2523), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

mUSLauncher0.displayLicense();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2523), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.primeImplicant();

[MASTER] 05:31:28.253 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:28.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

solver0.reset();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

int[] intArray0 = new int[4];
intArray0[0] = 0;
boolean boolean0 = arminRestarts0.shouldRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics1, cardinalityDataStructure0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertNotNull(solver1);

DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(128);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertNotNull(dimacsStringSolver0);

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotNull(iVecInt0);

int int0 = iVecInt0.size();
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0, int0);

iVecInt0.shrink(500);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());

int int1 = iVecInt0.size();
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());
assertEquals((-500), int1);
assertFalse(int1 == int0);

int[] intArray1 = iVecInt0.toArray();
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());
assertNotNull(intArray1);
assertEquals(0, intArray1.length);
assertArrayEquals(new int[] {}, intArray1);
assertNotSame(intArray1, intArray0);
assertFalse(intArray1.equals((Object)intArray0));

IVecInt iVecInt1 = solver1.analyzeFinalConflictInTermsOfAssumptions((Constr) null, iVecInt0, (-500));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertTrue(iVecInt1.isEmpty());
assertEquals(0, iVecInt1.size());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());
assertNotNull(iVecInt1);
assertNotSame(iVecInt1, iVecInt0);
assertNotSame(iVecInt0, iVecInt1);
assertFalse(iVecInt1.equals((Object)iVecInt0));

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(solver2);

solver2.varBumpActivity(500);

[MASTER] 05:31:28.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:28.967 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

varOrderHeap0.assignLiteral(1424);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(500);
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams1 = new SearchParams(500, (-596));
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, arminRestarts0, mUSLauncher0);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

SearchParams searchParams2 = solver0.getSearchParams();
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertNotNull(searchParams2);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, searchParams2, pureOrder0, lubyRestarts0);
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

LubyRestarts lubyRestarts1 = (LubyRestarts)solver1.getRestartStrategy();
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

boolean boolean0 = lubyRestarts1.shouldRestart();
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts0, lubyRestarts1);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts1, mUSLauncher0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(12, solver0.newVar());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.nVars());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solver2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(7);
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertNotNull(dimacsStringSolver0);

VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

int int0 = vecInt0.size();
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, int0);

vecInt0.shrink(0);
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

int int1 = vecInt0.size();
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, int1);
assertTrue(int1 == int0);

int[] intArray0 = vecInt0.toArray();
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(intArray0);
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);

IVecInt iVecInt0 = solver2.analyzeFinalConflictInTermsOfAssumptions((Constr) null, vecInt0, 0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(14, solver0.newVar());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(13, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(10, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(9, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(9, solver1.realNumberOfVariables());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNull(iVecInt0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

SearchParams searchParams3 = new SearchParams((-743.7376832), 0.0, 0.0, 2124);
assertEquals(0.0, searchParams3.getClaDecay(), 0.01);
assertEquals(2124, searchParams3.getInitConflictBound());
assertEquals(0.0, searchParams3.getConflictBoundIncFactor(), 0.01);
assertEquals((-743.7376832), searchParams3.getVarDecay(), 0.01);
assertNotNull(searchParams3);
assertFalse(searchParams3.equals((Object)searchParams2));
assertFalse(searchParams3.equals((Object)searchParams1));
assertFalse(searchParams3.equals((Object)searchParams0));

glucose21Restarts0.init(searchParams3, (SolverStats) null);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.0, searchParams3.getClaDecay(), 0.01);
assertEquals(2124, searchParams3.getInitConflictBound());
assertEquals(0.0, searchParams3.getConflictBoundIncFactor(), 0.01);
assertEquals((-743.7376832), searchParams3.getVarDecay(), 0.01);
assertNotSame(searchParams3, searchParams2);
assertNotSame(searchParams3, searchParams1);
assertNotSame(searchParams3, searchParams0);
assertFalse(searchParams3.equals((Object)searchParams2));
assertFalse(searchParams3.equals((Object)searchParams1));
assertFalse(searchParams3.equals((Object)searchParams0));

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, glucose21Restarts0, mUSLauncher0);
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solver3);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams3));
assertFalse(searchParams0.equals((Object)searchParams2));

SolverStats solverStats0 = solver3.getStats();
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solverStats0);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams3);
assertNotSame(searchParams0, searchParams2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams3));
assertFalse(searchParams0.equals((Object)searchParams2));


[MASTER] 05:31:29.258 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:29.260 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams((-2238.222878), 0, 0.0, 0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-2238.222878), searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-2238.222878), searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

boolean boolean0 = solver0.isSatisfiable(true);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-2238.222878), searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertTrue(boolean0);


[MASTER] 05:31:29.617 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:29.622 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertNotNull(noRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, noRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

SearchParams searchParams0 = solver1.getSearchParams();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary1);
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, (CardinalityDataStructureYanMin) null, levelBasedVarOrderHeap0, miniSATRestarts0);

[MASTER] 05:31:30.008 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:30.022 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning1 = new MiniSATLearning<MixedDataStructureSingleWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, searchParams0, subsetVarOrder0, eMARestarts0, (ILogAble) null);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(solver1);
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILogAble iLogAble0 = solver1.getLogger();
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(10, percentLengthLearning1.getLimit());
assertNull(iLogAble0);
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(miniSATLearning1, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0, (ILogAble) null);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(solver2);

NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics0);

Solver<MixedDataStructureSingleWL> solver3 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertNotNull(solver3);
assertFalse(solver3.equals((Object)solver2));

boolean boolean0 = solver3.isSatisfiable(false);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(5, solver3.realNumberOfVariables());
assertEquals(0, solver3.nConstraints());
assertEquals(6, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(5, solver3.nVars());
assertTrue(boolean0);
assertNotSame(solver3, solver2);
assertFalse(solver3.equals((Object)solver2));


[MASTER] 05:31:30.381 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:30.386 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
Lits lits0 = new Lits();
assertEquals(0, lits0.realnVars());
assertEquals(0, lits0.nVars());
assertNotNull(lits0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(learningStrategy0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

double[] doubleArray0 = solver0.getVariableHeuristics();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int[] intArray0 = new int[0];
solver1.backtrack(intArray0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

solver1.model(32);

[MASTER] 05:31:30.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:30.736 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams((-2238.222878), 0, 0.0, 0);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-2238.222878), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-2238.222878), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

double double0 = naturalStaticOrder0.varActivity(0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0.0, double0, 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, naturalStaticOrder0, miniSATRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

solver1.registerLiteral((-308));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(310, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(309, solver1.nVars());
assertEquals(309, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());


[MASTER] 05:31:31.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:31.167 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(noRestarts0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

pureOrder0.varDecayActivity();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

SearchParams searchParams1 = new SearchParams(0, 0, 2.0, 0);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

int int0 = searchParams1.getInitConflictBound();
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0, int0);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, miniSATRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams2 = new SearchParams(0, 0);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0, searchParams2.getInitConflictBound());
assertNotNull(searchParams2);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));

VecInt vecInt0 = new VecInt(0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

vecInt0.shrink(0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

vecInt0.growTo(1149, 32);
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.last());
assertEquals(1149, vecInt0.size());

IConstr iConstr0 = solver0.addExactly(vecInt0, 0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(33, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(33, solver0.realNumberOfVariables());
assertEquals(34, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.last());
assertEquals(1149, vecInt0.size());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(2, iConstr0.size());
assertEquals(0.0, iConstr0.getActivity(), 0.01);
assertFalse(iConstr0.canBePropagatedMultipleTimes());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(iConstr0);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(1149);
assertEquals(1149, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

solver0.setKeepSolverHot(false);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(35, solver0.realNumberOfVariables());
assertEquals(35, solver0.nVars());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(36, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));

solver0.cancelUntilTrailLevel(32);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(37, solver0.realNumberOfVariables());
assertEquals(38, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(37, solver0.nVars());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));


[MASTER] 05:31:31.523 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:31.532 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(67);
assertEquals(67, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = new Integer(67);
assertEquals(67, double1, 0.01);
assertNotEquals(double1, double0, 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("");
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, miniSATRestarts0, iLogAble0);
assertEquals(67, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) miniSATRestarts0, learnedConstraintsEvaluationType0);
assertEquals(67, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

int int0 = solver1.decisionLevel();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, int0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(solver2);

solver2.cancelUntilTrailLevel((-1129));
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());


[MASTER] 05:31:31.851 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:31.855 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[8];
intArray0[0] = (-2010);
intArray0[1] = 4;
intArray0[2] = (-397);
intArray0[3] = 821;
intArray0[4] = (-3245);
intArray0[5] = (-614);
intArray0[6] = Integer.MIN_VALUE;
intArray0[7] = (-1111);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {(-2010), 4, (-397), 821, (-3245), (-614), Integer.MIN_VALUE, (-1111)}, intArray0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("cleaning ");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, subsetVarOrder0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver0);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {(-2010), 4, (-397), 821, (-3245), (-614), Integer.MIN_VALUE, (-1111)}, intArray0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNull(searchParams0);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {(-2010), 4, (-397), 821, (-3245), (-614), Integer.MIN_VALUE, (-1111)}, intArray0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, (SearchParams) null, subsetVarOrder0, fixedPeriodRestarts0);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver1);
assertEquals(8, intArray0.length);
assertArrayEquals(new int[] {(-2010), 4, (-397), 821, (-3245), (-614), Integer.MIN_VALUE, (-1111)}, intArray0);

solver1.isSatisfiable(true);

[MASTER] 05:31:32.485 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:32.599 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning1 = new MiniSATLearning<MixedDataStructureSingleWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

MixedDataStructureDanielWL mixedDataStructureDanielWL1 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL1);
assertFalse(mixedDataStructureDanielWL1.equals((Object)mixedDataStructureDanielWL0));

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(500);
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL2 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL2);
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics1);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin1);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

SearchParams searchParams1 = new SearchParams(500, (-596));
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts1 = new ArminRestarts();
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertNotNull(arminRestarts1);
assertFalse(arminRestarts1.equals((Object)arminRestarts0));

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics1, cardinalityDataStructureYanMin1, searchParams1, pureOrder0, arminRestarts1, mUSLauncher0);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));

SearchParams searchParams2 = solver0.getSearchParams();
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertNotNull(searchParams2);
assertNotSame(noLearningNoHeuristics1, noLearningNoHeuristics0);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertNotSame(arminRestarts1, arminRestarts0);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL2, searchParams2, pureOrder0, lubyRestarts0);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));

LubyRestarts lubyRestarts1 = (LubyRestarts)solver1.getRestartStrategy();
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertNotNull(lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(mixedDataStructureDanielWL2, mixedDataStructureDanielWL0);
assertNotSame(mixedDataStructureDanielWL2, mixedDataStructureDanielWL1);
assertNotSame(noLearningNoHeuristics1, noLearningNoHeuristics0);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertNotSame(arminRestarts1, arminRestarts0);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

boolean boolean0 = lubyRestarts1.shouldRestart();
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(mixedDataStructureDanielWL2, mixedDataStructureDanielWL0);
assertNotSame(mixedDataStructureDanielWL2, mixedDataStructureDanielWL1);
assertNotSame(noLearningNoHeuristics1, noLearningNoHeuristics0);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertNotSame(arminRestarts1, arminRestarts0);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts0, lubyRestarts1);

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, lubyRestarts1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertNotNull(solver2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

VecInt vecInt0 = (VecInt)AbstractMinimalModel.positiveLiterals(solver2);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(13, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(14, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(10, solver1.newVar());
assertEquals(9, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(9, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertEquals(2, vecInt0.last());
assertNotNull(vecInt0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertNotSame(mixedDataStructureDanielWL2, mixedDataStructureDanielWL0);
assertNotSame(mixedDataStructureDanielWL2, mixedDataStructureDanielWL1);
assertNotSame(noLearningNoHeuristics1, noLearningNoHeuristics0);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertNotSame(arminRestarts1, arminRestarts0);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

Vec<IVecInt> vec0 = new Vec<IVecInt>(1964, vecInt0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(15, solver0.realNumberOfVariables());
assertEquals(16, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(15, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(11, solver1.realNumberOfVariables());
assertEquals(12, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(11, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(6, solver2.newVar());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(5, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertEquals(2, vecInt0.last());
assertEquals(1964, vec0.size());
assertFalse(vec0.isEmpty());
assertNotNull(vec0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

ReadOnlyVec<IVecInt> readOnlyVec0 = new ReadOnlyVec<IVecInt>(vec0);
assertEquals(1964, readOnlyVec0.size());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(500, fixedLengthLearning0.getMaxLength());
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
assertTrue(arminRestarts1.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(17, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(17, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(18, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(14, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(13, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(13, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(8, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(7, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(7, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertEquals(2, vecInt0.last());
assertEquals(1964, vec0.size());
assertFalse(vec0.isEmpty());
assertNotNull(readOnlyVec0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL0));
assertFalse(mixedDataStructureDanielWL2.equals((Object)mixedDataStructureDanielWL1));
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(arminRestarts1.equals((Object)arminRestarts0));
assertFalse(searchParams2.equals((Object)searchParams0));

solver2.addAllClauses(readOnlyVec0);

[MASTER] 05:31:33.190 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:33.197 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureDanielHT0).getVocabulary();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(learningStrategy0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
doReturn((double)32).when(constr0).getActivity();
solver0.claBumpActivity(constr0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

double[] doubleArray0 = solver0.getVariableHeuristics();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams((-2523));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2523), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(179);
assertEquals(179, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
assertEquals(179, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

String string0 = varOrderHeap0.toString();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(string0);
assertEquals("VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause", string0);

solver1.unset(179);
assertEquals(179, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = solver1.getLogger();
assertEquals(179, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(iLogAble0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>((-325.220679561));
assertEquals((-325.220679561), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);


[MASTER] 05:31:33.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:33.963 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

varOrderHeap0.assignLiteral(1424);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(500);
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams1 = new SearchParams(500, (-596));
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, arminRestarts0, mUSLauncher0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

SearchParams searchParams2 = solver0.getSearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams2);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, searchParams2, pureOrder0, lubyRestarts0);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

LubyRestarts lubyRestarts1 = (LubyRestarts)solver1.getRestartStrategy();
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertNotNull(lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

boolean boolean0 = lubyRestarts1.shouldRestart();
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts0, lubyRestarts1);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts1, mUSLauncher0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isSolverKeptHot());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(7, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solver2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(7);
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertNotNull(dimacsStringSolver0);

VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

int int0 = vecInt0.size();
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, int0);

vecInt0.shrink(0);
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

int int1 = vecInt0.size();
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, int1);
assertTrue(int1 == int0);

int[] intArray0 = vecInt0.toArray();
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(intArray0);
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);

IVecInt iVecInt0 = solver2.analyzeFinalConflictInTermsOfAssumptions((Constr) null, vecInt0, 0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals((-596), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(500.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(14, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals((-596), searchParams2.getInitConflictBound());
assertEquals(500.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(9, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(10, solver1.newVar());
assertEquals(9, solver1.nVars());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.newVar());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(dimacsStringSolver0.isVerbose());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNull(iVecInt0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams0, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);
assertNotSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));


[MASTER] 05:31:34.380 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:34.398 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(noRestarts0);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(boolean0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, int0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(negativeLiteralSelectionStrategy0);

negativeLiteralSelectionStrategy0.init(1000);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(varOrderHeap0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(tabuListDecorator0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, noRestarts0);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(solver0);

NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics1);

solver0.initStats((SolverStats) null);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureDanielWL>((-1423));
assertEquals((-1423), percentLengthLearning2.getLimit());
assertNotNull(percentLengthLearning2);
assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning0));

MixedDataStructureDanielWL mixedDataStructureDanielWL1 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL1);
assertFalse(mixedDataStructureDanielWL1.equals((Object)mixedDataStructureDanielWL0));

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("");
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning2, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, noRestarts0, iLogAble0);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals((-1423), percentLengthLearning2.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(solver1);
assertFalse(mixedDataStructureDanielWL0.equals((Object)mixedDataStructureDanielWL1));
assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning0));

Lbool lbool0 = solver1.truthValue(0);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals((-1423), percentLengthLearning2.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals("U", lbool0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(lbool0);
assertNotSame(mixedDataStructureDanielWL0, mixedDataStructureDanielWL1);
assertNotSame(percentLengthLearning2, percentLengthLearning0);
assertFalse(mixedDataStructureDanielWL0.equals((Object)mixedDataStructureDanielWL1));
assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning0));

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(solver2);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = (CardinalityDataStructureYanMin)solver2.getDSFactory();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(cardinalityDataStructureYanMin1);
assertSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
assertSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);

solver1.setRestartStrategy(noRestarts0);
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals((-1423), percentLengthLearning2.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotSame(mixedDataStructureDanielWL0, mixedDataStructureDanielWL1);
assertNotSame(percentLengthLearning2, percentLengthLearning0);
assertFalse(mixedDataStructureDanielWL0.equals((Object)mixedDataStructureDanielWL1));
assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning0));


[MASTER] 05:31:35.027 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:35.057 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(mixedDataStructureDanielHT0).getVocabulary();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(learningStrategy0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[4];
intArray0[0] = 60;
intArray0[1] = (-258);
intArray0[2] = 4;
intArray0[3] = 94;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, glucose21Restarts0);
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solver1);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);

MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver1);
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(minOneDecorator0.isOptimal());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(minOneDecorator0);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(1583);
assertEquals(1583, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(randomWalkDecorator0);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics1, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solver2);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);

SearchParams searchParams1 = solver2.getSearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(searchParams1);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);

IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(minOneDecorator0.isOptimal());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(iVecInt0);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);

IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(minOneDecorator0.isOptimal());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertTrue(iVecInt1.isEmpty());
assertEquals(0, iVecInt1.size());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(iVecInt1);
assertEquals(4, intArray0.length);
assertArrayEquals(new int[] {60, (-258), 4, 94}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(iVecInt0, iVecInt1);
assertNotSame(iVecInt1, iVecInt0);
assertTrue(iVecInt1.equals((Object)iVecInt0));

Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
doReturn((double)32).when(constr0).getActivity();
solver0.claBumpActivity(constr0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

double[] doubleArray0 = solver0.getVariableHeuristics();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning2.getLimit());
assertNotNull(percentLengthLearning2);

SearchParams searchParams2 = new SearchParams();
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams2);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));

String string0 = searchParams2.toString();
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertNotNull(string0);
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));

SearchParams searchParams3 = new SearchParams((-2523), 1.0E20, (-2523), (-1705));
assertEquals((-2523.0), searchParams3.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E20, searchParams3.getClaDecay(), 0.01);
assertEquals((-2523.0), searchParams3.getVarDecay(), 0.01);
assertEquals((-1705), searchParams3.getInitConflictBound());
assertNotNull(searchParams3);
assertFalse(searchParams3.equals((Object)searchParams2));
assertFalse(searchParams3.equals((Object)searchParams0));
assertFalse(searchParams3.equals((Object)searchParams1));

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL1);
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));

Solver<MixedDataStructureSingleWL> solver3 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL1, searchParams3, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
assertEquals((-2523.0), searchParams3.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E20, searchParams3.getClaDecay(), 0.01);
assertEquals((-2523.0), searchParams3.getVarDecay(), 0.01);
assertEquals((-1705), searchParams3.getInitConflictBound());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertNotNull(solver3);
assertFalse(searchParams3.equals((Object)searchParams2));
assertFalse(searchParams3.equals((Object)searchParams0));
assertFalse(searchParams3.equals((Object)searchParams1));
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver4 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, solver4.decisionLevel());
assertEquals(0, solver4.getPropagationLevel());
assertEquals(0, solver4.currentDecisionLevel());
assertEquals(1, solver4.realNumberOfVariables());
assertEquals("c ", solver4.getLogPrefix());
assertFalse(solver4.isVerbose());
assertFalse(solver4.isDBSimplificationAllowed());
assertEquals(2147483, solver4.getTimeout());
assertEquals(0, solver4.nConstraints());
assertEquals(2, solver4.newVar());
assertFalse(solver4.isSolverKeptHot());
assertEquals(1, solver4.nVars());
assertNotNull(solver4);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = solver4.out;
assertNotNull(iLogAble0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin1);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

CardinalityDataStructureYanMin cardinalityDataStructureYanMin2 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin2);
assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));

Solver<CardinalityDataStructureYanMin> solver5 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin2, levelBasedVarOrderHeap0, fixedPeriodRestarts0);

[MASTER] 05:31:35.403 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:35.406 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(128);
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.clearLearntClauses();
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 05:31:35.710 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:35.713 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

int int0 = solver0.nVars();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, int0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertNotNull(clauseOnlyLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(122);
assertEquals(122, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, glucose21Restarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(122, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

IVecInt iVecInt0 = VecInt.EMPTY;
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

solver1.addParity(iVecInt0, true);

[MASTER] 05:31:36.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:36.183 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

solver0.reset();
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());

int[] intArray0 = new int[4];
intArray0[0] = 0;
boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics1, cardinalityDataStructure0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(128);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertNotNull(dimacsStringSolver0);

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

int int0 = iVecInt0.size();
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, int0);

iVecInt0.shrink(500);
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());

int int1 = iVecInt0.size();
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());
assertEquals((-500), int1);
assertFalse(int1 == int0);

int[] intArray1 = iVecInt0.toArray();
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());
assertNotNull(intArray1);
assertEquals(0, intArray1.length);
assertArrayEquals(new int[] {}, intArray1);
assertNotSame(intArray1, intArray0);
assertFalse(intArray1.equals((Object)intArray0));

IVecInt iVecInt1 = solver1.analyzeFinalConflictInTermsOfAssumptions((Constr) null, iVecInt0, (-500));
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(iVecInt1.isEmpty());
assertEquals(0, iVecInt1.size());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("", dimacsStringSolver0.getLogPrefix());
assertEquals(0, dimacsStringSolver0.nVars());
assertEquals(0, dimacsStringSolver0.nConstraints());
assertFalse(dimacsStringSolver0.isVerbose());
assertEquals(0, dimacsStringSolver0.getTimeout());
assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
assertFalse(dimacsStringSolver0.isSolverKeptHot());
assertEquals(0, dimacsStringSolver0.newVar());
assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
assertFalse(iVecInt0.isEmpty());
assertEquals((-500), iVecInt0.size());
assertNotNull(iVecInt1);
assertNotSame(iVecInt1, iVecInt0);
assertNotSame(iVecInt0, iVecInt1);
assertFalse(iVecInt1.equals((Object)iVecInt0));

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertNotNull(solver2);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver2.setLearnedConstraintsDeletionStrategy((ConflictTimer) arminRestarts0, learnedConstraintsEvaluationType0);
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());


[MASTER] 05:31:36.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 05:31:36.548 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

solver0.reset();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

int[] intArray0 = new int[4];
intArray0[0] = 0;
solver0.model(0);

[MASTER] 05:31:36.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:36.858 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

int[] intArray0 = new int[4];
intArray0[0] = 0;
intArray0[1] = 0;
intArray0[2] = 0;
intArray0[3] = 0;
solver0.backtrack(intArray0);

[MASTER] 05:31:37.226 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 05:31:37.234 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
Lits lits0 = new Lits();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertNotNull(lits0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
doReturn(lits0).when(mixedDataStructureDanielHT0).getVocabulary();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(learningStrategy0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, lits0.realnVars());
assertEquals(2, lits0.nVars());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

double[] doubleArray0 = solver0.getVariableHeuristics();
assertEquals(4, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams((-2523));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2523), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2523), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int[] intArray0 = new int[0];
solver1.backtrack(intArray0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2523), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, intArray0.length);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);


[MASTER] 05:31:37.519 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 05:31:37.526 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(2524);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2524, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts(128);
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2524, pureOrder0.getPeriod());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2524, pureOrder0.getPeriod());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(128);
assertEquals(0, activeLearning0.getLimit());
assertEquals(128.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, (SearchParams) null, pureOrder0, lubyRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2524, pureOrder0.getPeriod());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(128.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Constr constr0 = Constr.TAUTOLOGY;
assertNotNull(constr0);

solver1.claBumpActivity(constr0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2524, pureOrder0.getPeriod());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(128.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
