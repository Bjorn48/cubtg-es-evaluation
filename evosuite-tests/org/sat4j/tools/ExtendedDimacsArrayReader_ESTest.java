/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:57:58 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ExtendedDimacsArrayReader;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedDimacsArrayReader_ESTest extends ExtendedDimacsArrayReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MinOneDecorator> basicLauncher0 = new BasicLauncher<MinOneDecorator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0, basicLauncher0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(solver0);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(6, 6, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(2, 2, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[1];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(11, 110, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(gateTranslator0);
      int[][] intArray0 = new int[6][3];
      extendedDimacsArrayReader0.handleConstr(8, 8, intArray0[3]);
      assertEquals(8, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[8];
      intArray0[0] = 14;
      intArray0[1] = 8;
      intArray0[2] = 13;
      intArray0[3] = 12;
      intArray0[4] = 12;
      intArray0[5] = 14;
      intArray0[6] = 12;
      intArray0[7] = 15;
      extendedDimacsArrayReader0.handleConstr(4, 9, intArray0);
      assertEquals(9, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[1];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(3, (-1253), intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[8];
      extendedDimacsArrayReader0.handleConstr(6, 10, intArray0);
      assertEquals(9, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(1, (-233), intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[10];
      // Undeclared exception!
      extendedDimacsArrayReader0.handleConstr(11, 127, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(4, 7, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, 2, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[3];
      extendedDimacsArrayReader0.handleConstr(12, 495, intArray0);
      assertEquals(6, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(2, 2, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(1, 1, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3497, 46, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 3497 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIteratorToSATAdapter0);
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator0, false);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(fullClauseSelectorSolver0);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(11, 11, intArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(10, 10, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 10 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(9, 10, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 9 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(7, 7, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 7 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(5, 5, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 5 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, 10, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, (SolutionFoundListener) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(2, 11, intArray0);
      assertTrue(boolean0);
  }
}
