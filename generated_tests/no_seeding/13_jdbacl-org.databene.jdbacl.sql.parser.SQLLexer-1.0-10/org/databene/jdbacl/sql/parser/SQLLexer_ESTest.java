/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:47:14 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.databene.jdbacl.sql.parser.SQLLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLLexer_ESTest extends SQLLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSUB();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(103, (-3852)).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 0;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0._fsp = (-1);
      recognizerSharedState0.text = null;
      recognizerSharedState0.text = null;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState1._fsp = 35;
      recognizerSharedState1.syntaxErrors = 96;
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45).when(charStream0).getCharPositionInLine();
      doReturn(45).when(charStream0).getLine();
      doReturn(45, 45).when(charStream0).LA(anyInt());
      doReturn(181).when(charStream0).index();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3030)).when(charStream0).getCharPositionInLine();
      doReturn((-3030)).when(charStream0).getLine();
      doReturn(150, 150).when(charStream0).LA(anyInt());
      doReturn(100).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-3030), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-3030), sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1077)).when(intStream0).LA(anyInt());
      doReturn(3).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(3, recognitionException0.index);
      assertEquals((-1077), recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      try { 
        sQLLexer0.mNULL();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(4, SQLLexer.INT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(37, SQLLexer.GT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mTIMESTAMP();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.reset();
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(charStream0).getCharPositionInLine();
      doReturn(13).when(charStream0).getLine();
      doReturn(13, (-2074), 0, 0).when(charStream0).LA(anyInt());
      doReturn(2469).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(39, SQLLexer.LT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(13, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(13, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.matchRange(0, (-635));
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(39, SQLLexer.LT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(13, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(13, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBARBAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(charStream0).getCharPositionInLine();
      doReturn(3).when(charStream0).getLine();
      doReturn(3, 3).when(charStream0).LA(anyInt());
      doReturn(3).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3, sQLLexer0.getCharPositionInLine());
      assertEquals(3, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__121();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mAND();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1639).when(charStream0).getCharPositionInLine();
      doReturn(1639).when(charStream0).getLine();
      doReturn((-161), (-161)).when(charStream0).LA(anyInt());
      doReturn(1639).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(1639, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1639, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getLine());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "..");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__128();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, (-1766), 0).when(charStream0).getCharPositionInLine();
      doReturn(45, 45, 0).when(charStream0).getLine();
      doReturn((-1588), 45, 1, 110, 104).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn((-1588), 45, 1, 0).when(charStream0).index();
      doReturn(1).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals((-1766), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1766), commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals(45, commonToken0.getLine());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      boolean boolean0 = linkedList0.add((Token) commonToken0);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals((-1766), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(1, linkedList0.size());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1766), commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals(45, commonToken0.getLine());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getStopIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3257).when(charStream0).getCharPositionInLine();
      doReturn(3257).when(charStream0).getLine();
      doReturn(3257, 840).when(charStream0).LA(anyInt());
      doReturn((-210)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartCharPositionInLine = (-1941);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1941), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(3257, sQLLexer0.getLine());
      assertEquals(3257, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer();
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(63, sQLLexer0.getLine());
      assertEquals(63, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, (RecognizerSharedState) null);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__69();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.channel);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState2);
      
      recognizerSharedState2.channel = 0;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(37, SQLLexer.GT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(32, SQLLexer.AND);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBANGEQ();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2718).when(charStream0).getCharPositionInLine();
      doReturn(2718).when(charStream0).getLine();
      doReturn(399, 1511).when(charStream0).LA(anyInt());
      doReturn(399).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2718, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2718, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer1);
      
      sQLLexer1.mCOLUMN_SPEC();
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotSame(sQLLexer1, sQLLexer0);
      
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, (RecognizerSharedState) null);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartCharPositionInLine = (-1941);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1941), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(120).when(charStream0).getCharPositionInLine();
      doReturn((-2659)).when(charStream0).getLine();
      doReturn(29, 20).when(charStream0).LA(anyInt());
      doReturn(132).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(43, SQLLexer.IN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(37, SQLLexer.GT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals((-2659), sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mTABLE_DETAILS();
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotSame(sQLLexer0, sQLLexer1);
      
      try { 
        sQLLexer1.mT__120();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(139).when(charStream0).getCharPositionInLine();
      doReturn(139).when(charStream0).getLine();
      doReturn(139, 139).when(charStream0).LA(anyInt());
      doReturn(139).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(139, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(139, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charStream0).LA(anyInt());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.backtracking = 66;
      String[] stringArray0 = new String[0];
      String string0 = sQLLexer0.getErrorMessage(recognitionException0, stringArray0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(66, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(66, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(66, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(66, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mDATE();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(57, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(66, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(66, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__115();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(66, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(115, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(66, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__90();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(90, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(66, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(66, sQLLexer0.getBacktrackingLevel());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mBARBAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(288).when(charStream0).getCharPositionInLine();
      doReturn(115).when(charStream0).getLine();
      doReturn(54, 1347, 0).when(charStream0).LA(anyInt());
      doReturn(3209).when(charStream0).index();
      doReturn((-3608)).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(288, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(115, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__61();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__87();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      recognizerSharedState0.token = null;
      // Undeclared exception!
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, (-1588), 0).when(charStream0).getCharPositionInLine();
      doReturn(45, 940, 0).when(charStream0).getLine();
      doReturn((-1588), 45, 45, 82, 97).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn((-1588), 13, 940, 0).when(charStream0).index();
      doReturn((-3449)).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(940, sQLLexer0.getLine());
      assertEquals((-1588), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(13, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1588), commonToken0.getCharPositionInLine());
      assertEquals(940, commonToken0.getLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      boolean boolean0 = linkedList0.add((Token) commonToken0);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(940, sQLLexer0.getLine());
      assertEquals((-1588), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, linkedList0.size());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(13, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1588), commonToken0.getCharPositionInLine());
      assertEquals(940, commonToken0.getLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)90;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-72), (byte)123, (byte)4, (byte)33, (byte) (-25), (byte) (-48), (byte)90}, byteArray0);
      
      recognizerSharedState0._fsp = (-2002);
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-2002), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-2002), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1._fsp = (-2002);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-2002), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-2002), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(288).when(charStream0).getCharPositionInLine();
      doReturn(115).when(charStream0).getLine();
      doReturn(54, 1347, 115).when(charStream0).LA(anyInt());
      doReturn(3209).when(charStream0).index();
      doReturn((-3608)).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(288, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(115, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer1);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer2 = new SQLLexer(charStream1, (RecognizerSharedState) null);
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertNotNull(sQLLexer2);
      
      try { 
        sQLLexer2.mPRIMARY();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.text = null;
      recognizerSharedState1.type = (-1);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState1.tokenStartCharIndex = 35;
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 3677).when(charStream0).LA(anyInt());
      doReturn(2004).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.lastErrorIndex = 1205;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(1205, recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "nextToken";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "nextToken";
      stringArray0[6] = "nextToken";
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      sQLLexer0.displayRecognitionError(stringArray0, recognitionException0);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(7, stringArray0.length);
      
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(37, SQLLexer.GT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(78).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(78, 0).when(charStream0).LA(anyInt());
      doReturn(181).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(78, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "nextToken";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "nextToken";
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(504).when(charStream0).getCharPositionInLine();
      doReturn(41).when(charStream0).getLine();
      doReturn(504, 99, 41, 504, 41).when(charStream0).LA(anyInt());
      doReturn(41).when(charStream0).index();
      doReturn(99).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(504, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(41, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mIDENTIFIER();
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(504, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(41, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      sQLLexer0.mTokens();
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(504, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(41, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__98();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1601)).when(charStream0).getCharPositionInLine();
      doReturn(223).when(charStream0).getLine();
      doReturn(807, 807, 13, 260, (-1843)).when(charStream0).LA(anyInt());
      doReturn(202, 107).when(charStream0).index();
      doReturn(107).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 6);
      Map<Integer, Integer>[] mapArray1 = recognizerSharedState0.ruleMemo;
      assertNull(mapArray1);
      
      mapArray0[0] = (Map<Integer, Integer>) null;
      mapArray0[1] = (Map<Integer, Integer>) null;
      recognizerSharedState0.text = "nextToken";
      mapArray0[2] = (Map<Integer, Integer>) null;
      mapArray0[3] = (Map<Integer, Integer>) null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      mapArray0[4] = (Map<Integer, Integer>) null;
      recognizerSharedState0.backtracking = 3106;
      sQLLexer0.mT__68();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(68, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      mapArray0[5] = (Map<Integer, Integer>) null;
      recognizerSharedState0.ruleMemo = mapArray0;
      sQLLexer0.mT__92();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(92, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__62();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(62, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(62, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(202, commonToken0.getStartIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1601), commonToken0.getCharPositionInLine());
      assertEquals(223, commonToken0.getLine());
      assertEquals(106, commonToken0.getStopIndex());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertNotNull(commonToken0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)92;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)83, (byte)13, (byte)2, (byte) (-86), (byte)43, (byte) (-46), (byte)92}, byteArray0);
      
      sQLLexer0.mT__110();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(110, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__73();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(73, recognizerSharedState0.type);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__99();
      assertEquals(99, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__132();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(132, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__64();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(64, recognizerSharedState0.type);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__81();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(81, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__130();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(130, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mT__137();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(137, recognizerSharedState0.type);
      assertEquals((-1601), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(223, recognizerSharedState0.tokenStartLine);
      assertEquals(202, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1601), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(223, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      recognizerSharedState0.type = 136;
      recognizerSharedState0.backtracking = 192;
      String[] stringArray0 = new String[2];
      sQLLexer0.mNVARCHAR2();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(192, recognizerSharedState0.backtracking);
      assertEquals(54, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(192, sQLLexer0.getBacktrackingLevel());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      assertNotNull(filterOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "nextToken", 10, 622);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 4;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.token = null;
      recognizerSharedState1._fsp = 2;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mLTGT();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(36, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mT__107();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(107, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      sQLLexer0.mT__118();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(118, recognizerSharedState1.type);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      sQLLexer0.mT__122();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(122, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mT__112();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(112, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      sQLLexer0.mT__75();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(2, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(4, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(75, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(4, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = null;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(103).when(charStream0).getCharPositionInLine();
      doReturn(103).when(charStream0).getLine();
      doReturn(103, (-3852), 2890, 103, 2890).when(charStream0).LA(anyInt());
      doReturn((-3852)).when(charStream0).index();
      doReturn(2890).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(103, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(103, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBARBAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_INDEX();
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertNotNull(recognizerSharedState2);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, 45, 0).when(charStream0).getCharPositionInLine();
      doReturn(45, (-1588), 0).when(charStream0).getLine();
      doReturn((-1588), 45, (-590), 107, 93).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn((-1588), 93, (-590), 0).when(charStream0).index();
      doReturn(1).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1588), commonToken0.getLine());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(93, commonToken0.getStopIndex());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      boolean boolean0 = linkedList0.add((Token) commonToken0);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, linkedList0.size());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1588), commonToken0.getLine());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(93, commonToken0.getStopIndex());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 0;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0._fsp = (-1);
      recognizerSharedState0.text = null;
      recognizerSharedState0.text = null;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState1._fsp = 35;
      recognizerSharedState1.syntaxErrors = 96;
      try { 
        sQLLexer0.mT__121();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(104, 104).when(charStream0).getCharPositionInLine();
      doReturn(104, 95).when(charStream0).getLine();
      doReturn(6, 95, (-1187), 0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(6, (-1187)).when(charStream0).index();
      doReturn(1022).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(104, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(104, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-2217);
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.text = null;
      recognizerSharedState1.errorRecovery = true;
      recognizerSharedState0._fsp = 411;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(411, recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertTrue(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Tb? C";
      stringArray0[1] = "nextToken";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "nextToken";
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string0 = sQLLexer0.getErrorMessage(recognitionException0, stringArray0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(411, recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertTrue(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      sQLLexer0.mALTER_TABLE();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(411, recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertTrue(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(41, SQLLexer.IS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__106();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, 99, 0).when(charStream0).getCharPositionInLine();
      doReturn(45, 228, 0).when(charStream0).getLine();
      doReturn((-1588), 45, 45, 45, 113).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn((-1588), 45, 228, 0).when(charStream0).index();
      doReturn(65535).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertFalse(sQLLexer0.failed());
      assertEquals(228, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals(228, commonToken0.getLine());
      assertEquals((-1), commonToken0.getType());
      assertEquals(99, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      boolean boolean0 = linkedList0.add((Token) commonToken0);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertFalse(sQLLexer0.failed());
      assertEquals(228, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1, linkedList0.size());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals(228, commonToken0.getLine());
      assertEquals((-1), commonToken0.getType());
      assertEquals(99, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getStopIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNULL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSTAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mAND();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState2);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_DETAILS();
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartLine = (-1);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.backtracking = 15;
      sQLLexer0.mXOR();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(33, recognizerSharedState0.type);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mT__106();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(106, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mT__79();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(79, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mT__65();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(65, recognizerSharedState0.type);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      recognizerSharedState0._fsp = 384;
      sQLLexer0.mPLUS();
      assertTrue(recognizerSharedState0.failed);
      assertEquals(384, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(45, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mT__104();
      assertTrue(recognizerSharedState0.failed);
      assertEquals(384, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(104, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertTrue(recognizerSharedState0.failed);
      assertEquals(384, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(104, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mEQ();
      assertTrue(recognizerSharedState0.failed);
      assertEquals(384, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(34, recognizerSharedState0.type);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mT__128();
      assertTrue(recognizerSharedState0.failed);
      assertEquals(384, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(128, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mCOMMENT_TABLE();
      assertTrue(recognizerSharedState0.failed);
      assertEquals(384, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(128, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(15, recognizerSharedState0.backtracking);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(15, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 286;
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_NAME();
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharStream charStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      recognizerSharedState1.text = "nextToken";
      // Undeclared exception!
      try { 
        sQLLexer1.mT__83();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, (-1588), 0).when(charStream0).getCharPositionInLine();
      doReturn(45, 940, 98).when(charStream0).getLine();
      doReturn((-1588), 45, 45, 82, 97).when(charStream0).LA(anyInt());
      doReturn("eF cD^=zssNX73Gau\"X", "eF cD^=zssNX73Gau\"X").when(charStream0).getSourceName();
      doReturn((-1588), 13, 940, 97).when(charStream0).index();
      doReturn((-3449)).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(98, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1588), commonToken0.getCharPositionInLine());
      assertEquals(13, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getType());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals(940, commonToken0.getLine());
      assertNotNull(commonToken0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = null;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(103, (-3852), 69, 439, 42).when(charStream0).LA(anyInt());
      doReturn(892).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mTokens();
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertNotSame(sQLLexer0, sQLLexer1);
      
      try { 
        sQLLexer1.mT__126();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      sQLLexer0.matchAny();
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nextToken";
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1625), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1625), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mSIZE();
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1625), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1625), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBANGEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mORA_CONFIGS();
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1943)).when(charStream0).getCharPositionInLine();
      doReturn(2519).when(charStream0).getLine();
      doReturn(588, (-2169)).when(charStream0).LA(anyInt());
      doReturn(79).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(2519, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals((-1943), sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__118();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(78).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(78, 0).when(charStream0).LA(anyInt());
      doReturn(162).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(78, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      recognizerSharedState0.following = recognizerSharedState1.following;
      int int0 = 95;
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__61();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(charStream0).getCharPositionInLine();
      doReturn(0, 0).when(charStream0).getLine();
      doReturn(0, 0, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(0, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{yRX$");
      assertFalse(boolean0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1581)).when(charStream0).getCharPositionInLine();
      doReturn(85).when(charStream0).getLine();
      doReturn(85, 85).when(charStream0).LA(anyInt());
      doReturn(173).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(37, SQLLexer.GT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(85, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1581), sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-589)).when(charStream0).getCharPositionInLine();
      doReturn((-589)).when(charStream0).getLine();
      doReturn((-589), 99).when(charStream0).LA(anyInt());
      doReturn((-589)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(37, SQLLexer.GT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-589), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-589), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(100, 100, 0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 96;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(96, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(96, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(96, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(96, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(96, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(96, sQLLexer0.getBacktrackingLevel());
      assertEquals(120, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mT__87();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(96, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(87, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(96, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(96, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(96, sQLLexer0.getBacktrackingLevel());
      assertEquals(120, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer1);
      
      sQLLexer0.mT__114();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(96, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(114, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(96, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(96, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(96, sQLLexer0.getBacktrackingLevel());
      assertEquals(120, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(sQLLexer0, sQLLexer1);
      
      sQLLexer0.mIN();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer0.equals((Object)sQLLexer1));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(96, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(43, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(96, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(96, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(96, sQLLexer0.getBacktrackingLevel());
      assertEquals(120, sQLLexer0.getCharPositionInLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(sQLLexer0, sQLLexer1);
      
      try { 
        sQLLexer1.mT__98();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45).when(charStream0).getCharPositionInLine();
      doReturn(45).when(charStream0).getLine();
      doReturn((-1588), 45, (-1588), 45).when(charStream0).LA(anyInt());
      doReturn((-1588), 84).when(charStream0).index();
      doReturn(84).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(46, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals(83, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals(45, commonToken0.getLine());
      assertNotNull(commonToken0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.add((Token) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.toStrings(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(63).when(charStream0).getCharPositionInLine();
      doReturn(63).when(charStream0).getLine();
      doReturn((-4657), 63).when(charStream0).LA(anyInt());
      doReturn(63).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(63, sQLLexer0.getLine());
      assertEquals(63, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      String[] stringArray0 = new String[0];
      String string0 = sQLLexer0.getErrorMessage(recognitionException0, stringArray0);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(63, sQLLexer0.getLine());
      assertEquals(63, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(439).when(charStream0).getCharPositionInLine();
      doReturn((-1345)).when(charStream0).getLine();
      doReturn((-655), 2999).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.errorRecovery = true;
      recognizerSharedState0.tokenStartLine = (-4657);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertTrue(recognizerSharedState0.errorRecovery);
      assertEquals((-4657), recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(439, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1345), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 286;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(286, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(286, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.following = recognizerSharedState1.following;
      recognizerSharedState1.ruleMemo = null;
      recognizerSharedState0.errorRecovery = false;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(286, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(286, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(37, SQLLexer.GT);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState1.ruleMemo = null;
      sQLLexer0.mCOMMENT_COLUMN();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(286, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(286, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(37, SQLLexer.GT);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      try { 
        sQLLexer0.mT__61();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 6);
      Map<Integer, Integer>[] mapArray1 = recognizerSharedState0.ruleMemo;
      assertNull(mapArray1);
      
      mapArray0[0] = (Map<Integer, Integer>) null;
      mapArray0[1] = (Map<Integer, Integer>) null;
      recognizerSharedState0.text = "nextToken";
      mapArray0[2] = (Map<Integer, Integer>) null;
      mapArray0[3] = (Map<Integer, Integer>) null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      mapArray0[4] = (Map<Integer, Integer>) null;
      recognizerSharedState0.backtracking = 3106;
      sQLLexer0.mT__68();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(68, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      mapArray0[5] = (Map<Integer, Integer>) null;
      recognizerSharedState0.ruleMemo = mapArray0;
      sQLLexer0.mT__92();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(92, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__62();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(62, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(62, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(62, commonToken0.getType());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertNotNull(commonToken0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)92;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)83, (byte)13, (byte)2, (byte) (-86), (byte)43, (byte) (-46), (byte)92}, byteArray0);
      
      sQLLexer0.mT__110();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(110, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__73();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(73, recognizerSharedState0.type);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__99();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(99, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__132();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(132, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__64();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(64, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__81();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(81, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__130();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(130, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      
      sQLLexer0.mT__137();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(137, recognizerSharedState0.type);
      assertEquals(3106, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3106, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 9;
      int int1 = 1221;
      int int2 = 87;
      int int3 = 1580;
      int int4 = (-1093);
      int int5 = (-3171);
      int int6 = 674;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__107();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(40, SQLLexer.LE);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mSIZE();
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(504, 106, 41, 504, 41).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mIDENTIFIER();
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      
      sQLLexer0.mTokens();
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_DETAILS();
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-589)).when(charStream0).getCharPositionInLine();
      doReturn((-589)).when(charStream0).getLine();
      doReturn((-589), 99).when(charStream0).LA(anyInt());
      doReturn((-589)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-589), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-589), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.skip();
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-589), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-589), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(4734).when(charStream0).getCharPositionInLine();
      doReturn(4734).when(charStream0).getLine();
      doReturn(4734, 239, (-41), (-41), 0).when(charStream0).LA(anyInt());
      doReturn((-41)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(4734, sQLLexer0.getLine());
      assertEquals(4734, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.mT__121();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = true;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertTrue(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.backtracking = (-1);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertTrue(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertTrue(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(91, SQLLexer.T__91);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), sQLLexer0.getBacktrackingLevel());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1129)).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(299, (-4113)).when(charStream0).LA(anyInt());
      doReturn((-1)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1129), sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(70).when(charStream0).getCharPositionInLine();
      doReturn(70).when(charStream0).getLine();
      doReturn(70, 70).when(charStream0).LA(anyInt());
      doReturn(72).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(70, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(70, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      int int0 = (-3726);
      int int1 = 0;
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(int0));
      
      BitSet bitSet0 = new BitSet(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(64, bitSet0.numBits());
      assertTrue(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(0, bitSet0.size());
      assertNotNull(bitSet0);
      assertFalse(linkedList0.contains(int0));
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, linkedList0.size());
      assertEquals(64, bitSet0.numBits());
      assertTrue(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.isNil());
      assertEquals(64, bitSet1.numBits());
      assertEquals(1, bitSet1.lengthInLongWords());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(linkedList0.contains(int0));
      
      BitSet bitSet2 = (BitSet)bitSet0.clone();
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertEquals(0, linkedList0.size());
      assertEquals(64, bitSet0.numBits());
      assertTrue(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(0, bitSet0.size());
      assertEquals(1, bitSet2.lengthInLongWords());
      assertTrue(bitSet2.isNil());
      assertEquals(64, bitSet2.numBits());
      assertEquals(0, bitSet2.size());
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
      assertFalse(linkedList0.contains(int0));
      
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(250).when(charStream0).getCharPositionInLine();
      doReturn(123).when(charStream0).getLine();
      doReturn(104, 104, 103, 123, 0).when(charStream0).LA(anyInt());
      doReturn(104).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(123, sQLLexer0.getLine());
      assertEquals(250, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(charStream0).getCharPositionInLine();
      doReturn(64).when(charStream0).getLine();
      doReturn(99, 73).when(charStream0).LA(anyInt());
      doReturn(2464).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(28, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(64, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CharStream charStream0 = null;
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_TABLE();
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartCharPositionInLine = 2135;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(2135, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINDEX_NAME();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(2135, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      recognizerSharedState0.type = 1;
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      sQLLexer0.mCOLUMN_NAME();
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(504, 106, 13, 504, 13).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mIDENTIFIER();
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mTokens();
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__118();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(31, SQLLexer.OR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(88).when(charStream0).getCharPositionInLine();
      doReturn((-1)).when(charStream0).getLine();
      doReturn(88, (-423), 0, 0).when(charStream0).LA(anyInt());
      doReturn((-423)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(88, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "nextToken";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "nextToken";
      stringArray0[6] = "nextToken";
      sQLLexer0.mWS();
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(88, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), sQLLexer0.getLine());
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__123();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2616).when(charStream0).getCharPositionInLine();
      doReturn(2616).when(charStream0).getLine();
      doReturn(2616, 2616).when(charStream0).LA(anyInt());
      doReturn((-529)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(2616, sQLLexer0.getCharPositionInLine());
      assertEquals(2616, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-312)).when(charStream0).getCharPositionInLine();
      doReturn(89).when(charStream0).getLine();
      doReturn(3416, (-3053), 73, (-312)).when(charStream0).LA(anyInt());
      doReturn(73).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-312), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(89, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mWS();
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-312), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(89, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CharStream charStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(37, SQLLexer.GT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2859).when(charStream0).getCharPositionInLine();
      doReturn(2755).when(charStream0).getLine();
      doReturn(13, 13, 13, 2755, 0).when(charStream0).LA(anyInt());
      doReturn(360).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2859, sQLLexer0.getCharPositionInLine());
      assertEquals(2755, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mWS();
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2859, sQLLexer0.getCharPositionInLine());
      assertEquals(2755, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(386, 583).when(charStream0).getCharPositionInLine();
      doReturn(583, 13).when(charStream0).getLine();
      doReturn(386, 13, 350, 350, 350).when(charStream0).LA(anyInt());
      doReturn(",", ",").when(charStream0).getSourceName();
      doReturn(13, 386).when(charStream0).index();
      doReturn(386).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(386, sQLLexer0.getCharPositionInLine());
      assertEquals(583, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(charStream0).getCharPositionInLine();
      doReturn(47).when(charStream0).getLine();
      doReturn(6, 541).when(charStream0).LA(anyInt());
      doReturn(541).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.text = null;
      recognizerSharedState1.errorRecovery = true;
      recognizerSharedState0._fsp = 411;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(411, recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertTrue(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(31, SQLLexer.OR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(32, SQLLexer.AND);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(47, sQLLexer0.getCharPositionInLine());
      assertEquals(47, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(40, SQLLexer.LE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__69();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(504, 106, 106, 106, 504).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(39, SQLLexer.LT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer1 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.mSLASH();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      sQLLexer0.mTABLE_DETAILS();
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      sQLLexer0.mCREATE_SEQUENCE();
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(43, SQLLexer.IN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__107();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(38, SQLLexer.GE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1499)).when(charStream0).getCharPositionInLine();
      doReturn((-1499)).when(charStream0).getLine();
      doReturn((-1499), (-1499)).when(charStream0).LA(anyInt());
      doReturn(2914).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1499), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1499), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer0.new DFA9(sQLLexer0);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertFalse(DFA.debug);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertNotNull(sQLLexer_DFA9_0);
      
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__119();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45).when(charStream0).getCharPositionInLine();
      doReturn(45).when(charStream0).getLine();
      doReturn(45, 45, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(181).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mSUB();
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      sQLLexer0.reportError(recognitionException0);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(443, 45).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 45;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(45, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(45, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(443, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mIS();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(41, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(45, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(45, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(45, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(443, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mT__76();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(45, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(76, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(45, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(45, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(443, sQLLexer0.getCharPositionInLine());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.lastErrorIndex = 1205;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(1205, recognizerSharedState1.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOLUMN_SPEC();
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(1205, recognizerSharedState1.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(213).when(charStream0).getCharPositionInLine();
      doReturn(213).when(charStream0).getLine();
      doReturn(349, 213).when(charStream0).LA(anyInt());
      doReturn(349).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(213, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(213, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__70();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.token = null;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.tokenStartLine = 79;
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(41, SQLLexer.IS);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2718, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(2718, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).index();
      // Undeclared exception!
      try { 
        sQLLexer0.memoize(intStream0, (-1), 1587);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(60, SQLLexer.WS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__104();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2217)).when(charStream0).getCharPositionInLine();
      doReturn((-2217)).when(charStream0).getLine();
      doReturn(656, 770).when(charStream0).LA(anyInt());
      doReturn(1901).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2217), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-2217), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.setText((String) null);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2217), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-2217), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(39, SQLLexer.LT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__118();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(31, SQLLexer.OR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__116();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, 45, 0).when(charStream0).getCharPositionInLine();
      doReturn(45, (-1588), 0).when(charStream0).getLine();
      doReturn((-1588), 45, (-1588), 45, (-1588)).when(charStream0).LA(anyInt());
      doReturn((-1588), 84, 84, 0, 0).when(charStream0).index();
      doReturn(84).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1588), commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(84, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      boolean boolean0 = linkedList0.add((Token) commonToken0);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1, linkedList0.size());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1588), commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(84, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertTrue(boolean0);
      
      CommonToken commonToken1 = (CommonToken)sQLLexer0.nextToken();
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(84, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getCharPositionInLine());
      assertEquals(46, commonToken1.getType());
      assertEquals((-1), commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertNotSame(commonToken1, commonToken0);
      assertNotNull(commonToken1);
      
      boolean boolean1 = linkedList0.add((Token) commonToken0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(2, linkedList0.size());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1588), commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(84, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertNotSame(commonToken0, commonToken1);
      assertTrue(boolean1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      boolean boolean2 = linkedList0.add((Token) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      List<String> list0 = sQLLexer1.toStrings((List<? extends Token>) null);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotSame(sQLLexer1, sQLLexer0);
      assertNull(list0);
      
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 3);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<Integer, Integer>) hashMap0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      mapArray0[1] = (Map<Integer, Integer>) hashMap1;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap1.put((Integer) 0, integer0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap0);
      assertNull(integer1);
      
      mapArray0[2] = (Map<Integer, Integer>) null;
      recognizerSharedState0.ruleMemo = mapArray0;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(31, SQLLexer.OR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45).when(charStream0).getCharPositionInLine();
      doReturn(45).when(charStream0).getLine();
      doReturn((-1588), 45, (-1588), 45).when(charStream0).LA(anyInt());
      doReturn((-1588), 84).when(charStream0).index();
      doReturn(84).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(45, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(5524, sQLLexer0.getCharPositionInLine());
      assertEquals((-1588), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(46, commonToken0.getType());
      assertEquals((-1588), commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(83, commonToken0.getStopIndex());
      assertEquals(45, commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.add((Token) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream1, recognizerSharedState0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer1.toStrings(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2718).when(charStream0).getCharPositionInLine();
      doReturn(2718).when(charStream0).getLine();
      doReturn(399, 1511).when(charStream0).LA(anyInt());
      doReturn(399).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2718, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(2718, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      sQLLexer0.mDROP_SEQUENCE();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2718, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(2718, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)45;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)94, (byte)3, (byte) (-124), (byte) (-28), (byte) (-1), (byte)41, (byte)45}, byteArray0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer1);
      
      sQLLexer1.mCOLUMN_SPEC();
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertNotSame(sQLLexer1, sQLLexer0);
      
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(91).when(charStream0).getCharPositionInLine();
      doReturn(91).when(charStream0).getLine();
      doReturn(91, 91).when(charStream0).LA(anyInt());
      doReturn(91).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(31, SQLLexer.OR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(91, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(charStream0).getCharPositionInLine();
      doReturn((-1)).when(charStream0).getLine();
      doReturn((-1), (-1)).when(charStream0).LA(anyInt());
      doReturn((-1)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      SQLLexer sQLLexer1 = new SQLLexer();
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2718).when(charStream0).getCharPositionInLine();
      doReturn(2718).when(charStream0).getLine();
      doReturn(399, 1511).when(charStream0).LA(anyInt());
      doReturn(399).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(2718, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2718, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = null;
      try { 
        sQLLexer0.mT__87();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.setBacktrackingLevel(97);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(97, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      
      sQLLexer0.mNAME_LIST();
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(97, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(78).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(78, 0).when(charStream0).LA(anyInt());
      doReturn(181).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(78, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(99).when(charStream0).getCharPositionInLine();
      doReturn(1950).when(charStream0).getLine();
      doReturn(90, 90).when(charStream0).LA(anyInt());
      doReturn(90).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(1950, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_NAME();
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(1950, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      
      sQLLexer0.mSIZE();
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(1950, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(38, SQLLexer.GE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(32, SQLLexer.AND);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Integer integer0 = new Integer(96);
      assertEquals(96, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-4448));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-4448), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = hashMap1.put(integer0, integer1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap0);
      assertNull(integer2);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(charStream0).getCharPositionInLine();
      doReturn((-1)).when(charStream0).getLine();
      doReturn(100, 100).when(charStream0).LA(anyInt());
      doReturn((-1)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(47, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1002).when(charStream0).getCharPositionInLine();
      doReturn(1002).when(charStream0).getLine();
      doReturn((-2), (-2)).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(1002, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1002, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "nextToken";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "nextToken";
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      String string0 = sQLLexer0.getErrorMessage(recognitionException0, stringArray0);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(1002, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1002, sQLLexer0.getLine());
      assertEquals(7, stringArray0.length);
      assertNull(string0);
      
      sQLLexer0.mDROP_TABLE();
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(1002, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1002, sQLLexer0.getLine());
      
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(45, 99, 1182).when(charStream0).getCharPositionInLine();
      doReturn(45, 228, 32).when(charStream0).getLine();
      doReturn((-1588), 45, 45, 45, 113).when(charStream0).LA(anyInt());
      doReturn("KN;U]:r&Bw(6", "S").when(charStream0).getSourceName();
      doReturn((-1588), 45, 228, 32).when(charStream0).index();
      doReturn(65535).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(45, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.getEOFToken();
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(32, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(1182, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(228, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getStopIndex());
      assertEquals(99, commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getType());
      assertNotNull(commonToken0);
      
      boolean boolean0 = linkedList0.add((Token) commonToken0);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(32, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(1182, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1, linkedList0.size());
      assertEquals(228, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(45, commonToken0.getStopIndex());
      assertEquals(99, commonToken0.getCharPositionInLine());
      assertEquals((-1588), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getType());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.tokenStartCharPositionInLine = (-1);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3257).when(charStream0).getCharPositionInLine();
      doReturn(3257).when(charStream0).getLine();
      doReturn(3257, 840).when(charStream0).LA(anyInt());
      doReturn((-210)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartCharPositionInLine = (-1941);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1941), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(3257, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(3257, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__119();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1453)).when(charStream0).getCharPositionInLine();
      doReturn((-1453)).when(charStream0).getLine();
      doReturn((-1453), 107).when(charStream0).LA(anyInt());
      doReturn(107).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1453), sQLLexer0.getCharPositionInLine());
      assertEquals((-1453), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mEQ();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn("^CLDi\"iAO$(8TF", (String) null).when(charStream0).getSourceName();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-796), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-796), sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "nextToken";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "nextToken";
      stringArray0[6] = "nextToken";
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      sQLLexer0.displayRecognitionError(stringArray0, recognitionException0);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-796), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-796), sQLLexer0.getCharPositionInLine());
      assertEquals(7, stringArray0.length);
      
      sQLLexer0.mVALUE_LIST();
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-796), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-796), sQLLexer0.getCharPositionInLine());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(5293).when(charStream0).getCharPositionInLine();
      doReturn(18).when(charStream0).getLine();
      doReturn(45, 0).when(charStream0).LA(anyInt());
      doReturn((-2329)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = null;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(18, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(5293, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_DETAILS();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__119();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(43, SQLLexer.IN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(41, SQLLexer.IS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__96();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 286;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(286, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(286, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.following = recognizerSharedState1.following;
      recognizerSharedState1.ruleMemo = null;
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPRIMARY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDEFAULT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      int int0 = 3015;
      int int1 = 1;
      recognizerSharedState1.tokenStartLine = 65;
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(37, SQLLexer.GT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      sQLLexer0.setCharStream(charStream0);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(37, SQLLexer.GT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(504, 106, 504, 4, (-3739)).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSUB();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.traceOut((String) null, (-1866), (Object) null);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(charStream0).getCharPositionInLine();
      doReturn(3).when(charStream0).getLine();
      doReturn(3, 3).when(charStream0).LA(anyInt());
      doReturn(3).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(3, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_TABLE();
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(3, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      RecognitionException recognitionException1 = (RecognitionException)recognitionException0.fillInStackTrace();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertSame(recognitionException0, recognitionException1);
      assertSame(recognitionException1, recognitionException0);
      assertNotNull(recognitionException1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      CharStream charStream2 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream2).getCharPositionInLine();
      doReturn(0).when(charStream2).getLine();
      doReturn(0, 0).when(charStream2).LA(anyInt());
      doReturn(0).when(charStream2).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.syntaxErrors = 80;
      recognizerSharedState0.channel = 64;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(80, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(64, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(80, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_SEQUENCE();
      assertEquals(80, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(64, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(80, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(513).when(charStream0).getLine();
      doReturn(4, (-4657), 0, 0).when(charStream0).LA(anyInt());
      doReturn(513).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(513, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(91, SQLLexer.T__91);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(113, SQLLexer.T__113);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mDEFAULT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-324)).when(charStream0).getCharPositionInLine();
      doReturn(2416).when(charStream0).getLine();
      doReturn((-1917), 495).when(charStream0).LA(anyInt());
      doReturn((-324)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.text = null;
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream1);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINVOCATION();
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      
      recognizerSharedState1.type = (-1);
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals((-324), sQLLexer1.getCharPositionInLine());
      assertEquals(2416, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertNotNull(sQLLexer1);
      
      recognizerSharedState1.tokenStartCharIndex = 35;
      try { 
        sQLLexer1.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(102, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(112, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer1);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(49).when(intStream0).LA(anyInt());
      doReturn(12).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertEquals(49, recognitionException0.c);
      assertEquals(12, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      CharStream charStream2 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream2).getCharPositionInLine();
      doReturn(0).when(charStream2).getLine();
      doReturn(0, 0).when(charStream2).LA(anyInt());
      doReturn(0).when(charStream2).index();
      SQLLexer sQLLexer2 = new SQLLexer(charStream2, recognizerSharedState0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer1));
      assertFalse(sQLLexer2.equals((Object)sQLLexer0));
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, sQLLexer2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer2.getBacktrackingLevel());
      assertEquals(0, sQLLexer2.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer2.failed());
      assertEquals(0, sQLLexer2.getCharPositionInLine());
      assertEquals(0, sQLLexer2.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer2.getGrammarFileName());
      assertNotNull(sQLLexer2);
      
      try { 
        sQLLexer2.mT__98();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      sQLLexer0.skip();
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(386, 0).when(charStream0).getCharPositionInLine();
      doReturn(583, 0).when(charStream0).getLine();
      doReturn(386, 13, 350, 350, 0).when(charStream0).LA(anyInt());
      doReturn((String) null).when(charStream0).getSourceName();
      doReturn(13, 0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(386, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(583, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.syntaxErrors = (-1);
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2718).when(charStream0).getCharPositionInLine();
      doReturn(2718).when(charStream0).getLine();
      doReturn(399, 1511).when(charStream0).LA(anyInt());
      doReturn(399).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2718, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(2718, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__87();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer1 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(31, SQLLexer.OR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer1.mT__124();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream0);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer1.getLine());
      assertFalse(sQLLexer1.failed());
      assertNotNull(sQLLexer1);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 3358;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(3358, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(3358, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      String string0 = sQLLexer0.getGrammarFileName();
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(72, SQLLexer.T__72);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSUB();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(37, SQLLexer.GT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      String string0 = sQLLexer0.getGrammarFileName();
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      String string0 = recognitionException0.getLocalizedMessage();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertNull(string0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(27).when(charStream0).getLine();
      doReturn(0, (-4657)).when(charStream0).LA(anyInt());
      doReturn(27).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(27, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "nextToken";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "nextToken";
      String string0 = sQLLexer0.getErrorMessage(recognitionException0, stringArray0);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.errorRecovery = false;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(41, SQLLexer.IS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(32, SQLLexer.AND);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPRIMARY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(106).when(charStream0).getCharPositionInLine();
      doReturn(185).when(charStream0).getLine();
      doReturn(504, 106, 106, 504, 504).when(charStream0).LA(anyInt());
      doReturn(106).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(185, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(106, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSTAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      IntStream intStream1 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      IntStream intStream2 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".!F:^D-b(lEE]");
      assertFalse(boolean0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(39, SQLLexer.LT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__104();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = 9;
      int int1 = 1221;
      int int2 = 87;
      int int3 = 1580;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = null;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(103).when(charStream0).getCharPositionInLine();
      doReturn(103).when(charStream0).getLine();
      doReturn(103, (-3852), 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn((-3852)).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(103, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(103, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer1 = new SQLLexer(charStream1);
      assertFalse(sQLLexer1.equals((Object)sQLLexer0));
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(0, sQLLexer1.getCharPositionInLine());
      assertEquals(0, sQLLexer1.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer1.failed());
      assertEquals(0, sQLLexer1.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer1.getGrammarFileName());
      assertEquals(0, sQLLexer1.getBacktrackingLevel());
      assertEquals(0, sQLLexer1.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer1);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2217)).when(charStream0).getCharPositionInLine();
      doReturn(1561).when(charStream0).getLine();
      doReturn(638, 770).when(charStream0).LA(anyInt());
      doReturn(1901).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.tokenStartCharPositionInLine = (-1);
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-2217), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(1561, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 286;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(286, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(286, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.following = recognizerSharedState1.following;
      recognizerSharedState1.ruleMemo = null;
      recognizerSharedState0.errorRecovery = false;
      CharStream charStream1 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream1).getCharPositionInLine();
      doReturn(0).when(charStream1).getLine();
      doReturn(0, 0).when(charStream1).LA(anyInt());
      doReturn(0).when(charStream1).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream1, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(286, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(286, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(32, SQLLexer.AND);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }
}
