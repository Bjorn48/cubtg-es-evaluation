/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:17:25 GMT 2019
 */

package org.sat4j.minisat.constraints.xor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Xor_ESTest extends Xor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, true, (ILits) null);
      xor0.calcReason((-1234), iVecInt0);
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-12));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(iVecInt0, false, iLits0);
      int int0 = xor0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(21, 21);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(vecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(iVecInt0, true, lits0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(iVecInt0, false, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.calcReason(2, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(24, 3837);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.calcReason(3837, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3837
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      Xor xor0 = null;
      try {
        xor0 = new Xor((IVecInt) null, false, lits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      Xor xor0 = null;
      try {
        xor0 = new Xor(iVecInt0, false, lits0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(716);
      Lits lits0 = new Lits();
      Xor xor0 = null;
      try {
        xor0 = new Xor(vecInt0, false, lits0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Lits lits0 = new Lits();
      lits0.satisfies(3);
      Xor xor0 = new Xor(vecInt0, false, lits0);
      xor0.calcReason(3, vecInt0);
      assertEquals(5, vecInt0.size());
      assertEquals(3, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      xor0.calcReason((-1), vecInt0);
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.calcReason(3, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(32, 32);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      lits0.satisfies(32);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 2);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, (-2138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.getActivity();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(vecInt0, false, iLits0);
      boolean boolean0 = xor0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(2911);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, (-1684.1236179351838), 0.0, 2911);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 3690);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, miniSATRestarts0, iLogAble0);
      ILits iLits0 = solver0.getVocabulary();
      Xor xor0 = new Xor(vecInt0, false, iLits0);
      int int0 = xor0.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.calcReasonOnTheFly(20, vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      boolean boolean0 = xor0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, false, (ILits) null);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("restarting ");
      // Undeclared exception!
      try { 
        xor0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.requiredNumberOfSatisfiedLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.forwardActivity(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.incActivity(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, true, (ILits) null);
      Constr constr0 = xor0.toConstraint();
      assertFalse(constr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.get((-181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -181
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.setActivity(6087.172976589191);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint((IVecInt) null, false, lits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      boolean boolean0 = xor0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, false, (ILits) null);
      boolean boolean0 = xor0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(iVecInt0, true, lits0);
      // Undeclared exception!
      try { 
        xor0.rescaleBy(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      // Undeclared exception!
      try { 
        xor0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, true, lits0);
      // Undeclared exception!
      try { 
        xor0.getAssertionLevel(vecInt0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(2911);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, (-1684.1236179351838), 0.0, 2911);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 3690);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, miniSATRestarts0, iLogAble0);
      ILits iLits0 = solver0.getVocabulary();
      Xor xor0 = new Xor(vecInt0, false, iLits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        xor0.propagatePI(watcherBasedPrimeImplicantStrategy0, 309);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }
}
