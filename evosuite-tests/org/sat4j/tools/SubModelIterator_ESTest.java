/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:23:12 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubModelIterator_ESTest extends SubModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[2] = 1;
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn(unitClause0).when(gateTranslator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(unitClause0).when(gateTranslator0).discardCurrentModel();
      doReturn(false).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(gateTranslator0).model();
      doReturn(intArray0).when(gateTranslator0).modelWithInternalVariables();
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0, vecInt0, solutionFoundListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsOutputSolver0, iVecInt0, 1L);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(gateTranslator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(gateTranslator0).discardCurrentModel();
      doReturn(false).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(gateTranslator0).model();
      doReturn(intArray0).when(gateTranslator0).modelWithInternalVariables();
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0, (EncodingStrategyAdapter) null);
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0, vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-3735));
      int[] intArray0 = new int[9];
      intArray0[1] = (-3735);
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn(unitClause0).when(gateTranslator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) null).when(gateTranslator0).model();
      doReturn((Object) intArray0, (Object) null).when(gateTranslator0).modelWithInternalVariables();
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0, vecInt0, solutionFoundListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator((ISolver) null, (IVecInt) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-3735));
      int[] intArray0 = new int[4];
      intArray0[1] = (-3735);
      intArray0[2] = 1;
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn(unitClause0, unitClause0).when(gateTranslator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(unitClause0).when(gateTranslator0).discardCurrentModel();
      doReturn(false).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(gateTranslator0).model();
      doReturn(intArray0).when(gateTranslator0).modelWithInternalVariables();
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0, vecInt0, solutionFoundListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[4];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0, vecInt0, solutionFoundListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }
}
