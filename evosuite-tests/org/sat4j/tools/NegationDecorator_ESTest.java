/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:00:36 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NegationDecorator_ESTest extends NegationDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      doReturn(false, false).when(manyCore0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(0, 2);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator1 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      boolean boolean0 = negationDecorator1.isSatisfiable((IVecInt) vecInt0, true);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(learntBinaryClause0).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      doReturn(true, false).when(manyCore0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator1 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      negationDecorator1.isSatisfiable((IVecInt) vecInt0, true);
      assertEquals(9, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, randomWalkDecorator0, lubyRestarts0);
      NegationDecorator<Solver<MixedDataStructureSingleWL>> negationDecorator0 = new NegationDecorator<Solver<MixedDataStructureSingleWL>>(solver0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(iVecInt0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, iVecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4InclusionModel0, true);
      minimal4InclusionModel0.setDecorated(maxSatDecorator0);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(iVecInt0, true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>((MaxSatDecorator) null);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) vecInt0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, iVecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4InclusionModel0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(iVecInt0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ConstrGroup cannot be cast to org.sat4j.specs.Constr
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      NegationDecorator<MinOneDecorator> negationDecorator1 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(3756);
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(gateTranslator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(singleSolutionDetector0);
      VecInt vecInt0 = new VecInt(3756, 3756);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(manyCore0).nextFreeVarId(anyBoolean());
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      negationDecorator1.addClause(iVecInt0);
      // Undeclared exception!
      try { 
        negationDecorator1.isSatisfiable(iVecInt0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 57, 57).when(manyCore0).nextFreeVarId(anyBoolean());
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.isSatisfiable(iVecInt0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtLeast((IVecInt) null, 2310);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>((Minimal4CardinalityModel) null);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtMost((IVecInt) null, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      NegationDecorator<LexicoDecorator<MaxSatDecorator>> negationDecorator0 = new NegationDecorator<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.addExactly((IVecInt) null, 650);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ManyCore<MinOneDecorator> manyCore0 = (ManyCore<MinOneDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      Collection<Integer> collection0 = negationDecorator0.getAddedVars();
      assertNotNull(collection0);
  }
}
