/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:33:21 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.AgeLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AgeLCDS_ESTest extends AgeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(128);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(128);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, (RestartStrategy) null, iLogAble0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver1, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, glucose21Restarts0);
      // Undeclared exception!
      try { 
        ageLCDS0.reduce((IVec<Constr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.AgeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      solver0.verbose = true;
      ReadOnlyVec<Constr> readOnlyVec0 = new ReadOnlyVec<Constr>((IVec<Constr>) null);
      ageLCDS0.reduce(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      clauseOnlyLearning0.learns(learntWLClause0);
      ReadOnlyVec<Constr> readOnlyVec0 = new ReadOnlyVec<Constr>((IVec<Constr>) null);
      ageLCDS0.reduce(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      clauseOnlyLearning0.learns(learntWLClause0);
      Vec<Constr> vec0 = new Vec<Constr>();
      mixedDataStructureSingleWL0.learnConstraint(learntWLClause0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, arminRestarts0);
      // Undeclared exception!
      try { 
        ageLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, noRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, noRestarts0);
      NoRestarts noRestarts1 = (NoRestarts)ageLCDS0.getTimer();
      assertFalse(noRestarts1.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ASolverFactory<Solver<MixedDataStructureDanielWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWL>>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, miniSATRestarts0, basicLauncher0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, miniSATRestarts0);
      UnitClause unitClause0 = new UnitClause(1866);
      ageLCDS0.onPropagation(unitClause0);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, glucose21Restarts0);
      ageLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, eMARestarts0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(57);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, vecInt0, true, 57);
      ageLCDS0.onClauseLearning(maxWatchCard0);
      assertFalse(maxWatchCard0.learnt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      String string0 = ageLCDS0.toString();
      assertEquals("Age based learned constraints deletion strategy with timer luby style (SATZ_rand, TiniSAT) restarts strategy with factor 32", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, mUSLauncher0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      ageLCDS0.onConflictAnalysis((Constr) null);
  }
}
