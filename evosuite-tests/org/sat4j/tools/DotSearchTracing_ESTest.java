/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:56:45 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.RandomAccessModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DotSearchTracing_ESTest extends DotSearchTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("");
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      VecInt vecInt0 = new VecInt(0);
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredCardinalityConstraint(vecInt0, 0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound((IConstr) constr0, (-2111148283), 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("JHN|eI]@1P");
      dotSearchTracing0.adding(10);
      dotSearchTracing0.propagating((-1717));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("L7B0$");
      dotSearchTracing0.propagating(115);
      dotSearchTracing0.assuming((-2111752847));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("<jM]%9uzK^\"2r/");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer0);
      dotSearchTracing0.setMapping(hashMap0);
      dotSearchTracing0.propagating(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("<jM\"]%9uzK\"2r/");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      dotSearchTracing0.setMapping(hashMap0);
      dotSearchTracing0.propagating(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("CP+`9]#");
      dotSearchTracing0.conflictFound(16384);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("org.sat4j.tools.EmptySolver");
      int[] intArray0 = new int[2];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(statisticsSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      dotSearchTracing0.solutionFound(intArray0, optToSatAdapter0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("JP");
      UnitClause unitClause0 = new UnitClause(624);
      dotSearchTracing0.learn(unitClause0);
      assertEquals(1, unitClause0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("org.sat4j.minisat.constraints.cnf.OriginalHTClause");
      UnitClause unitClause0 = new UnitClause((-1));
      dotSearchTracing0.enqueueing((-1), unitClause0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>(".reason");
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.learn(binaryClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("%d %d %d %d %d %d %d %d %d%n");
      dotSearchTracing0.start();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("/2fw\"o9d=x(#");
      dotSearchTracing0.propagating(3832);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("&9~ZqC9c}GW\"");
      dotSearchTracing0.assuming((-3846));
      dotSearchTracing0.assuming(45);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("org.sat4j.tools.LearnedClauseSizeTracing");
      String string0 = dotSearchTracing0.map((-1615));
      assertEquals("-1615", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("\"");
      HashMap<Integer, Solver<MixedDataStructureSingleWL>> hashMap0 = new HashMap<Integer, Solver<MixedDataStructureSingleWL>>();
      dotSearchTracing0.setMapping(hashMap0);
      String string0 = dotSearchTracing0.map((-2120328362));
      assertEquals("-2120328362", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("\t\"null\" -- \"null.-1989.false\"[label=\" -1989\", fontcolor =green, color = green, style= bold]");
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>((-2107042728));
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      UnitClauses unitClauses0 = new UnitClauses(iVecInt0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.enqueueing((-2107042728), unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("%vSIlE^N");
      dotSearchTracing0.enqueueing((-2125137709), (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("requires at leasw 2 literals");
      dotSearchTracing0.assuming((-2125137709));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("\"[label=\"\", color=orange, style=dotted]");
      dotSearchTracing0.conflictFound(20);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DotSearchTracing<Solver<MixedDataStructureSingleWL>> dotSearchTracing0 = new DotSearchTracing<Solver<MixedDataStructureSingleWL>>("Number of update (reduction) of LBD\t: ");
      VecInt vecInt0 = new VecInt();
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound((IConstr) unitClauses0, 558, 558);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("{oQ");
      Lbool lbool0 = Lbool.FALSE;
      dotSearchTracing0.end(lbool0);
      dotSearchTracing0.start();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      dotSearchTracing0.delete((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("<jM]%9uzK^\"2r/");
      // Undeclared exception!
      try { 
        dotSearchTracing0.backtracking((-2113451570));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("Mez &og|~]");
      dotSearchTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("BNOuKPG");
      dotSearchTracing0.solutionFound((int[]) null, (RandomAccessModel) null);
  }
}
