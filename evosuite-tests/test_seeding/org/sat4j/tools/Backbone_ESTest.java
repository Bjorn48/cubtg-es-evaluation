/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:00:25 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.Backbone;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.IBackboneProgressListener;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Backbone_ESTest extends Backbone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1380).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray1 = new int[2];
      intArray1[0] = 1380;
      backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = (-1203);
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, (IVecInt) null, 2343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 149;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      IVecInt iVecInt0 = VecInt.EMPTY;
      backbone0.compute((ISolver) modelIteratorToSATAdapter0, iVecInt0, iVecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int int0 = backbone0.getNumberOfSatCalls();
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1380).when(modelIteratorToSATAdapter0).nVars();
      doReturn(true).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      VecInt vecInt0 = new VecInt(1380);
      int[] intArray1 = new int[2];
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1, (IVecInt) vecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      IVecInt iVecInt0 = VecInt.EMPTY;
      backbone0.compute((ISolver) modelIteratorToSATAdapter0, iVecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      UnitClause unitClause0 = new UnitClause(0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true, false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(unitClause0).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      doReturn(true).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      backbone0.compute((ISolver) modelIteratorToSATAdapter0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt(0);
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[1];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[1];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((-2020)).when(modelIteratorToSATAdapter1).nVars();
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = new LexicoDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter1);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) optToSatAdapter0, intArray0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -2020
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[3];
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, intArray0, (IVecInt) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1958).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Backbone backbone0 = Backbone.instance();
      Backbone backbone1 = Backbone.ibb();
      IVecInt iVecInt0 = backbone1.compute((ISolver) modelIteratorToSATAdapter0, intArray0);
      iVecInt0.shrinkTo(902);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, (RestartStrategy) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 5530;
      intArray0[1] = 73;
      intArray0[2] = 5530;
      intArray0[3] = 5530;
      intArray0[4] = 5530;
      intArray0[5] = 5530;
      intArray0[6] = 5530;
      // Undeclared exception!
      backbone0.compute((ISolver) solver0, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[8];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) statisticsSolver0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      Backbone backbone0 = Backbone.instance();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      int[] intArray0 = new int[1];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((-342)).when(iSolver0).nVars();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -342
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, (int[]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(587);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax0).getVocabulary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, (RestartStrategy) null);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Backbone backbone0 = Backbone.instance();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, iVecInt0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, iVecInt0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      int[] intArray0 = new int[6];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((-3215)).when(modelIteratorToSATAdapter0).nVars();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -3215
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(false, true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1958).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      VecInt vecInt0 = new VecInt(1958);
      Backbone backbone0 = Backbone.ibb();
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0);
      iVecInt0.shrinkTo(1876);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, (IVecInt) vecInt0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Backbone backbone0 = Backbone.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      try { 
        backbone0.compute((ISolver) dimacsOutputSolver0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, (IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true, false, true, true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1380, 0, 1380, (-3408)).when(modelIteratorToSATAdapter0).nVars();
      doReturn(true, false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      VecInt vecInt0 = new VecInt(1380);
      int[] intArray1 = new int[2];
      backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1);
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1, (IVecInt) vecInt0);
      backbone0.compute((ISolver) modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -3408
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      try { 
        backbone0.compute((ISolver) statisticsSolver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((-110)).when(modelIteratorToSATAdapter0).nVars();
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = new LexicoDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) optToSatAdapter0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).model();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(0, 0).when(modelIteratorToSATAdapter0).nVars();
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = new LexicoDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) optToSatAdapter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "LIcA6!!X";
      stringArray0[1] = "V=}E\"s5C}d$6uLeV}|g";
      stringArray0[2] = "unsat subformula: ";
      stringArray0[3] = "!\"\niQ8HBA<pI,E{j>F";
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[7];
      int[] intArray0 = new int[8];
      intArray0[0] = 149;
      intArray0[1] = 45;
      intArray0[2] = (-691);
      intArray0[3] = 1964;
      intArray0[4] = 4465;
      intArray0[5] = (-1203);
      intArray0[6] = (-3431);
      intArray0[7] = 1501;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true, false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0);
      assertEquals(8, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true, false, false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1380, 0).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false, false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      VecInt vecInt0 = new VecInt(1380);
      int[] intArray1 = new int[2];
      backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1);
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1, (IVecInt) vecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      Backbone backbone0 = Backbone.ibb();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, (IVecInt) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[3];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(modelIteratorToSATAdapter0).nVars();
      int[] intArray1 = new int[1];
      intArray1[0] = (-978);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[6];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(false, true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1981).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Backbone backbone0 = Backbone.ibb();
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, iVecInt0, iVecInt0);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[7];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(false, true, true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 1929, 1929).when(modelIteratorToSATAdapter0).nVars();
      doReturn(true, true).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      VecInt vecInt0 = new VecInt(1929, 1929);
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0);
      backbone0.compute((ISolver) modelIteratorToSATAdapter0, (IVecInt) vecInt0, iVecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[1];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIteratorToSATAdapter0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(modelIteratorToSATAdapter1).nVars();
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = new LexicoDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter1);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      backbone0.compute((ISolver) optToSatAdapter0, intArray0, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int[] intArray0 = new int[1];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).primeImplicant();
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, iVecInt0, iVecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Backbone backbone0 = Backbone.instance((IBackboneProgressListener) null, false);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }
}
