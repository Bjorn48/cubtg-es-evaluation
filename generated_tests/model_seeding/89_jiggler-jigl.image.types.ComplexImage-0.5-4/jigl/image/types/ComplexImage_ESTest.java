/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 12:31:26 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.ImageProducer;
import java.awt.image.IndexColorModel;
import java.awt.image.RescaleOp;
import java.util.HashMap;
import javax.swing.JLayeredPane;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      complexImage0.real = realGrayImage0;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, complexImage0.real.X());
      assertEquals(0, complexImage0.real.Y());
      assertEquals(0.0F, complexImage0.real.absSum(), 0.01F);
      assertEquals((-32768.0F), complexImage0.real.max(), 0.01F);
      assertEquals(32767.0F, complexImage0.real.min(), 0.01F);
      assertEquals(0.0F, complexImage0.real.addSum(), 0.01F);
      assertEquals(0.0, complexImage0.real.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(751, 289);
      assertEquals(289, complexImage1.Y());
      assertEquals(751, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.divide(572.7266F, (float) (-1));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      ComplexImage complexImage3 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage3.X());
      assertEquals(2030, complexImage3.Y());
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      
      int int0 = complexImage3.Y();
      assertEquals(2030, int0);
      assertEquals(2030, complexImage3.X());
      assertEquals(2030, complexImage3.Y());
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        complexImage3.getReal((-1), 2030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      int int0 = 1489;
      ComplexImage complexImage2 = new ComplexImage(1489, 1489);
      assertEquals(1489, complexImage2.Y());
      assertEquals(1489, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage2.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(95, 2204, (float) 2204, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
      
      complexImage0.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      complexImage0.divide(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex((-1946.2047470588052), (-1946.2047470588052));
      assertEquals((-1946.2047119140625), complex0.real(), 0.01);
      assertEquals((byte) (-64), complex0.byteValue());
      assertEquals(2752L, complex0.longValue());
      assertEquals((-1946.2047119140625), complex0.imaginary(), 0.01);
      assertEquals((short)2752, complex0.shortValue());
      assertEquals(2752.3490875977195, complex0.doubleValue(), 0.01);
      assertEquals((-1946.2047119140625), complex0.imag(), 0.01);
      assertEquals(2752.3490875977195, complex0.magnitude(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals(2752, complex0.intValue());
      assertEquals(2752.349F, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1482, 1498, 189, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(1482, rOI0.lx());
      assertEquals(1294, rOI0.X());
      assertEquals(1498, rOI0.ly());
      assertEquals(189, rOI0.ux());
      assertEquals(1498, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(1490, 1490, 1475, (-2066));
      assertEquals(1475, rOI0.ux());
      assertEquals((-2066), rOI0.uy());
      assertEquals(1490, rOI0.lx());
      assertEquals(1490, rOI0.ly());
      assertEquals(3557, rOI0.Y());
      assertEquals(16, rOI0.X());
      
      rOI0.setROI(1491, (-2066), 1490, (-1981));
      assertEquals(1490, rOI0.ux());
      assertEquals((-1981), rOI0.ly());
      assertEquals((-2066), rOI0.uy());
      assertEquals(1491, rOI0.lx());
      assertEquals(86, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        complexImage1.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 586;
      int int1 = 23;
      ComplexImage complexImage0 = new ComplexImage(23, 1300);
      assertEquals(23, complexImage0.X());
      assertEquals(1300, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1271, 1271, (float) 1300, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNull(realGrayImage0);
      
      complexImage1.setImag((RealGrayImage) null);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-2974), (-2974), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, 3851.4888F);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1474, (-1702), (float) 1474, (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      
      complexImage0.divide((ComplexImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex(0, (-3817.25F));
      assertEquals(3817L, complex0.longValue());
      assertEquals(3817.25F, complex0.floatValue(), 0.01F);
      assertEquals(3817.2500573056514, complex0.doubleValue(), 0.01);
      assertEquals((short)3817, complex0.shortValue());
      assertEquals(3817.2500573056514, complex0.magnitude(), 0.01);
      assertEquals((-3817.25), complex0.imag(), 0.01);
      assertEquals((-3817.25), complex0.imaginary(), 0.01);
      assertEquals(3817, complex0.intValue());
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte) (-23), complex0.byteValue());
      assertNotNull(complex0);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3817L, complex0.longValue());
      assertEquals(3817.25F, complex0.floatValue(), 0.01F);
      assertEquals(3817.2500573056514, complex0.doubleValue(), 0.01);
      assertEquals((short)3817, complex0.shortValue());
      assertEquals(3817.2500573056514, complex0.magnitude(), 0.01);
      assertEquals((-3817.25), complex0.imag(), 0.01);
      assertEquals((-3817.25), complex0.imaginary(), 0.01);
      assertEquals(3817, complex0.intValue());
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte) (-23), complex0.byteValue());
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage0.add(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(complexImage0, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 16;
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, (float) 0, (float) 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI(910, 910, (-1), 910);
      assertEquals((-1), rOI0.ux());
      assertEquals(910, rOI0.uy());
      assertEquals(910, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(910, rOI0.ly());
      assertEquals(912, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI((-900), 0, (-900), 255);
      assertEquals(0, rOI0.uy());
      assertEquals((-900), rOI0.ux());
      assertEquals(256, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.ly());
      assertEquals((-900), rOI0.lx());
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 0, (-1075.63F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage2.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = (-1);
      int int1 = 3398;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(3398, 3398, (float) 3398, (float) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(686, 686, 274, 274);
      assertEquals(413, rOI0.X());
      assertEquals(274, rOI0.ux());
      assertEquals(413, rOI0.Y());
      assertEquals(274, rOI0.uy());
      assertEquals(686, rOI0.lx());
      assertEquals(686, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = 2030;
      // Undeclared exception!
      try { 
        complexImage0.clear((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, (float) 0, (float) 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI(910, 910, (-1), 910);
      assertEquals((-1), rOI0.ux());
      assertEquals(910, rOI0.uy());
      assertEquals(912, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(910, rOI0.ly());
      assertEquals(910, rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage2 = complexImage0.addbuffer(2047, 0, 0, 0, 1009.3F, (float) 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(2047, complexImage2.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage0 = complexImage1.imaginary();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(realGrayImage0);
      
      complexImage1.real = realGrayImage0;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, complexImage1.real.X());
      assertEquals(0, complexImage1.real.Y());
      assertEquals(0.0F, complexImage1.real.absSum(), 0.01F);
      assertEquals((-32768.0F), complexImage1.real.max(), 0.01F);
      assertEquals(32767.0F, complexImage1.real.min(), 0.01F);
      assertEquals(0.0F, complexImage1.real.addSum(), 0.01F);
      assertEquals(0.0, complexImage1.real.sqrSum(), 0.01);
      
      rOI0.setROI((-900), 0, (-900), 255);
      assertEquals(0, rOI0.uy());
      assertEquals((-900), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.ly());
      assertEquals((-900), rOI0.lx());
      assertEquals(256, rOI0.Y());
      
      ComplexImage complexImage3 = complexImage1.multiply((float) 0, (-1075.63F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(255, (-1), (float) 0, (-2052.3025F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(3982.8F, 3982.8F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      int int0 = 363;
      int int1 = 255;
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.get(255, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(0, 16, (-2141), 16);
      assertEquals(2142, rOI0.X());
      assertEquals((-2141), rOI0.ux());
      assertEquals(16, rOI0.uy());
      assertEquals(16, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 1509);
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1509, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotNull(complex0);
      
      // Undeclared exception!
      complexImage0.getMagnitudeImage();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, (float) 0, (float) 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 527, 0.0F, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 527
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complex0);
      
      complexImage1.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = 0;
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.add(0, 0, (float) 0, (-3817.25F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = (-1293);
      ROI rOI0 = new ROI(3264, (-1293), 1506, 1518);
      assertEquals(1518, rOI0.ly());
      assertEquals(2812, rOI0.Y());
      assertEquals(1506, rOI0.ux());
      assertEquals(1759, rOI0.X());
      assertEquals(3264, rOI0.lx());
      assertEquals((-1293), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1293), 1506, (float) (-1293), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = (-1293);
      int int1 = 1506;
      int int2 = 1518;
      ROI rOI0 = new ROI(3264, (-1293), 1506, 1518);
      assertEquals(1518, rOI0.ly());
      assertEquals(2812, rOI0.Y());
      assertEquals(3264, rOI0.lx());
      assertEquals(1506, rOI0.ux());
      assertEquals(1759, rOI0.X());
      assertEquals((-1293), rOI0.uy());
      assertNotNull(rOI0);
      
      int int3 = (-1852);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1486, 1054);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(3264, 1300);
      assertEquals(3264, complexImage1.X());
      assertEquals(1300, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.divide(0.0F, (float) 3264);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = (-20);
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.add((float) (-20), (float) 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertNotNull(imageProducer0);
      
      int int1 = 4;
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 4, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1514.1F, 1514.1F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 1;
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 2073;
      int int1 = 0;
      ROI rOI0 = new ROI(1852, 0, 0, (-1992));
      assertEquals(1993, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1853, rOI0.X());
      assertEquals(1852, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1992), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 1852, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = null;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) (-1293), (float) (-1293));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      int int0 = complexImage1.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setImaginary((-1293), (-1), (-31.425535F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      complexImage1.divide(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      Complex complex1 = new Complex(1.0, 0.0);
      assertEquals(1L, complex1.longValue());
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(1.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complex0, complex1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex0.equals((Object)complex1));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage3 = complexImage1.copy();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      
      complexImage2.add(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage2, rOI0, rOI0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(1502, 1502);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1508;
      ComplexImage complexImage0 = new ComplexImage(23, 1508);
      assertEquals(23, complexImage0.X());
      assertEquals(1508, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1508, 586);
      assertEquals(586, complexImage1.Y());
      assertEquals(1508, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI0.setROI(7, 7, 7, 7);
      assertEquals(7, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(7, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(7, rOI0.lx());
      assertEquals(7, rOI0.ly());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-581.0F), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(23, 1300);
      assertEquals(1300, complexImage0.Y());
      assertEquals(23, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(23, 1300);
      assertEquals(1300, complexImage0.Y());
      assertEquals(23, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-200.5F), (float) 586);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 3264;
      int int1 = (-1293);
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3264;
      ROI rOI0 = new ROI((-1), (-1), 1927, 1927);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.uy();
      assertEquals((-1), int2);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.X();
      assertEquals(1929, int3);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.Y();
      assertEquals(1929, int4);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.uy();
      assertEquals((-1), int5);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      
      int int6 = rOI0.ly();
      assertEquals(1927, int6);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1501, 3264, 1965.993F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ROI rOI0 = new ROI(274, 274, 274, 274);
      assertEquals(274, rOI0.ux());
      assertEquals(274, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(274, rOI0.lx());
      assertEquals(274, rOI0.ly());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage0.Y());
      assertEquals(2030, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.X();
      assertEquals(2030, int0);
      assertEquals(2030, complexImage0.Y());
      assertEquals(2030, complexImage0.X());
      
      int int1 = complexImage0.Y();
      assertEquals(2030, int1);
      assertEquals(2030, complexImage0.Y());
      assertEquals(2030, complexImage0.X());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(7, (-165), 16, 3531);
      assertEquals(7, rOI0.ux());
      assertEquals(3697, rOI0.Y());
      assertEquals(3531, rOI0.ly());
      assertEquals(10, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-165), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 7, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -165
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      complexImage0.addbuffer(981, 7, (-1.0F), (float) (-1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add((float) 16, (-1100.4803F));
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(complexImage2);
      
      Complex complex1 = complexImage2.max(rOI0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals((byte)76, complex1.byteValue());
      assertEquals(1100, complex1.intValue());
      assertEquals(1100.5967F, complex1.floatValue(), 0.01F);
      assertEquals((short)1100, complex1.shortValue());
      assertEquals(1100.5966563641741, complex1.magnitude(), 0.01);
      assertEquals((-1100.4803466796875), complex1.imag(), 0.01);
      assertEquals((-1100.4803466796875), complex1.imaginary(), 0.01);
      assertEquals(1100.5966563641741, complex1.doubleValue(), 0.01);
      assertEquals((-1.5562582454912082), complex1.arg(), 0.01);
      assertEquals(1100L, complex1.longValue());
      assertEquals(16.0, complex1.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotNull(complexImage3);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI(1494, 992, 16, 992);
      assertEquals(1, rOI1.Y());
      assertEquals(992, rOI1.uy());
      assertEquals(1494, rOI1.lx());
      assertEquals(16, rOI1.ux());
      assertEquals(992, rOI1.ly());
      assertEquals(1479, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage2, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, (float) 0, (float) 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI((-1), (-1), 1927, 1927);
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals((-1), int0);
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(1929, int1);
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1929, int2);
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.uy();
      assertEquals((-1), int3);
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.ly();
      assertEquals(1927, int4);
      assertEquals(1927, rOI0.lx());
      assertEquals(1927, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(1929, rOI0.Y());
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex0.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1513, 1513, complex1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      complexImage0.real = realGrayImage0;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, complexImage0.real.X());
      assertEquals(0.0F, complexImage0.real.absSum(), 0.01F);
      assertEquals((-32768.0F), complexImage0.real.max(), 0.01F);
      assertEquals(0, complexImage0.real.Y());
      assertEquals(0.0F, complexImage0.real.addSum(), 0.01F);
      assertEquals(32767.0F, complexImage0.real.min(), 0.01F);
      assertEquals(0.0, complexImage0.real.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1297, 1297, (float) 1297, (float) 1297, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1297
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      Complex complex1 = new Complex(1.0, 1100.5966563641741);
      assertEquals(1.5698877289922024, complex1.arg(), 0.01);
      assertEquals(1100.5972F, complex1.floatValue(), 0.01F);
      assertEquals((byte)76, complex1.byteValue());
      assertEquals(1100L, complex1.longValue());
      assertEquals(1100.5971106631164, complex1.magnitude(), 0.01);
      assertEquals(1100.5971106631164, complex1.doubleValue(), 0.01);
      assertEquals((short)1100, complex1.shortValue());
      assertEquals(1100.5966796875, complex1.imaginary(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1100, complex1.intValue());
      assertEquals(1100.5966796875, complex1.imag(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      complexImage1.add(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      complexImage0.multiply(complexImage1, rOI1, rOI0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI1, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(16, 1502);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      Complex complex0 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotNull(complex0);
      
      ComplexImage complexImage3 = complexImage0.multiply((float) 1, (float) 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotNull(complexImage3);
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotNull(realGrayImage0);
      
      complexImage0.setReal(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      Complex complex1 = complexImage1.min();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ComplexImage complexImage2 = complexImage0.add((-1088.0F), (-4199.0F), rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      complexImage1.divide(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      
      Complex complex2 = new Complex(1, 1);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals((byte)1, complex2.byteValue());
      assertEquals(1L, complex2.longValue());
      assertEquals(1, complex2.intValue());
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      double double0 = complex2.real();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals((byte)1, complex2.byteValue());
      assertEquals(1L, complex2.longValue());
      assertEquals(1, complex2.intValue());
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage3 = complexImage0.copy();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      
      complexImage2.add(complexImage3);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 79;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI0.setROI(7, 7, 7, 7);
      assertEquals(7, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(7, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(7, rOI0.ly());
      assertEquals(7, rOI0.lx());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-581.0F), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, 1468, (float) 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1468
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      rOI0.setROI(2070, 2070, 2070, 1384);
      assertEquals(2070, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(687, rOI0.Y());
      assertEquals(2070, rOI0.ux());
      assertEquals(1384, rOI0.uy());
      assertEquals(2070, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2070, 2070, (-821.96185F), (float) 2070, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      int int1 = 0;
      ROI rOI0 = new ROI(0, 1, 0, (-267));
      assertEquals(1, rOI0.X());
      assertEquals((-267), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(269, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(16, 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 2666.293F, (float) 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      float[] floatArray0 = new float[0];
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertEquals(0, rescaleOp0.getNumFactors());
      assertEquals(0, floatArray0.length);
      assertNotNull(rescaleOp0);
      
      int int0 = 0;
      int int1 = 0;
      int int2 = 2398;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 194;
      intArray0[4] = 0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2398, 0, intArray0, (-267), true, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 2030;
      ComplexImage complexImage0 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = complexImage0.X();
      assertEquals(2030, int1);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertTrue(int1 == int0);
      
      int int2 = complexImage0.Y();
      assertEquals(2030, int2);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string0 = complexImage0.toString(rOI0);
      assertEquals("2030:2030\nnull \n2030:2030\nnull \n", string0);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(2030, 2030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ROI rOI0 = new ROI(2070, 2070, 2070, 2070);
      assertEquals(2070, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(2070, rOI0.uy());
      assertEquals(2070, rOI0.ux());
      assertEquals(2070, rOI0.ly());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1518, 1479);
      assertEquals(1479, complexImage0.Y());
      assertEquals(1518, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) (-1293), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.subtract(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.add(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNull(realGrayImage0);
      
      complexImage1.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      complexImage1.divide(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = new Complex((-1946.2047470588052), (-1946.2047470588052));
      assertEquals((short)2752, complex0.shortValue());
      assertEquals((-1946.2047119140625), complex0.imag(), 0.01);
      assertEquals(2752.3490875977195, complex0.magnitude(), 0.01);
      assertEquals(2752.3490875977195, complex0.doubleValue(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals(2752, complex0.intValue());
      assertEquals(2752.349F, complex0.floatValue(), 0.01F);
      assertEquals((-1946.2047119140625), complex0.real(), 0.01);
      assertEquals((-1946.2047119140625), complex0.imaginary(), 0.01);
      assertEquals(2752L, complex0.longValue());
      assertEquals((byte) (-64), complex0.byteValue());
      assertNotNull(complex0);
      
      double double0 = complex0.real();
      assertEquals((-1946.2047119140625), double0, 0.01);
      assertEquals((short)2752, complex0.shortValue());
      assertEquals((-1946.2047119140625), complex0.imag(), 0.01);
      assertEquals(2752.3490875977195, complex0.magnitude(), 0.01);
      assertEquals(2752.3490875977195, complex0.doubleValue(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals(2752, complex0.intValue());
      assertEquals(2752.349F, complex0.floatValue(), 0.01F);
      assertEquals((-1946.2047119140625), complex0.real(), 0.01);
      assertEquals((-1946.2047119140625), complex0.imaginary(), 0.01);
      assertEquals(2752L, complex0.longValue());
      assertEquals((byte) (-64), complex0.byteValue());
      
      Complex complex1 = Complex.mult(complex0, complex0);
      assertEquals((short)2752, complex0.shortValue());
      assertEquals((-1946.2047119140625), complex0.imag(), 0.01);
      assertEquals(2752.3490875977195, complex0.magnitude(), 0.01);
      assertEquals(2752.3490875977195, complex0.doubleValue(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals(2752, complex0.intValue());
      assertEquals(2752.349F, complex0.floatValue(), 0.01F);
      assertEquals((-1946.2047119140625), complex0.real(), 0.01);
      assertEquals((-1946.2047119140625), complex0.imaginary(), 0.01);
      assertEquals(2752L, complex0.longValue());
      assertEquals((byte) (-64), complex0.byteValue());
      assertEquals(7575425, complex1.intValue());
      assertEquals(7575425.5, complex1.imaginary(), 0.01);
      assertEquals(7575425.486913326, complex1.magnitude(), 0.01);
      assertEquals(7575425.486913326, complex1.doubleValue(), 0.01);
      assertEquals(7575425.5, complex1.imag(), 0.01);
      assertEquals((byte) (-127), complex1.byteValue());
      assertEquals(7575425.5F, complex1.floatValue(), 0.01F);
      assertEquals(7575425L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short) (-26751), complex1.shortValue());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage1 = complexImage2.real();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage2.clear(complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      float float0 = 0.0F;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (-1.0F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 2073, (float) 2073);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.get(2073, 2073);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add(0.0F, (-1100.4803F));
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      Complex complex1 = complexImage2.max(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals((byte)76, complex1.byteValue());
      assertEquals((-1100.4803466796875), complex1.imaginary(), 0.01);
      assertEquals(1100L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1100.480349665545, complex1.magnitude(), 0.01);
      assertEquals(1100.480349665545, complex1.doubleValue(), 0.01);
      assertEquals(1100, complex1.intValue());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals((-1100.4803466796875), complex1.imag(), 0.01);
      assertEquals((short)1100, complex1.shortValue());
      assertEquals(1100.4803F, complex1.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertNotNull(complexImage3);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      complexImage1.add(complexImage2, rOI1, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = complexImage1.Y();
      assertEquals(1, int0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(5, 1384, (float) 5, (float) 1384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex0.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-196), (-2955), complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add(0.0F, (-1100.4803F));
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(complexImage2);
      
      ComplexImage complexImage3 = null;
      try {
        complexImage3 = new ComplexImage((-1746), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      complexImage1.setImag(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ComplexImage complexImage2 = complexImage0.add((-1088.0F), (-4199.0F), rOI0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.divide((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 1, 0, (-267));
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals((-267), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(269, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.mult(complex1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage2 = complexImage1.add(1868.52F, 255.0F, rOI1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(rOI1, rOI0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ROI rOI0 = new ROI(0, 1, 0, (-267));
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-267), rOI0.uy());
      assertEquals(269, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = rOI1.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, (-267), 0.0F, 0.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(2047, 2047, 0, 2059);
      assertEquals(2047, rOI0.lx());
      assertEquals(2059, rOI0.ly());
      assertEquals(2048, rOI0.X());
      assertEquals(2047, rOI0.uy());
      assertEquals(13, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = complexImage0.imag();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.add(0, 0, (float) 2059, 1233.0442F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage0, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      int int1 = (-2542);
      ROI rOI0 = new ROI((-6047), 16, 1, 1461);
      assertEquals(1, rOI0.lx());
      assertEquals((-6047), rOI0.ux());
      assertEquals(1446, rOI0.Y());
      assertEquals(1461, rOI0.ly());
      assertEquals(6049, rOI0.X());
      assertEquals(16, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-6047), 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 2666.293F, (float) 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI((-1), (-1), 1927, 1927);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals((-1), int0);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(1929, int1);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1929, int2);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.ly());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.uy();
      assertEquals((-1), int3);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.ly());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.ly();
      assertEquals(1927, int4);
      assertEquals(1929, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals(1929, rOI0.Y());
      assertEquals(1927, rOI0.ly());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(274, 1563);
      assertEquals(1563, complexImage1.Y());
      assertEquals(274, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.divide((float) 1563, 1.0F);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      ComplexImage complexImage3 = new ComplexImage();
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      
      RealGrayImage realGrayImage0 = complexImage3.real();
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNull(realGrayImage0);
      
      ComplexImage complexImage4 = complexImage3.subtract((-1624.5F), (float) 274);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage4.X());
      assertEquals(0, complexImage4.Y());
      assertSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage1);
      assertSame(complexImage4, complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertNotNull(complexImage4);
      
      ComplexImage complexImage5 = new ComplexImage();
      assertEquals(0, complexImage5.Y());
      assertEquals(0, complexImage5.X());
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage0));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertFalse(complexImage5.equals((Object)complexImage1));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertNotNull(complexImage5);
      
      // Undeclared exception!
      try { 
        complexImage5.get(1489, 748);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 2073);
      assertEquals(1, complexImage0.X());
      assertEquals(2073, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(0.0, 0.0);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex1.magnitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex1.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(1137, 955, 1137, 1);
      assertEquals(955, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(955, rOI0.Y());
      assertEquals(1137, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1137, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1497, (-1154), complex0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1153
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      int int1 = 2750;
      int int2 = 4462;
      ComplexImage complexImage2 = new ComplexImage(2750, 4462);
      assertEquals(4462, complexImage2.Y());
      assertEquals(2750, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      complexImage2.phaseImage();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex0.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      Complex complex2 = new Complex(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-749), (-157), complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = (-1);
      int int1 = (-602);
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1), (-602), 724.2F, 724.2F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = complexImage0.multiply((-3365.361F), (-4991.35F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.add((-4991.35F), 3778.35F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-1), 0, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1579, 1579);
      assertEquals(1579, complexImage0.Y());
      assertEquals(1579, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 2073);
      assertEquals(1, complexImage0.X());
      assertEquals(2073, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.add((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage(9, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(9, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 9, (float) 9);
      assertEquals(0, complexImage0.Y());
      assertEquals(9, complexImage0.X());
      assertEquals(9, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(0, (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(3264, 3264, 1479, 1479);
      assertEquals(1479, rOI0.ux());
      assertEquals(1479, rOI0.uy());
      assertEquals(3264, rOI0.lx());
      assertEquals(3264, rOI0.ly());
      assertEquals(1786, rOI0.X());
      assertEquals(1786, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 3264, (float) 3264);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      complexImage1.divide(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      rOI0.setROI(16, (-2034), 1512, 0);
      assertEquals(16, rOI0.ux());
      assertEquals(1512, rOI0.lx());
      assertEquals(2035, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1497, rOI0.X());
      assertEquals((-2034), rOI0.uy());
      
      Complex complex1 = new Complex(1.0, 0.0);
      assertEquals(1.0, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1, complex1.intValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(1.0F, complex1.floatValue(), 0.01F);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)1, complex1.byteValue());
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      Complex complex2 = complexImage2.min();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(9223372036854775807L, complex2.longValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals((short) (-1), complex2.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex2.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.magnitude(), 0.01);
      assertEquals((byte) (-1), complex2.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex2.imaginary(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex2.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex2.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex2.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.imag(), 0.01);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      complexImage1.add(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = (-20);
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      int int1 = complexImage1.Y();
      assertEquals(0, int1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertFalse(int1 == int0);
      
      ComplexImage complexImage2 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage2.Y());
      assertEquals(2030, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      int int2 = complexImage2.X();
      assertEquals(2030, int2);
      assertEquals(2030, complexImage2.Y());
      assertEquals(2030, complexImage2.X());
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = complexImage2.Y();
      assertEquals(2030, int3);
      assertEquals(2030, complexImage2.Y());
      assertEquals(2030, complexImage2.X());
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(2030, 2030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.subtract(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2073, 2073);
      assertEquals(2073, complexImage0.X());
      assertEquals(2073, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      Complex complex1 = complexImage1.min();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      complexImage1.setReal(realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.add((-1088.0F), (-4199.0F), rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      complexImage1.divide(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      
      Complex complex2 = new Complex(1, 1);
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertEquals(1L, complex2.longValue());
      assertEquals(1, complex2.intValue());
      assertEquals((byte)1, complex2.byteValue());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      double double0 = complex2.real();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertEquals(1L, complex2.longValue());
      assertEquals(1, complex2.intValue());
      assertEquals((byte)1, complex2.byteValue());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage3 = complexImage0.copy();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      
      complexImage2.add(complexImage3);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage2, rOI0, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(rOI1, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(rOI1.equals((Object)rOI0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = 128;
      ROI rOI0 = new ROI(16, 16, 128, (-1));
      assertEquals(113, rOI0.X());
      assertEquals(128, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(18, rOI0.Y());
      assertEquals(16, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) 1, (float) 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      ComplexImage complexImage3 = complexImage2.addbuffer(1, 1, (-1564), (-1564), (float) 1, (float) 16);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      
      int int0 = complexImage2.Y();
      assertEquals(1, int0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      
      Complex complex0 = complexImage2.min();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(16, 1, (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1509;
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.subtract(complexImage0);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int1 = 1518;
      ROI rOI0 = new ROI((-5693), (-5693), 1518, 1518);
      assertEquals((-5693), rOI0.ux());
      assertEquals((-5693), rOI0.uy());
      assertEquals(1518, rOI0.lx());
      assertEquals(1518, rOI0.ly());
      assertEquals(7212, rOI0.Y());
      assertEquals(7212, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 2073;
      int int1 = 1852;
      int int2 = 0;
      int int3 = (-1992);
      ROI rOI0 = new ROI(1852, 0, 0, (-1992));
      assertEquals(0, rOI0.ly());
      assertEquals((-1992), rOI0.uy());
      assertEquals(1993, rOI0.Y());
      assertEquals(1853, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1852, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(2073, 2073, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1497);
      assertEquals(1, complexImage0.X());
      assertEquals(1497, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.get((-986), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((-1.0F), (float) 1);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.real = null;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = null;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      complexImage1.divide(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex(1.0, 0.0);
      assertEquals(1, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(1.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.0F, complex1.floatValue(), 0.01F);
      assertEquals(1.0, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1L, complex1.longValue());
      assertEquals((short)1, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      
      ComplexImage complexImage2 = complexImage0.divide((float) 16, (-1088.0F), rOI2);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(274, 274, 274, 274);
      assertEquals(274, rOI0.ly());
      assertEquals(274, rOI0.ux());
      assertEquals(274, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(274, rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage1.Y());
      assertEquals(2030, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(2616, (-466));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2070;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int1 = 1384;
      rOI0.setROI(2070, 2070, 2070, 1384);
      assertEquals(2070, rOI0.lx());
      assertEquals(2070, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(687, rOI0.Y());
      assertEquals(2070, rOI0.ux());
      assertEquals(1384, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1384, 1384, (-2329.4F), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 0.0F);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1509, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI((-3063), 1509, (-1744), (-1744));
      assertEquals((-1744), rOI0.lx());
      assertEquals((-3063), rOI0.ux());
      assertEquals(3254, rOI0.Y());
      assertEquals(1320, rOI0.X());
      assertEquals(1509, rOI0.ly());
      assertEquals((-1744), rOI0.uy());
      
      rOI0.setROI((-547), 1491, 2098, 674);
      assertEquals(818, rOI0.Y());
      assertEquals(2098, rOI0.lx());
      assertEquals(2646, rOI0.X());
      assertEquals(1491, rOI0.ly());
      assertEquals((-547), rOI0.ux());
      assertEquals(674, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.multiply(complexImage0);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      Complex complex1 = complexImage2.max();
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complex1, complex0);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      RealGrayImage realGrayImage2 = complexImage2.real();
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNull(realGrayImage2);
      
      // Undeclared exception!
      try { 
        complexImage2.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-201), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      complexImage0.real = null;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = null;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(4371, 4371);
      assertEquals(4371, complexImage0.X());
      assertEquals(4371, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      complexImage1.setImag(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      
      ComplexImage complexImage1 = complexImage0.divide(0.0F, 0.0F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.diff(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage1.add(255.0F, 0.0F);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(complexImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(255, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(255.0F, complex0.floatValue(), 0.01F);
      assertEquals(255L, complex0.longValue());
      assertEquals(255.0, complex0.real(), 0.01);
      assertEquals((short)255, complex0.shortValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(255.0, complex0.magnitude(), 0.01);
      assertEquals(255.0, complex0.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotNull(complex0);
      
      ComplexImage complexImage3 = complexImage1.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotNull(complexImage3);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotNull(realGrayImage0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      complexImage1.setReal(realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertNotNull(rOI2);
      
      complexImage2.add(complexImage0, rOI1, rOI2);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int1 = complexImage0.Y();
      assertEquals(1, int1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, 1514.1F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1485, 0);
      assertEquals(1485, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 1485);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 1297;
      int int1 = (-1);
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rOI0).uy();
      complexImage0.real = realGrayImage0;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, complexImage0.real.addSum(), 0.01F);
      assertEquals(0.0, complexImage0.real.sqrSum(), 0.01);
      assertEquals(32767.0F, complexImage0.real.min(), 0.01F);
      assertEquals((-32768.0F), complexImage0.real.max(), 0.01F);
      assertEquals(0, complexImage0.real.X());
      assertEquals(0, complexImage0.real.Y());
      assertEquals(0.0F, complexImage0.real.absSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1297, (-1), (float) 1297, (float) (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 2078;
      int int1 = 1839;
      int int2 = (-1992);
      ROI rOI0 = new ROI(1839, 34, 0, (-1992));
      assertEquals(2027, rOI0.Y());
      assertEquals((-1992), rOI0.uy());
      assertEquals(34, rOI0.ly());
      assertEquals(1839, rOI0.lx());
      assertEquals(1840, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int3 = 2626;
      // Undeclared exception!
      try { 
        complexImage0.multiply(2626, 0, (float) 2078, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage(2070, 2070);
      assertEquals(2070, complexImage0.X());
      assertEquals(2070, complexImage0.Y());
      assertNotNull(complexImage0);
      
      rOI0.setROI(2070, 2070, 2070, 1384);
      assertEquals(2070, rOI0.ly());
      assertEquals(687, rOI0.Y());
      assertEquals(2070, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1384, rOI0.uy());
      assertEquals(2070, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2070, 2070, (float) 2070, (float) 2070, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3454
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 1300;
      ComplexImage complexImage1 = new ComplexImage(3264, 1300);
      assertEquals(3264, complexImage1.X());
      assertEquals(1300, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(3264, 3264);
      assertEquals(3264, complexImage2.Y());
      assertEquals(3264, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(3264, 1505, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      rOI0.setROI(2070, 2070, 2070, 1384);
      assertEquals(2070, rOI0.lx());
      assertEquals(2070, rOI0.ly());
      assertEquals(1384, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(687, rOI0.Y());
      assertEquals(2070, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2070, 2070, (-821.96185F), (-343.55264F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      complexImage0.real = realGrayImage0;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, complexImage0.real.addSum(), 0.01F);
      assertEquals(0, complexImage0.real.X());
      assertEquals(0, complexImage0.real.Y());
      assertEquals(0.0F, complexImage0.real.absSum(), 0.01F);
      assertEquals((-32768.0F), complexImage0.real.max(), 0.01F);
      assertEquals(32767.0F, complexImage0.real.min(), 0.01F);
      assertEquals(0.0, complexImage0.real.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.addbuffer((-1), (-2369), 0, (-2369), (float) (-2369), (float) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(3982.8F, 3982.8F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      int int0 = complexImage2.Y();
      assertEquals(1, int0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = complexImage0.addbuffer(0, 1336, 935, 1, (float) 1, (-141.048F));
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1336, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-1), 1, (float) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1487);
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1487, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1487, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1487, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.multiply(complexImage0);
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1487, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage2 = complexImage1.real();
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1487, complexImage1.Y());
      assertEquals(1487, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      rOI0.setROI(128, 128, 128, 128);
      assertEquals(1, rOI0.X());
      assertEquals(128, rOI0.uy());
      assertEquals(128, rOI0.ux());
      assertEquals(128, rOI0.lx());
      assertEquals(128, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(128, 128, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rOI0).ly();
      doReturn(274).when(rOI0).uy();
      Complex complex0 = complexImage0.min(rOI0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      int int0 = complexImage1.X();
      assertEquals(2030, int0);
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = complexImage1.Y();
      assertEquals(2030, int1);
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      
      complexImage0.add(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage1.copy();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      int int0 = complexImage1.X();
      assertEquals(2030, int0);
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = complexImage1.Y();
      assertEquals(2030, int1);
      assertEquals(2030, complexImage1.X());
      assertEquals(2030, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(2030, 2030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1070, 1070);
      assertEquals(1070, complexImage0.X());
      assertEquals(1070, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      int int1 = 1498;
      ROI rOI0 = new ROI(1498, (-607), 1, 1498);
      assertEquals(1498, rOI0.ly());
      assertEquals(1498, rOI0.lx());
      assertEquals((-607), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(2106, rOI0.Y());
      assertEquals(1498, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(2, 1508, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      Complex complex1 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      ComplexImage complexImage2 = complexImage0.add((-1088.0F), (-4199.0F), rOI0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      Complex complex2 = new Complex(1, 1);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals(1L, complex2.longValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals((byte)1, complex2.byteValue());
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertEquals(1, complex2.intValue());
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage3 = complexImage0.copy();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      
      complexImage2.add(complexImage3);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      Complex complex1 = complexImage1.min();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage1.add(0.0F, 1669.227F);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      Complex complex2 = complexImage1.max(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1669.22705078125, complex2.imag(), 0.01);
      assertEquals(1669.227066638928, complex2.magnitude(), 0.01);
      assertEquals(1669.227066638928, complex2.doubleValue(), 0.01);
      assertEquals(1669.22705078125, complex2.imaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals((byte) (-123), complex2.byteValue());
      assertEquals(1669, complex2.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)1669, complex2.shortValue());
      assertEquals(1669L, complex2.longValue());
      assertEquals(1669.227F, complex2.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertNotNull(complexImage3);
      
      ComplexImage complexImage4 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage4.X());
      assertEquals(2030, complexImage4.Y());
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertNotNull(complexImage4);
      
      int int0 = complexImage4.X();
      assertEquals(2030, int0);
      assertEquals(2030, complexImage4.X());
      assertEquals(2030, complexImage4.Y());
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      
      int int1 = complexImage4.Y();
      assertEquals(2030, int1);
      assertEquals(2030, complexImage4.X());
      assertEquals(2030, complexImage4.Y());
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage4.getImaginary(2030, 2030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertNotNull(complex0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(95, 2204, (float) 2204, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage1.multiply(0.0F, (-94.24F));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(3264, 1300);
      assertEquals(1300, complexImage1.Y());
      assertEquals(3264, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(3264, 3264);
      assertEquals(3264, complexImage2.Y());
      assertEquals(3264, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(3264, 1505, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      complexImage0.divide(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      
      Complex complex0 = new Complex(715, 1509);
      assertEquals((short)1669, complex0.shortValue());
      assertEquals(1669, complex0.intValue());
      assertEquals(1669.8221462179738, complex0.magnitude(), 0.01);
      assertEquals(1669.8221462179738, complex0.doubleValue(), 0.01);
      assertEquals(715.0, complex0.real(), 0.01);
      assertEquals(1.1283081631817167, complex0.arg(), 0.01);
      assertEquals(1509.0, complex0.imag(), 0.01);
      assertEquals(1669L, complex0.longValue());
      assertEquals(1669.8221F, complex0.floatValue(), 0.01F);
      assertEquals((byte) (-123), complex0.byteValue());
      assertEquals(1509.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.real = realGrayImage0;
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, complexImage1.real.sqrSum(), 0.01);
      assertEquals((-32768.0F), complexImage1.real.max(), 0.01F);
      assertEquals(0, complexImage1.real.X());
      assertEquals(32767.0F, complexImage1.real.min(), 0.01F);
      assertEquals(0.0F, complexImage1.real.absSum(), 0.01F);
      assertEquals(0.0F, complexImage1.real.addSum(), 0.01F);
      assertEquals(1509, complexImage1.real.Y());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1509, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage1, realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 1335;
      ComplexImage complexImage0 = new ComplexImage(23, 1335);
      assertEquals(1335, complexImage0.Y());
      assertEquals(23, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 23, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, (-1833), (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) (-1293), (float) (-1293));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      int int0 = complexImage1.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setImaginary((-1293), (-1), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      int int1 = 8;
      int int2 = 0;
      ROI rOI0 = new ROI(0, 1, 0, (-267));
      assertEquals(269, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-267), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      float float0 = new Integer(1);
      assertEquals(1, float0, 0.01F);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.mult(complex1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0, complex2.intValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      int int3 = 2630;
      complexImage1.imag = realGrayImage0;
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, complexImage1.imag.min(), 0.01F);
      assertEquals(0.0F, complexImage1.imag.max(), 0.01F);
      assertEquals(0.0F, complexImage1.imag.addSum(), 0.01F);
      assertEquals(1, complexImage1.imag.Y());
      assertEquals(16, complexImage1.imag.X());
      assertEquals(0.0F, complexImage1.imag.absSum(), 0.01F);
      assertEquals(0.0, complexImage1.imag.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.add(2630, 0, 0.0F, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -267
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(1599, 1599, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-576));
      assertEquals((-576), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(577, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -576
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rOI0).ly();
      doReturn(274).when(rOI0).uy();
      Complex complex0 = complexImage0.min(rOI0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = new ComplexImage(2030, 2633);
      assertEquals(2030, complexImage1.X());
      assertEquals(2633, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      int int0 = complexImage1.X();
      assertEquals(2030, int0);
      assertEquals(2030, complexImage1.X());
      assertEquals(2633, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = complexImage1.Y();
      assertEquals(2633, int1);
      assertEquals(2030, complexImage1.X());
      assertEquals(2633, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(int1 == int0);
      
      complexImage0.add(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(2030, complexImage1.X());
      assertEquals(2633, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 3264;
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1.0F), (float) 3264, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1509, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI((-3063), 1509, (-1744), (-1744));
      assertEquals((-1744), rOI0.lx());
      assertEquals((-3063), rOI0.ux());
      assertEquals(1509, rOI0.ly());
      assertEquals((-1744), rOI0.uy());
      assertEquals(1320, rOI0.X());
      assertEquals(3254, rOI0.Y());
      
      RealGrayImage realGrayImage2 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1509, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(1509, complexImage2.Y());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage3 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1509, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotNull(realGrayImage3);
      
      int int0 = complexImage1.Y();
      assertEquals(1509, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage4 = complexImage2.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(1509, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(1509, complexImage2.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(1509, realGrayImage4.Y());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage4);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1744
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = complexImage0.X();
      assertEquals(0, int1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      int int1 = 789;
      int int2 = 194;
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1509, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1509, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.get(789, 194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add(0.0F, (-1100.4803F));
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(complexImage2);
      
      Complex complex1 = complexImage2.max(rOI0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(1100L, complex1.longValue());
      assertEquals(1100.480349665545, complex1.magnitude(), 0.01);
      assertEquals(1100.480349665545, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1100, complex1.intValue());
      assertEquals((-1100.4803466796875), complex1.imaginary(), 0.01);
      assertEquals((byte)76, complex1.byteValue());
      assertEquals((-1100.4803466796875), complex1.imag(), 0.01);
      assertEquals(1100.4803F, complex1.floatValue(), 0.01F);
      assertEquals((short)1100, complex1.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals((-1.5707964F), realGrayImage1.min(), 0.01F);
      assertEquals((-1.5707964F), realGrayImage1.max(), 0.01F);
      assertEquals(25.132744F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-25.132744F), realGrayImage1.addSum(), 0.01F);
      assertEquals(39.47842025756836, realGrayImage1.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(realGrayImage1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      complexImage1.subtract(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 1, (float) 0, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      int int0 = 2496;
      ROI rOI0 = new ROI(3264, 3264, 92, 1493);
      assertEquals(1772, rOI0.Y());
      assertEquals(92, rOI0.ux());
      assertEquals(3264, rOI0.lx());
      assertEquals(3264, rOI0.ly());
      assertEquals(3173, rOI0.X());
      assertEquals(1493, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = 1465;
      // Undeclared exception!
      try { 
        complexImage0.setReal(1474, 1465, (float) 1493, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(2551, 150);
      assertEquals(150, complexImage1.Y());
      assertEquals(2551, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.setImag(23, 23, (float) 150);
      assertEquals(150, complexImage1.Y());
      assertEquals(2551, complexImage1.X());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      complexImage0.divide(complexImage0);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex(715, 1509);
      assertEquals(1.1283081631817167, complex0.arg(), 0.01);
      assertEquals(1509.0, complex0.imag(), 0.01);
      assertEquals(1669.8221462179738, complex0.doubleValue(), 0.01);
      assertEquals(1669.8221462179738, complex0.magnitude(), 0.01);
      assertEquals(1669, complex0.intValue());
      assertEquals((byte) (-123), complex0.byteValue());
      assertEquals(1669.8221F, complex0.floatValue(), 0.01F);
      assertEquals((short)1669, complex0.shortValue());
      assertEquals(1509.0, complex0.imaginary(), 0.01);
      assertEquals(1669L, complex0.longValue());
      assertEquals(715.0, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      complexImage0.add(complexImage0);
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.real = realGrayImage0;
      assertEquals(1509, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(1509, complexImage1.real.Y());
      assertEquals(32767.0F, complexImage1.real.min(), 0.01F);
      assertEquals((-32768.0F), complexImage1.real.max(), 0.01F);
      assertEquals(0.0, complexImage1.real.sqrSum(), 0.01);
      assertEquals(0.0F, complexImage1.real.addSum(), 0.01F);
      assertEquals(0.0F, complexImage1.real.absSum(), 0.01F);
      assertEquals(0, complexImage1.real.X());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1509, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage1, realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      complexImage0.addbuffer(1509, 715, (-4099), 0, (float) 0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(23, 23);
      assertEquals(23, complexImage0.Y());
      assertEquals(23, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1271, 1271, (float) 1308, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(686, 686, 274, 274);
      assertEquals(413, rOI0.Y());
      assertEquals(274, rOI0.uy());
      assertEquals(413, rOI0.X());
      assertEquals(274, rOI0.ux());
      assertEquals(686, rOI0.lx());
      assertEquals(686, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      complexImage0.divide(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex(16, 1.7976931348623157E308);
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(16.0, complex1.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals((short) (-1), complex1.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      complexImage1.add(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage2.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      complexImage1.subtract(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = (-1001);
      ROI rOI0 = new ROI(586, 259, (-1001), 259);
      assertEquals(586, rOI0.lx());
      assertEquals(259, rOI0.uy());
      assertEquals(1588, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-1001), rOI0.ux());
      assertEquals(259, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(259, 586, (-1001), 0);
      assertEquals(0, rOI0.uy());
      assertEquals(587, rOI0.Y());
      assertEquals(1261, rOI0.X());
      assertEquals(586, rOI0.ly());
      assertEquals((-1001), rOI0.ux());
      assertEquals(259, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(259, 259, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      Complex complex1 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      complexImage1.setReal(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.add((-1088.0F), (-4199.0F), rOI0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      complexImage1.divide(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      
      Complex complex2 = new Complex(1, 1);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(1, complex2.intValue());
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1L, complex2.longValue());
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals((byte)1, complex2.byteValue());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      double double0 = complex2.real();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(1, complex2.intValue());
      assertEquals(1.0, complex2.imaginary(), 0.01);
      assertEquals((short)1, complex2.shortValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals(1.4142135623730951, complex2.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex2.doubleValue(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(1L, complex2.longValue());
      assertEquals(1.4142135F, complex2.floatValue(), 0.01F);
      assertEquals((byte)1, complex2.byteValue());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ComplexImage complexImage3 = complexImage1.copy();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      
      complexImage0.add(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      
      ROI rOI2 = new ROI((-1), (-1), 1927, 1927);
      assertEquals(1929, rOI2.X());
      assertEquals((-1), rOI2.ux());
      assertEquals(1929, rOI2.Y());
      assertEquals(1927, rOI2.lx());
      assertEquals(1927, rOI2.ly());
      assertEquals((-1), rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertNotNull(rOI2);
      
      int int0 = rOI2.uy();
      assertEquals((-1), int0);
      assertEquals(1929, rOI2.X());
      assertEquals((-1), rOI2.ux());
      assertEquals(1929, rOI2.Y());
      assertEquals(1927, rOI2.lx());
      assertEquals(1927, rOI2.ly());
      assertEquals((-1), rOI2.uy());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int1 = rOI2.X();
      assertEquals(1929, int1);
      assertEquals(1929, rOI2.X());
      assertEquals((-1), rOI2.ux());
      assertEquals(1929, rOI2.Y());
      assertEquals(1927, rOI2.lx());
      assertEquals(1927, rOI2.ly());
      assertEquals((-1), rOI2.uy());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertFalse(int1 == int0);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int2 = rOI2.Y();
      assertEquals(1929, int2);
      assertEquals(1929, rOI2.X());
      assertEquals((-1), rOI2.ux());
      assertEquals(1929, rOI2.Y());
      assertEquals(1927, rOI2.lx());
      assertEquals(1927, rOI2.ly());
      assertEquals((-1), rOI2.uy());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int3 = rOI2.uy();
      assertEquals((-1), int3);
      assertEquals(1929, rOI2.X());
      assertEquals((-1), rOI2.ux());
      assertEquals(1929, rOI2.Y());
      assertEquals(1927, rOI2.lx());
      assertEquals(1927, rOI2.ly());
      assertEquals((-1), rOI2.uy());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int4 = rOI2.ly();
      assertEquals(1927, int4);
      assertEquals(1929, rOI2.X());
      assertEquals((-1), rOI2.ux());
      assertEquals(1929, rOI2.Y());
      assertEquals(1927, rOI2.lx());
      assertEquals(1927, rOI2.ly());
      assertEquals((-1), rOI2.uy());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI2, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1489, 1489);
      assertEquals(1489, complexImage0.Y());
      assertEquals(1489, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = (-1293);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1293), 0, (float) (-1293), (float) 3221, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1487);
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1487, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1487, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1487, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1487, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1487, complexImage2.Y());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) 1, (float) 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      int int0 = complexImage2.Y();
      assertEquals(1, int0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(16, 1, (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1300);
      assertEquals(1300, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 23, 338.74F, (-349.8797F));
      assertEquals(1300, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(23, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(23, 1162);
      assertEquals(23, complexImage2.X());
      assertEquals(1162, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3264;
      ROI rOI0 = new ROI((-1), (-1), 1927, 1927);
      assertEquals(1929, rOI0.X());
      assertEquals(1927, rOI0.ly());
      assertEquals(1929, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals((-1), rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals((-1), int0);
      assertEquals(1929, rOI0.X());
      assertEquals(1927, rOI0.ly());
      assertEquals(1929, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertEquals(1927, rOI0.lx());
      assertEquals((-1), rOI0.ux());
      
      rOI0.setROI((-1293), 1670, (-1), 4257);
      assertEquals((-1), rOI0.lx());
      assertEquals(1670, rOI0.uy());
      assertEquals(4257, rOI0.ly());
      assertEquals(1293, rOI0.X());
      assertEquals(2588, rOI0.Y());
      assertEquals((-1293), rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1293, int1);
      assertEquals((-1), rOI0.lx());
      assertEquals(1670, rOI0.uy());
      assertEquals(4257, rOI0.ly());
      assertEquals(1293, rOI0.X());
      assertEquals(2588, rOI0.Y());
      assertEquals((-1293), rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(2588, int2);
      assertEquals((-1), rOI0.lx());
      assertEquals(1670, rOI0.uy());
      assertEquals(4257, rOI0.ly());
      assertEquals(1293, rOI0.X());
      assertEquals(2588, rOI0.Y());
      assertEquals((-1293), rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.uy();
      assertEquals(1670, int3);
      assertEquals((-1), rOI0.lx());
      assertEquals(1670, rOI0.uy());
      assertEquals(4257, rOI0.ly());
      assertEquals(1293, rOI0.X());
      assertEquals(2588, rOI0.Y());
      assertEquals((-1293), rOI0.ux());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      rOI0.setROI(16, (-1), 1859, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1844, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1859, rOI0.lx());
      assertEquals(16, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1.0F, (float) (-1293), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add(0.0F, (-1100.4803F));
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotNull(complexImage2);
      
      Complex complex1 = complexImage1.min(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals((-1100.4803466796875), complex1.imaginary(), 0.01);
      assertEquals((-1100.4803466796875), complex1.imag(), 0.01);
      assertEquals((short)1100, complex1.shortValue());
      assertEquals(1100, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1100L, complex1.longValue());
      assertEquals(1100.480349665545, complex1.magnitude(), 0.01);
      assertEquals((byte)76, complex1.byteValue());
      assertEquals(1100.480349665545, complex1.doubleValue(), 0.01);
      assertEquals(1100.4803F, complex1.floatValue(), 0.01F);
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complexImage2.max(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals((-1.5707963267948966), complex2.arg(), 0.01);
      assertEquals(1100.4803F, complex2.floatValue(), 0.01F);
      assertEquals((-1100.4803466796875), complex2.imag(), 0.01);
      assertEquals((-1100.4803466796875), complex2.imaginary(), 0.01);
      assertEquals((byte)76, complex2.byteValue());
      assertEquals((short)1100, complex2.shortValue());
      assertEquals(1100, complex2.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(1100.480349665545, complex2.magnitude(), 0.01);
      assertEquals(1100L, complex2.longValue());
      assertEquals(1100.480349665545, complex2.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertNotNull(complexImage3);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      complexImage1.add(complexImage2, rOI1, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = complexImage1.Y();
      assertEquals(1, int0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage3.add(918, 1558, (float) 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1558
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1487);
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertNotNull(imageProducer0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1487, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1487, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 1085;
      rOI0.setROI((-1), 0, 1085, 1);
      assertEquals((-1), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(2, rOI0.Y());
      assertEquals(1087, rOI0.X());
      assertEquals(1085, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-581.0F), 1.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real;
      assertNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 1335;
      ComplexImage complexImage0 = new ComplexImage(23, 1335);
      assertEquals(23, complexImage0.X());
      assertEquals(1335, complexImage0.Y());
      assertNotNull(complexImage0);
      
      complexImage0.toString();
      complexImage0.copy();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.Y();
      int int1 = (-1018);
      complexImage0.setImaginary(int1, int0, (float) int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ComplexImage complexImage2 = complexImage0.copy(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      Complex complex0 = complexImage1.max();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage3 = complexImage0.add(0.0F, (-1100.4803F));
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      
      Complex complex1 = complexImage1.min(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals((short)1100, complex1.shortValue());
      assertEquals((-1100.4803466796875), complex1.imaginary(), 0.01);
      assertEquals(1100.4803F, complex1.floatValue(), 0.01F);
      assertEquals((-1100.4803466796875), complex1.imag(), 0.01);
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(1100.480349665545, complex1.magnitude(), 0.01);
      assertEquals(1100L, complex1.longValue());
      assertEquals(1100, complex1.intValue());
      assertEquals(1100.480349665545, complex1.doubleValue(), 0.01);
      assertEquals((byte)76, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complex1, complex0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complexImage3.max(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1100L, complex2.longValue());
      assertEquals((short)1100, complex2.shortValue());
      assertEquals((-1100.4803466796875), complex2.imag(), 0.01);
      assertEquals((-1100.4803466796875), complex2.imaginary(), 0.01);
      assertEquals(1100.480349665545, complex2.doubleValue(), 0.01);
      assertEquals((byte)76, complex2.byteValue());
      assertEquals(1100, complex2.intValue());
      assertEquals(1100.480349665545, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((-1.5707963267948966), complex2.arg(), 0.01);
      assertEquals(1100.4803F, complex2.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      ComplexImage complexImage4 = complexImage3.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, complexImage4.Y());
      assertEquals(16, complexImage4.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage4);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertSame(complexImage4, complexImage1);
      assertSame(complexImage4, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertNotNull(complexImage4);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      complexImage1.add(complexImage3, rOI1, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage4);
      assertSame(complexImage3, complexImage0);
      assertNotSame(rOI1, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = complexImage1.Y();
      assertEquals(1, int0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage4.add(918, 1558, (float) 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1558
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 0;
      ROI rOI0 = new ROI(0, 6, 0, 0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(7, rOI0.Y());
      assertEquals(6, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNull(realGrayImage1);
      
      int int1 = (-2463);
      // Undeclared exception!
      try { 
        complexImage1.multiply((-2463), 6, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNull(realGrayImage0);
      
      complexImage1.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(1, 1, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      int int0 = complexImage2.Y();
      assertEquals(1, int0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-1), 1, (float) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 1509);
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1509, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(1509, complexImage0.Y());
      assertEquals(1509, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 2030;
      ComplexImage complexImage0 = new ComplexImage(2030, 2030);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = complexImage0.X();
      assertEquals(2030, int1);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertTrue(int1 == int0);
      
      int int2 = complexImage0.Y();
      assertEquals(2030, int2);
      assertEquals(2030, complexImage0.X());
      assertEquals(2030, complexImage0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(2030, 2030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide(1.0F, (-875.2955F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 274;
      ROI rOI0 = new ROI(274, 274, 274, 274);
      assertEquals(274, rOI0.uy());
      assertEquals(274, rOI0.ux());
      assertEquals(274, rOI0.lx());
      assertEquals(274, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = complexImage1.magnitudeImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(16, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage2);
      
      float float0 = realGrayImage2.addSum();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(16, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      float float1 = realGrayImage1.addSum();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float1, float0, 0.01F);
      
      complexImage0.setImag(realGrayImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage3 = complexImage2.real();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNull(realGrayImage3);
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(1488, 1, 1251.65F, 32767.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(15, 7, (float) 7, 1953.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 2;
      int int1 = (-857);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-857), (-857), (float) (-857), (float) 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(23, 1508);
      assertEquals(1508, complexImage0.Y());
      assertEquals(23, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = (-3549);
      // Undeclared exception!
      try { 
        complexImage0.set(23, (-815), 846.6F, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.max();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage2 = complexImage0.add(0.0F, (-1100.4803F));
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, realGrayImage1.X());
      assertEquals(1.9376912E7, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(17607.686F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1100.4803F, realGrayImage1.min(), 0.01F);
      assertEquals(17607.686F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1100.4803F, realGrayImage1.max(), 0.01F);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      
      ComplexImage complexImage3 = new ComplexImage(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      
      complexImage2.multiply(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      
      RealGrayImage realGrayImage2 = complexImage0.real();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(16, realGrayImage2.X());
      assertEquals(1.9376912E7F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals((-1.9376912E7F), realGrayImage2.addSum(), 0.01F);
      assertEquals(2.3466545774592E13, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-1211057.0F), realGrayImage2.min(), 0.01F);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertNotNull(realGrayImage2);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n16:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(string0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
      
      complexImage1.setImag(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.min();
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }
}
