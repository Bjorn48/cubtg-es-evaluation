/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:28:08 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.Backbone;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.IBackboneProgressListener;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Backbone_ESTest extends Backbone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      LightFactory lightFactory0 = new LightFactory();
      int[] intArray0 = new int[22];
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[2];
      intArray0[0] = (-38);
      intArray0[1] = 1;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      assertEquals(38, iSolver0.realNumberOfVariables());
      
      IVecInt iVecInt1 = backbone0.compute(iSolver0, iVecInt0, iVecInt0);
      backbone0.compute(iSolver0, iVecInt0, iVecInt1);
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(solutionCounter0).nVars();
      doReturn(false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = backbone0.compute((ISolver) lexicoDecorator0, intArray0);
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, iVecInt0, 406);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[0];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      backbone0.compute(iSolver0, intArray0, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(solutionCounter0).nVars();
      doReturn(false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      int[] intArray0 = new int[2];
      IVecInt iVecInt0 = backbone0.compute((ISolver) optToSatAdapter0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      ModelIterator modelIterator0 = new ModelIterator(optToSatAdapter0, 0);
      backbone0.compute((ISolver) modelIterator0, intArray0, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[8];
      intArray0[0] = 47;
      intArray0[1] = 47;
      intArray0[2] = 1450;
      intArray0[3] = 1450;
      intArray0[4] = (-38);
      intArray0[5] = 47;
      intArray0[6] = (-843);
      intArray0[7] = (-38);
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      backbone0.compute(iSolver0, iVecInt0);
      assertEquals(1450, iSolver0.realNumberOfVariables());
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      backbone0.compute(iSolver0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[8];
      intArray0[0] = 3455;
      intArray0[1] = 3455;
      intArray0[2] = 3455;
      intArray0[3] = 3455;
      intArray0[4] = 3455;
      intArray0[5] = 3455;
      intArray0[6] = 3455;
      intArray0[7] = 3455;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      // Undeclared exception!
      backbone0.compute(iSolver0, intArray0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[6];
      intArray0[0] = 65535;
      intArray0[1] = 71;
      intArray0[2] = 71;
      intArray0[3] = 71;
      intArray0[4] = 66;
      intArray0[5] = 71;
      // Undeclared exception!
      backbone0.compute(iSolver0, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[9];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((-3314)).when(solutionCounter0).nVars();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, true);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) fullClauseSelectorSolver0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -3314
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(solutionCounter0).model();
      doReturn((int[]) null).when(solutionCounter0).modelWithInternalVariables();
      doReturn(47, 0, 0).when(solutionCounter0).nVars();
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) optToSatAdapter0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      int[] intArray0 = new int[22];
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[9];
      intArray0[0] = 47;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 47, 0).when(solutionCounter0).nVars();
      doReturn(intArray0).when(solutionCounter0).primeImplicant();
      doReturn(false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      backbone0.compute((ISolver) lexicoDecorator0, intArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsStringSolver0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        backbone0.compute((ISolver) modelIterator0, iVecInt0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2561);
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      // Undeclared exception!
      backbone0.compute(iSolver0, iVecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      String[] stringArray0 = new String[5];
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[5];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounter0;
      solutionCounterArray0[4] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(stringArray0, solutionCounterArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[0];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      iVecInt0.pop();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, iVecInt0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[9];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 47).when(solutionCounter0).nVars();
      doReturn(intArray0).when(solutionCounter0).primeImplicant();
      doReturn(false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = backbone0.compute((ISolver) lexicoDecorator0, intArray0);
      iVecInt0.shrink((-2257));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, iVecInt0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, (IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      int[] intArray0 = new int[9];
      intArray0[0] = 47;
      intArray0[2] = 47;
      intArray0[3] = 47;
      intArray0[6] = 47;
      intArray0[7] = 47;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true, false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 47).when(solutionCounter0).nVars();
      doReturn(intArray0).when(solutionCounter0).primeImplicant();
      doReturn(false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      int[] intArray1 = new int[1];
      IVecInt iVecInt0 = backbone0.compute((ISolver) lexicoDecorator0, intArray1);
      Random.setNextRandom(47);
      lexicoDecorator0.reset();
      backbone0.compute((ISolver) lexicoDecorator0, iVecInt0, iVecInt0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      String[] stringArray0 = new String[5];
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[5];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounter0;
      solutionCounterArray0[4] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(stringArray0, solutionCounterArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, (IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams(442.29267801517, 47);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2257);
      intArray0[1] = 820;
      intArray0[2] = 47;
      intArray0[3] = 47;
      intArray0[4] = 47;
      intArray0[5] = 2786;
      intArray0[6] = 47;
      intArray0[7] = 47;
      intArray0[8] = 47;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true, false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 47).when(solutionCounter0).nVars();
      doReturn(intArray0).when(solutionCounter0).primeImplicant();
      doReturn(false, false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      int[] intArray1 = new int[1];
      IVecInt iVecInt0 = backbone0.compute((ISolver) lexicoDecorator0, intArray1);
      backbone0.compute((ISolver) lexicoDecorator0, iVecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      try { 
        backbone0.compute((ISolver) statisticsSolver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(solutionCounter0).model();
      doReturn((int[]) null).when(solutionCounter0).modelWithInternalVariables();
      doReturn(0, 0).when(solutionCounter0).nVars();
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) optToSatAdapter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2257);
      intArray0[2] = 47;
      intArray0[3] = 47;
      intArray0[4] = 47;
      intArray0[5] = 2786;
      intArray0[6] = 47;
      intArray0[7] = 47;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true, false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 47).when(solutionCounter0).nVars();
      doReturn(intArray0).when(solutionCounter0).primeImplicant();
      doReturn(false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      int[] intArray1 = new int[1];
      IVecInt iVecInt0 = backbone0.compute((ISolver) lexicoDecorator0, intArray1);
      Random.setNextRandom(47);
      backbone0.compute((ISolver) lexicoDecorator0, iVecInt0, iVecInt0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solutionCounter0, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      int[] intArray0 = new int[9];
      intArray0[0] = 47;
      intArray0[2] = 47;
      intArray0[3] = 47;
      intArray0[6] = 47;
      intArray0[7] = 47;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(solutionCounter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true, false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 47).when(solutionCounter0).nVars();
      doReturn(intArray0).when(solutionCounter0).primeImplicant();
      doReturn(false, false).when(solutionCounter0).removeConstr(any(org.sat4j.specs.IConstr.class));
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      int[] intArray1 = new int[1];
      backbone0.compute((ISolver) lexicoDecorator0, intArray1);
      Random.setNextRandom(47);
      backbone0.compute((ISolver) lexicoDecorator0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[13];
      intArray0[0] = 47;
      VecInt vecInt0 = new VecInt(47, 47);
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Backbone backbone0 = Backbone.instance((IBackboneProgressListener) null, true);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
  }
}
