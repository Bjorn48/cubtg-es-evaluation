/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 20:43:55 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;
import module.Kernel;
import module.Message;
import module.MessageFactory;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import state.Action;
import state.ActionFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Message message0 = new Message("4ek7l~p523';b\\X\"h7", ",drop,", (Object) null);
      assertEquals(0L, message0.getSID());
      
      message0.sessionID = (long) (-5);
      String string0 = message0.toString();
      assertEquals("Message[id=0,session=-5,head=4ek7l~p523';b\\X\"h7,recip=,drop,,sender=null,state=1,ttl=3000,time=1392409281320,body=null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = messageFactory0.createMessage();
      message0.setDelivered(false);
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2945, ",sender=");
      message0.state = 4;
      message0.setDelivered(true);
      assertTrue(message0.delivered());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Message message0 = new Message("q_U", ",body=", "q_U");
      message0.setDelivered(true);
      assertTrue(message0.delivered());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2225, "XJ?j");
      Action action0 = new Action(3000, 480, (-1306));
      Message message1 = message0.reply(action0);
      long long0 = message1.getID();
      assertEquals(1, action0.getRefCount());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Message message0 = new Message();
      message0.setHeader("");
      assertEquals(0, Message.UNDEFINED);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Object object0 = new Object();
      Message message0 = MessageFactory.createMessage("QuJ", "QuJ", object0);
      Message message1 = message0.reply("QuJ");
      assertEquals(3000L, message0.getTTL());
      assertEquals(1L, message1.getID());
      assertEquals("QuJ", message1.getHeader());
      assertEquals(1, message0.getState());
      assertEquals(0L, message1.getSID());
      assertEquals(1, message1.getState());
      assertEquals(3000L, message1.getTTL());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-829L));
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createWarningMessage(",ttl=", objectArray0);
      Message message1 = message0.reply(objectArray0[0]);
      assertEquals(1L, message1.getID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals(3000L, message1.getTTL());
      assertEquals(0L, message1.getSID());
      assertEquals(1, message1.getState());
      assertEquals("WARNING", message1.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Message message0 = new Message((String) null, (String) null, objectArray0[2]);
      message0.set("Error removing dropped player. IDisn't a number! ", (String) null, message0.TIME_TO_LIVE);
      message0.reply("3QX9");
      assertEquals("Error removing dropped player. IDisn't a number! ", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage(":_J{IbcHcT=y*fGM");
      Object object0 = new Object();
      Message message1 = message0.reply(object0);
      Message message2 = message1.reply(":_J{IbcHcT=y*fGM");
      assertEquals(0L, message2.getSID());
      assertEquals(1, message2.getState());
      assertEquals(2L, message2.getID());
      assertEquals(3000L, message2.getTTL());
      assertEquals("KERNEL", message2.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("}y", "", (Object) "}y");
      long long0 = message0.getTimeStamp();
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("", message0.getRecipient());
      assertEquals(1392409281320L, long0);
      assertEquals(3000L, message0.getTTL());
      assertEquals("}y", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Message message0 = new Message();
      message0.timestamp = (-26L);
      long long0 = message0.getTimeStamp();
      assertEquals((-26L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Message message0 = MessageFactory.createErrorMessage("", objectArray0);
      long long0 = message0.getTTL();
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("ERROR", message0.getHeader());
      assertEquals(3000L, long0);
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Message message0 = MessageFactory.createWarningMessage(",recip=", objectArray0);
      int int0 = message0.getState();
      assertEquals(1, int0);
      assertEquals("*", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Message message0 = new Message();
      message0.state = (-2836);
      int int0 = message0.getState();
      assertEquals((-2836), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage((-5), "JOIN ");
      message0.setSender("Message[id=0,session=0,head=DROPPED,recip=*,sender=null,state=1,ttl=3000,time=1392409281320,body=ID: -5 IP: JOIN ]");
      String string0 = message0.getSender();
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", message0.getRecipient());
      assertNotNull(string0);
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertEquals("Message[id=0,session=0,head=DROPPED,recip=*,sender=null,state=1,ttl=3000,time=1392409281320,body=ID: -5 IP: JOIN ]", string0);
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage((-5), "JOIN ");
      message0.setSender("");
      String string0 = message0.getSender();
      assertEquals(3000L, message0.getTTL());
      assertEquals("", string0);
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Message message0 = new Message();
      Message message1 = message0.reply((Object) null);
      assertEquals(1, message1.getState());
      assertEquals(3000L, message1.getTTL());
      
      Message message2 = MessageFactory.createMessage("gy=6:v", (String) null, message0.body);
      long long0 = message2.getSID();
      assertEquals(3000L, message2.getTTL());
      assertEquals(1, message2.getState());
      assertEquals(1L, long0);
      assertEquals("gy=6:v", message2.getHeader());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Message message0 = new Message("4ek7l~p523';b\\X\"h7", ",drop,", (Object) null);
      message0.sessionID = (long) (-5);
      long long0 = message0.getSID();
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Message message0 = MessageFactory.createWarningMessage("bOqM~USYb", objectArray0);
      String string0 = message0.getRecipient();
      assertEquals(3000L, message0.getTTL());
      assertEquals("WARNING", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Message message0 = new Message();
      Vector<Action> vector0 = new Vector<Action>(0);
      Vector<JToolBar.Separator> vector1 = new Vector<JToolBar.Separator>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector1);
      message0.set("g/rn(B{c+", "", defaultTableModel0);
      message0.getRecipient();
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Message message0 = MessageFactory.createErrorMessage("", objectArray0);
      message0.clone();
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, message0.getTTL());
      assertEquals("ERROR", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Message message0 = new Message();
      Message message1 = message0.clone();
      assertEquals(0L, message1.getTTL());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendTo((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      try { 
        message0.sendFrom(kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      try { 
        message0.send((Module) kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Message message0 = MessageFactory.createMessage("ElRc-+d+Ia87", ":_J{IbTHcT=*fGM", object0);
      ActionFactory actionFactory0 = ActionFactory.getInstance();
      Action action0 = actionFactory0.createMoveAction(1, (byte)41, (byte)1, (byte)41);
      message0.setBody(action0);
      assertEquals(2, action0.getRefCount());
      assertEquals(0L, message0.getSID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2225, "XJ?j");
      message0.setBody("XJ?j");
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ActionFactory actionFactory0 = ActionFactory.getInstance();
      Message message0 = new Message(actionFactory0);
      assertTrue(message0.getIsConsumed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Message message0 = new Message();
      message0.consume();
      assertEquals(0, message0.getState());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Message message0 = new Message();
      assertFalse(message0.received());
      
      message0.state = 2;
      boolean boolean0 = message0.received();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Message message0 = new Message();
      boolean boolean0 = message0.received();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Message message0 = new Message();
      assertFalse(message0.delivered());
      
      message0.state = 2429;
      boolean boolean0 = message0.delivered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Message message0 = new Message();
      boolean boolean0 = message0.delivered();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(false);
      assertEquals(0, message0.getState());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Message message0 = new Message();
      Object object0 = message0.getBody();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("~*&uAe>qY R:aB=");
      Object object0 = message0.getBody();
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals("UNLOAD ~*&uAe>qY R:aB=", object0);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getHeader();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createWarningMessage(",ttl=", objectArray0);
      String string0 = message0.getHeader();
      assertNotNull(string0);
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("WARNING", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTTL();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createWarningMessage(",ttl=", objectArray0);
      assertEquals("*", message0.getRecipient());
      
      message0.setRecipient("VPGaM$zy");
      assertEquals("VPGaM$zy", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Action action0 = new Action(3000, 0, 0);
      Message message0 = new Message((String) null, action0);
      assertEquals(1, action0.getRefCount());
      assertEquals(0L, message0.getID());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getRecipient();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Message message0 = new Message();
      try { 
        message0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // modnull,msg=Message[id=0,session=0,head=null,recip=null,sender=null,state=0,ttl=0,time=0,body=null]: no source module
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.send((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Message message0 = MessageFactory.createErrorMessage("", objectArray0);
      Message message1 = new Message("textmessage", message0);
      assertEquals(2, message0.getRefCount());
      
      message1.consume();
      assertEquals(1L, message1.getSID());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      message0.sendTo(kernel0);
      assertFalse(message0.getIsConsumed());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Message message0 = new Message("4ek7l~p523';b\\X\"h7", ",drop,", (Object) null);
      long long0 = message0.getSID();
      assertEquals("4ek7l~p523';b\\X\"h7", message0.getHeader());
      assertEquals(",drop,", message0.getRecipient());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, message0.getState());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Message message0 = new Message();
      int int0 = message0.getState();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getSender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTimeStamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendFrom((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }
}
