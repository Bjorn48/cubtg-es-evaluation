/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:33:22 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "bS-";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(2, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      
      Object object0 = vec1.get(1);
      assertEquals("bS-", object0);
      assertNotNull(object0);
      assertEquals(2, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      
      boolean boolean0 = vec0.equals("bS-");
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Integer> vec2 = new Vec<Integer>(1, (Integer) null);
      assertNotNull(vec2);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      
      boolean boolean1 = vec2.equals(vec1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Integer integer0 = Integer.valueOf((-600));
      assertEquals((-600), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1542);
      assertEquals(1542, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = (-1787);
      Integer integer2 = Integer.valueOf((-1787));
      assertEquals((-1787), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      vec2.growTo(509, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(509, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Integer integer3 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = Integer.valueOf((-880));
      assertEquals((-880), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      IVec<Integer> iVec0 = vec2.push(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(iVec0);
      assertFalse(iVec0.isEmpty());
      assertEquals(510, iVec0.size());
      assertEquals(510, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vec2.sortUnique(comparator0);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Comparable<Object>> vec3 = new Vec<Comparable<Object>>();
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      IVec<Comparable<Object>> iVec1 = vec3.clone();
      assertNotNull(iVec1);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertEquals(0, iVec1.size());
      assertTrue(iVec1.isEmpty());
      
      Vec<String> vec4 = new Vec<String>(stringArray0);
      assertTrue(vec4.equals((Object)vec1));
      assertNotNull(vec4);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec4.size());
      assertFalse(vec4.isEmpty());
      
      // Undeclared exception!
      try { 
        vec4.delete((-976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -976
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1337);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Integer integer0 = Integer.valueOf(1366);
      assertEquals(1366, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Vec<Integer> vec2 = new Vec<Integer>(integerArray0);
      assertNotNull(vec2);
      assertEquals(3, integerArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(3, vec2.size());
      
      Integer integer1 = Integer.valueOf((int) integerArray0[1]);
      assertEquals(1366, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      String string0 = integerArray0[2].toString();
      assertEquals("1366", string0);
      assertNotNull(string0);
      assertEquals(3, integerArray0.length);
      
      vec2.removeFromLast(integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      String string0 = vec1.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Comparable<String>> vec2 = new Vec<Comparable<String>>(587);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      int int0 = vec2.size();
      assertEquals(0, int0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>();
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p#UK&yhGn[h|;";
      stringArray0[1] = "";
      stringArray0[2] = "p#UK&yhGn[h|;";
      Vec<String> vec4 = new Vec<String>(stringArray0);
      assertNotNull(vec4);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec4.size());
      assertFalse(vec4.isEmpty());
      
      // Undeclared exception!
      try { 
        vec4.removeFromLast("p#UK&yhGn[h|;");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(447);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(673, vec1);
      assertNotNull(vec2);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(673, vec2.size());
      
      vec2.growTo(1316, vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1316, vec2.size());
      assertFalse(vec2.isEmpty());
      
      String string0 = vec2.toString();
      assertNotNull(string0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1316, vec2.size());
      assertFalse(vec2.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.remove(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = integer0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(1902);
      assertEquals(1902, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      String string1 = integer2.toString();
      assertEquals("0", string1);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      integerArray0[1] = integer2;
      Integer integer3 = Integer.valueOf(720);
      assertEquals(720, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(714);
      assertEquals(714, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer integer5 = Integer.valueOf(0);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      String string2 = integer4.toString();
      assertEquals("714", string2);
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      integerArray0[2] = integer5;
      Integer integer6 = new Integer((-3371));
      assertEquals((-3371), (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[3] = integer6;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertNotNull(vec1);
      assertEquals(4, integerArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      
      // Undeclared exception!
      try { 
        vec0.set(0, vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2732, vec0);
      assertNotNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2732, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec1.growTo(2732, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2732, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2732, vec0);
      assertNotNull(vec2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2732, vec2.size());
      
      String string0 = vec2.toString();
      assertNotNull(string0);
      assertNotSame(vec2, vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2732, vec2.size());
      
      Vec<String> vec3 = new Vec<String>(2732);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<Vec<String>> vec4 = new Vec<Vec<String>>(2732, vec3);
      assertNotNull(vec4);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertEquals(2732, vec4.size());
      assertFalse(vec4.isEmpty());
      
      Integer integer0 = new Integer(668);
      assertEquals(668, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec5 = new Vec<Integer>(2732, integer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec0 = new Vec<Object>(0, object0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(15, vec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Vec<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Vec<Object>>) toLongFunction0);
      assertNotNull(comparator0);
      
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Vec<Object>> comparator1 = comparator0.thenComparingInt(toIntFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertNotNull(comparator1);
      
      vec1.sort(comparator1);
      assertFalse(comparator0.equals((Object)comparator1));
      assertFalse(comparator1.equals((Object)comparator0));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      
      vec1.shrink(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      
      Vec<String> vec2 = new Vec<String>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      IVec<String> iVec0 = vec2.push("0");
      assertNotNull(iVec0);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VG";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(1, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(0, vec1);
      assertNotNull(vec2);
      assertEquals(1, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertEquals(1, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      // Undeclared exception!
      try { 
        vec2.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "`=WldxdKbb)7>~>x";
      Vec<String> vec0 = new Vec<String>(0, "`=WldxdKbb)7>~>x");
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.shrinkTo(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      // Undeclared exception!
      try { 
        vec2.removeFromLast(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(1417, readOnlyVec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1417, vec1.size());
      
      vec0.shrinkTo(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<ReadOnlyVec<String>> comparator0 = (Comparator<ReadOnlyVec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.selectionSort(2188, 0, comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1417, vec1.size());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(1417, 0, comparator1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator1;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) comparator1;
      objectArray0[4] = (Object) readOnlyVec0;
      objectArray0[5] = (Object) comparator1;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertNotNull(vec2);
      assertEquals(6, objectArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(6, vec2.size());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sort(0, 0, comparator2);
      assertEquals(6, objectArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(6, vec2.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(15);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ReadOnlyVec<ReadOnlyVec<Object>> readOnlyVec0 = new ReadOnlyVec<ReadOnlyVec<Object>>(vec0);
      assertNotNull(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      IVec<ReadOnlyVec<Object>> iVec0 = readOnlyVec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<ReadOnlyVec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<String> iVec0 = vec0.push("le");
      assertNotNull(iVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      
      Iterator<String> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.insertFirst("~HAM5>0GH(?p<^fMGG");
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      vec0.moveTo(15, 15);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>(15);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.ensure((-1));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.clear();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.clear();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Integer integer0 = new Integer(4150);
      assertEquals(4150, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = vec1.indexOf(integer0);
      assertEquals((-1), int0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.selectionSort(4150, 4150, (Comparator<Integer>) null);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>(4150);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Object[] objectArray0 = vec2.toArray();
      assertNotNull(objectArray0);
      assertEquals(4150, objectArray0.length);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      int int1 = vec2.hashCode();
      assertFalse(int1 == int0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0, vec1);
      assertTrue(vec2.equals((Object)vec0));
      assertNotNull(vec2);
      assertEquals(2, objectArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      vec0.moveTo((IVec<Vec<Object>>) vec2);
      assertTrue(vec0.equals((Object)vec2));
      assertTrue(vec2.equals((Object)vec0));
      assertNotSame(vec0, vec2);
      assertNotSame(vec2, vec0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        vec0.remove(vec1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3105, "M|\"+1");
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(3105, vec0.size());
      
      vec0.shrink(0);
      assertFalse(vec0.isEmpty());
      assertEquals(3105, vec0.size());
      
      vec0.moveTo(0, 0);
      assertFalse(vec0.isEmpty());
      assertEquals(3105, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0);
      assertTrue(vec2.equals((Object)vec1));
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      vec1.moveTo((IVec<Vec<Object>>) vec2);
      assertTrue(vec1.equals((Object)vec2));
      assertTrue(vec2.equals((Object)vec1));
      assertNotSame(vec1, vec2);
      assertNotSame(vec2, vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<Object>[] vecArray0 = vec1.toArray();
      assertTrue(vec1.equals((Object)vec2));
      assertNotNull(vecArray0);
      assertNotSame(vec1, vec2);
      assertEquals(0, vecArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Integer> vec3 = new Vec<Integer>();
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Integer integer0 = new Integer((-2374));
      assertEquals((-2374), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals((-2374), int0);
      
      // Undeclared exception!
      try { 
        vec3.removeFromLast((Integer) (-2374));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort((-1221), (-1221), comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1792);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      ReadOnlyVec<Vec<Object>> readOnlyVec0 = new ReadOnlyVec<Vec<Object>>(vec1);
      assertNotNull(readOnlyVec0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.copyTo((IVec<Vec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.ensure(654);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = vec0.indexOf("");
      assertEquals((-1), int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(2732);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2732, vec1);
      assertNotNull(vec2);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(2732, vec2.size());
      assertFalse(vec2.isEmpty());
      
      vec2.growTo(2732, vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(2732, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(2732);
      assertFalse(vec3.equals((Object)vec2));
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      Vec<Integer> vec4 = new Vec<Integer>(integerArray0);
      assertNotNull(vec4);
      assertEquals(2, integerArray0.length);
      assertFalse(vec4.isEmpty());
      assertEquals(2, vec4.size());
      
      Integer integer1 = Integer.valueOf(3138);
      assertEquals(3138, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String string0 = integer1.toString();
      assertEquals("3138", string0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        vec4.removeFromLast(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vec<Comparable<Integer>> vec0 = new Vec<Comparable<Integer>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Comparable<Integer>> readOnlyVec0 = new ReadOnlyVec<Comparable<Integer>>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Comparable<Integer>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = 582;
      vec0.shrinkTo(582);
      assertEquals(582, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer0 = new Integer(582);
      assertEquals(582, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        vec0.insertFirstWithShifting(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d_+Ay.";
      stringArray0[1] = ",";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String string0 = vec0.toString();
      assertEquals("d_+Ay.,,", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<Vec<String>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>((IVec<Object>) null);
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Object>> vec1 = null;
      try {
        vec1 = new Vec<ReadOnlyVec<Object>>((-1), readOnlyVec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(447);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      String string0 = vec2.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>();
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "p#UK&yhGn[h|;";
      stringArray0[4] = "";
      Vec<String> vec4 = new Vec<String>(stringArray0);
      assertNotNull(vec4);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec4.size());
      assertFalse(vec4.isEmpty());
      
      // Undeclared exception!
      try { 
        vec4.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.copyTo((IVec<Comparable<Object>>) vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      String string0 = "";
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ReadOnlyVec<Object>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super ReadOnlyVec<Object>>) toDoubleFunction0);
      assertNotNull(comparator0);
      
      vec1.sortUnique(comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      boolean boolean0 = vec1.equals("");
      assertFalse(boolean0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        vec1.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(2704);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      Vec<Comparable<Integer>> vec1 = new Vec<Comparable<Integer>>(comparableArray0);
      assertNotNull(vec1);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      String string0 = vec1.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      IVec<Comparable<Integer>> iVec0 = vec1.push((Comparable<Integer>) null);
      assertNotNull(iVec0);
      assertEquals(0, comparableArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      Integer integer0 = new Integer(2704);
      assertEquals(2704, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        vec1.contains(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer integer0 = new Integer(582);
      assertEquals(582, (int)integer0);
      assertNotNull(integer0);
      
      vec0.unsafePush("");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Integer integer1 = new Integer(2691);
      assertEquals(2691, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.remove("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Vec<String> vec0 = new Vec<String>(0, "cNGg[(K~iq8OAYGZ.N~");
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        vec0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(2732);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2732, vec1);
      assertNotNull(vec2);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(2732, vec2.size());
      assertFalse(vec2.isEmpty());
      
      vec2.growTo(2732, vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(2732, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(2732, vec1);
      assertNotNull(vec3);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(vec3.isEmpty());
      assertEquals(2732, vec3.size());
      
      String string0 = vec3.toString();
      assertNotNull(string0);
      assertNotSame(vec3, vec2);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(vec3.isEmpty());
      assertEquals(2732, vec3.size());
      
      // Undeclared exception!
      try { 
        vec0.remove(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(3241, integer0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(3241, vec0.size());
      
      boolean boolean0 = vec0.equals(integer0);
      assertFalse(boolean0);
      assertFalse(vec0.isEmpty());
      assertEquals(3241, vec0.size());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'U_n%MbKf";
      stringArray0[1] = "6]-N_F+E";
      stringArray0[2] = "";
      stringArray0[3] = "S`Rysg>Z";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "0>U;LbRLcg-R";
      stringArray0[7] = "<k?.eJVp%n%]G4?udq";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(8, stringArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec0.moveTo(0, 599);
      assertFalse(vec0.isEmpty());
      assertEquals(3241, vec0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(2732);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2732, vec1);
      assertNotNull(vec2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(2732, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<String> vec3 = null;
      try {
        vec3 = new Vec<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(613, "L");
      assertNotNull(vec1);
      assertEquals(613, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec1.insertFirst("L");
      assertEquals(614, vec1.size());
      assertFalse(vec1.isEmpty());
      
      int int0 = vec1.indexOf(",");
      assertEquals((-1), int0);
      assertEquals(614, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(2732);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2732, vec1);
      assertNotNull(vec2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(2732, vec2.size());
      
      vec2.growTo(2732, vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(2732, vec2.size());
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(2732);
      assertFalse(vec3.equals((Object)vec2));
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(2732, vec1);
      assertFalse(vec4.equals((Object)vec3));
      assertNotNull(vec4);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(2732, vec4.size());
      assertFalse(vec4.isEmpty());
      
      String string0 = vec4.toString();
      assertFalse(vec4.equals((Object)vec3));
      assertNotNull(string0);
      assertNotSame(vec4, vec3);
      assertNotSame(vec4, vec2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(2732, vec4.size());
      assertFalse(vec4.isEmpty());
      
      // Undeclared exception!
      vec4.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<Comparable<Object>> vec1 = new Vec<Comparable<Object>>(0, comparable0);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.ensure(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparable<Object>[] comparableArray0 = vec1.toArray();
      assertNotNull(comparableArray0);
      assertEquals(0, comparableArray0.length);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Integer> vec2 = new Vec<Integer>(1221, (Integer) null);
      assertNotNull(vec2);
      assertEquals(1221, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vec2.sort(0, 1221, comparator0);
      assertEquals(1221, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(0, "TpV-lA6AMZ},c");
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(0, 0, comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.insertFirst((String) null);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      IVec<Object> iVec0 = vec2.push(vec0);
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(iVec0);
      assertNotNull(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      
      vec0.insertFirst(readOnlyVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      
      Integer[] integerArray0 = new Integer[3];
      String string0 = Integer.toBinaryString((-1172));
      assertEquals("11111111111111111111101101101100", string0);
      assertNotNull(string0);
      
      integerArray0[0] = (Integer) (-1172);
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = integer0.intValue();
      assertEquals(0, int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      integerArray0[1] = (Integer) 0;
      Integer integer1 = new Integer((-1657));
      assertEquals((-1657), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      Vec<Integer> vec3 = new Vec<Integer>(integerArray0);
      assertNotNull(vec3);
      assertEquals(3, integerArray0.length);
      assertEquals(3, vec3.size());
      assertFalse(vec3.isEmpty());
      
      vec3.shrinkTo(367);
      assertEquals(3, integerArray0.length);
      assertEquals(367, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(comparator1);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>(5, (ReadOnlyVec<String>) null);
      assertNotNull(vec4);
      assertEquals(5, vec4.size());
      assertFalse(vec4.isEmpty());
      
      vec4.copyTo((IVec<ReadOnlyVec<String>>) vec4);
      assertFalse(vec4.isEmpty());
      assertEquals(10, vec4.size());
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec3.sortUnique(comparator2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 183
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      Vec<Object> vec0 = new Vec<Object>(0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.shrink(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer integer0 = Integer.valueOf(412);
      assertEquals(412, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Vec<Integer> vec1 = new Vec<Integer>(1391, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      Object object0 = vec1.last();
      assertEquals(1, object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      vec0.unsafePush(object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      Integer integer2 = new Integer(563);
      assertEquals(563, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertNotNull(integer2);
      
      Vec<String> vec2 = null;
      try {
        vec2 = new Vec<String>((-1), "rXfX5UmA=<]('XWy?<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = (-4797);
      Integer integer0 = Integer.valueOf((-4797));
      assertEquals((-4797), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = (-1128);
      Integer integer1 = Integer.valueOf((-1128));
      assertEquals((-1128), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(767);
      assertEquals(767, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(767);
      assertEquals(767, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      
      String string0 = integer3.toString();
      assertEquals("767", string0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(string0);
      
      vec0.insertFirstWithShifting(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.sort((Comparator<Integer>) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Object> vec1 = null;
      try {
        vec1 = new Vec<Object>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3105, "M|\"+1");
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(3105, vec0.size());
      
      vec0.shrink(0);
      assertFalse(vec0.isEmpty());
      assertEquals(3105, vec0.size());
      
      vec0.moveTo(0, 0);
      assertFalse(vec0.isEmpty());
      assertEquals(3105, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0);
      assertTrue(vec2.equals((Object)vec1));
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      vec1.moveTo((IVec<Vec<Object>>) vec2);
      assertTrue(vec1.equals((Object)vec2));
      assertTrue(vec2.equals((Object)vec1));
      assertNotSame(vec1, vec2);
      assertNotSame(vec2, vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<String> vec3 = new Vec<String>(0);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<String> vec4 = new Vec<String>(0, "M|\"+1");
      assertTrue(vec4.equals((Object)vec3));
      assertNotNull(vec4);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      
      Vec<String> vec5 = new Vec<String>();
      assertTrue(vec5.equals((Object)vec4));
      assertTrue(vec5.equals((Object)vec3));
      assertNotNull(vec5);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      
      Vec<String> vec6 = new Vec<String>(0, "R<{fx\u0001/");
      assertTrue(vec6.equals((Object)vec3));
      assertTrue(vec6.equals((Object)vec4));
      assertTrue(vec6.equals((Object)vec5));
      assertNotNull(vec6);
      assertEquals(0, vec6.size());
      assertTrue(vec6.isEmpty());
      
      Vec<String> vec7 = new Vec<String>();
      assertTrue(vec7.equals((Object)vec5));
      assertTrue(vec7.equals((Object)vec4));
      assertTrue(vec7.equals((Object)vec6));
      assertTrue(vec7.equals((Object)vec3));
      assertNotNull(vec7);
      assertEquals(0, vec7.size());
      assertTrue(vec7.isEmpty());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 2);
      vecArray0[0] = vec7;
      vecArray0[1] = vec4;
      // Undeclared exception!
      try { 
        vec0.copyTo(vecArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-|y<~1){?>w)X~47";
      stringArray0[1] = "org.sat4j.core.Vec";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "4*2B";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.shrink((-2644));
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      
      IVec<String> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      vec0.moveTo((IVec<String>) vec0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec1 = null;
      try {
        vec1 = new Vec<ReadOnlyVec<Object>>((ReadOnlyVec<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = vec0.indexOf("");
      assertEquals((-1), int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(3105, "M|\"+1");
      assertNotNull(vec0);
      assertEquals(3105, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.shrink(3105);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.moveTo(0, 0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0);
      assertTrue(vec2.equals((Object)vec1));
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      vec1.moveTo((IVec<Vec<Object>>) vec2);
      assertTrue(vec1.equals((Object)vec2));
      assertTrue(vec2.equals((Object)vec1));
      assertNotSame(vec1, vec2);
      assertNotSame(vec2, vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<String> vec3 = new Vec<String>(0);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<String> vec4 = new Vec<String>(3105, "M|\"+1");
      assertFalse(vec4.equals((Object)vec3));
      assertNotNull(vec4);
      assertEquals(3105, vec4.size());
      assertFalse(vec4.isEmpty());
      
      Vec<String> vec5 = new Vec<String>();
      assertTrue(vec5.equals((Object)vec3));
      assertFalse(vec5.equals((Object)vec4));
      assertNotNull(vec5);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      
      Vec<String> vec6 = new Vec<String>(3105, "R<{fx\u0001/");
      assertFalse(vec6.equals((Object)vec5));
      assertFalse(vec6.equals((Object)vec4));
      assertFalse(vec6.equals((Object)vec3));
      assertNotNull(vec6);
      assertEquals(3105, vec6.size());
      assertFalse(vec6.isEmpty());
      
      Vec<String> vec7 = new Vec<String>();
      assertFalse(vec7.equals((Object)vec6));
      assertTrue(vec7.equals((Object)vec3));
      assertFalse(vec7.equals((Object)vec4));
      assertTrue(vec7.equals((Object)vec5));
      assertNotNull(vec7);
      assertEquals(0, vec7.size());
      assertTrue(vec7.isEmpty());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 2);
      vecArray0[0] = vec7;
      vecArray0[1] = vec4;
      vec0.copyTo(vecArray0);
      assertEquals(2, vecArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<ReadOnlyVec<String>> vec8 = new Vec<ReadOnlyVec<String>>();
      assertNotNull(vec8);
      assertTrue(vec8.isEmpty());
      assertEquals(0, vec8.size());
      
      vec8.hashCode();
      assertTrue(vec8.isEmpty());
      assertEquals(0, vec8.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      Vec<String> vec2 = new Vec<String>(1391, "");
      assertFalse(vec2.equals((Object)vec0));
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(1391, vec2.size());
      
      vec0.clear();
      assertFalse(vec0.equals((Object)vec2));
      assertNotSame(vec0, vec2);
      assertEquals(3, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(1);
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      Vec<Object> vec4 = new Vec<Object>(stringArray0);
      assertNotNull(vec4);
      assertEquals(3, stringArray0.length);
      assertFalse(vec4.isEmpty());
      assertEquals(3, vec4.size());
      
      vec3.growTo((-1), vec4);
      assertEquals(3, stringArray0.length);
      assertFalse(vec3.isEmpty());
      assertEquals((-1), vec3.size());
      assertFalse(vec4.isEmpty());
      assertEquals(3, vec4.size());
      
      vec3.hashCode();
      assertFalse(vec3.isEmpty());
      assertEquals((-1), vec3.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      objectArray0[0] = (Object) integer0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      boolean boolean0 = vec1.contains(object0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VG";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertNotNull(vec2);
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      vec2.insertFirstWithShifting("Fb+XrjB);P<(./u7");
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>();
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      int int1 = (-2379);
      Comparator<Vec<Integer>> comparator0 = (Comparator<Vec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sort(0, (-2379), comparator0);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>();
      assertNotNull(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<Object>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Vec<Object>>) toDoubleFunction0);
      assertNotNull(comparator1);
      
      // Undeclared exception!
      try { 
        vec4.sort((-2379), (-1693), comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2036
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      String string0 = Integer.toBinaryString(1);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String string1 = Integer.toBinaryString(1);
      assertEquals("1", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      integerArray0[0] = (Integer) 1;
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      String string2 = Integer.toBinaryString(1726);
      assertEquals("11010111110", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Integer.toBinaryString(509);
      assertEquals("111111101", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Integer.toBinaryString(509);
      assertEquals("111111101", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = Integer.toBinaryString(509);
      assertEquals("111111101", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      integerArray0[3] = (Integer) 509;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(4, integerArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(4, vec0.size());
      
      Integer integer2 = vec0.last();
      assertEquals(509, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(4, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(509);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.delete(1726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1726
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 1548;
      int int1 = 101;
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1548, vec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1548, vec1.size());
      
      Integer integer0 = Integer.valueOf(3966);
      assertEquals(3966, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      String string0 = integer0.toString();
      assertEquals("3966", string0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(string0);
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Vec<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Vec<Object>>) toLongFunction0);
      assertNotNull(comparator0);
      
      // Undeclared exception!
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = Integer.valueOf((-4797));
      assertEquals((-4797), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1128));
      assertEquals((-1128), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(767);
      assertEquals(767, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(767);
      assertEquals(767, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      String string0 = integer3.toString();
      assertEquals("767", string0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(string0);
      
      vec0.insertFirstWithShifting(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertNotNull(vec1);
      assertEquals(0, readOnlyVecArray0.length);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.shrinkTo(1162);
      assertEquals(0, readOnlyVecArray0.length);
      assertEquals(1162, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>(767);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      assertNotNull(readOnlyVec0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(1162);
      assertFalse(vec3.equals((Object)vec1));
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      vec3.growTo((-1199), readOnlyVec0);
      assertFalse(vec3.equals((Object)vec1));
      assertNotSame(vec3, vec1);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals((-1199), vec3.size());
      assertFalse(vec3.isEmpty());
      
      vec3.sortUnique((Comparator<ReadOnlyVec<Object>>) null);
      assertFalse(vec3.equals((Object)vec1));
      assertNotSame(vec3, vec1);
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Vec<Integer> vec4 = new Vec<Integer>();
      assertFalse(vec4.equals((Object)vec0));
      assertNotNull(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      // Undeclared exception!
      try { 
        vec4.copyTo((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 2257;
      Vec<Object> vec0 = new Vec<Object>(2257);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.sort((Comparator<Object>) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.sortUnique((Comparator<Object>) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<Object> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2257, vec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(2257, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Iterator<Vec<Object>> iterator0 = vec1.iterator();
      assertNotNull(iterator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(2257, vec1.size());
      assertFalse(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.delete((-939));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -939
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VG";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertNotNull(vec2);
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      vec2.insertFirstWithShifting("Fb+XrjB);P<(./u7");
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      
      Vec<Vec<Integer>> vec3 = new Vec<Vec<Integer>>();
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      vec3.insertFirstWithShifting(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Comparator<Vec<Integer>> comparator0 = (Comparator<Vec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sort(0, (-2379), comparator0);
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>();
      assertNotNull(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<Object>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Vec<Object>>) toDoubleFunction0);
      assertNotNull(comparator1);
      
      IVec<String> iVec0 = vec2.clone();
      assertNotNull(iVec0);
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(2, iVec0.size());
      
      int int0 = vec2.indexOf("VG");
      assertEquals(1, int0);
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 3);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      Vec<Vec<Integer>> vec5 = new Vec<Vec<Integer>>(vecArray0);
      assertFalse(vec5.equals((Object)vec3));
      assertNotNull(vec5);
      assertEquals(3, vecArray0.length);
      assertFalse(vec5.isEmpty());
      assertEquals(3, vec5.size());
      
      Comparator<Vec<Integer>> comparator2 = (Comparator<Vec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec5.sortUnique(comparator2);
      assertTrue(vec5.equals((Object)vec3));
      assertNotSame(vec5, vec3);
      assertEquals(3, vecArray0.length);
      assertFalse(vec5.isEmpty());
      assertEquals(1, vec5.size());
      
      String string0 = vec2.toString();
      assertEquals("Fb+XrjB);P<(./u7,VG", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      
      boolean boolean0 = vec1.equals(vec0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      Vec<Integer> vec2 = new Vec<Integer>(1391);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<String> vec3 = new Vec<String>(1391);
      assertFalse(vec3.equals((Object)vec0));
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      vec1.insertFirst(vec3);
      assertFalse(vec0.equals((Object)vec3));
      assertFalse(vec3.equals((Object)vec0));
      assertNotSame(vec0, vec3);
      assertNotSame(vec3, vec0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1392, vec1.size());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Iterator<Integer> iterator0 = vec2.iterator();
      assertNotNull(iterator0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      boolean boolean0 = vec1.contains(vec0);
      assertTrue(boolean0);
      assertFalse(vec0.equals((Object)vec3));
      assertNotSame(vec0, vec3);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1392, vec1.size());
      
      Iterator<String> iterator1 = vec0.iterator();
      assertFalse(vec0.equals((Object)vec3));
      assertNotNull(iterator1);
      assertNotSame(vec0, vec3);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Object> vec4 = new Vec<Object>(1391, "");
      assertNotNull(vec4);
      assertEquals(1391, vec4.size());
      assertFalse(vec4.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1391, (-1849), 2727, (-1849), 2727).when(comparator0).compare(any() , any());
      vec4.sort(comparator0);
      assertEquals(1391, vec4.size());
      assertFalse(vec4.isEmpty());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2727, (-1705), 2727, (-1705), (-265)).when(comparator1).compare(any() , any());
      // Undeclared exception!
      try { 
        vec4.sortUnique(comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1391
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      Integer integer0 = new Integer(1536);
      //  // Unstable assertion: assertEquals(1536, (int)integer0);
      //  // Unstable assertion: assertNotNull(integer0);
      
      Vec<String> vec1 = new Vec<String>(654, "");
      //  // Unstable assertion: assertFalse(vec1.equals((Object)vec0));
      //  // Unstable assertion: assertNotNull(vec1);
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(654, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.remove("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 654
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Object object0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      ReadOnlyVec<ReadOnlyVec<Object>> readOnlyVec0 = new ReadOnlyVec<ReadOnlyVec<Object>>(vec0);
      assertNotNull(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<ReadOnlyVec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Integer integer0 = new Integer(613);
      assertEquals(613, (int)integer0);
      assertNotNull(integer0);
      
      vec1.insertFirstWithShifting(integer0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Object[] objectArray0 = vec1.toArray();
      assertNotNull(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = Integer.valueOf(720);
      assertEquals(720, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(714);
      assertEquals(714, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      String string0 = integer1.toString();
      assertEquals("714", string0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(string0);
      
      Vec<Integer> vec1 = new Vec<Integer>(613, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(613, vec1.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(714, (-2679), comparator0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(vec1.isEmpty());
      assertEquals(613, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      boolean boolean0 = vec2.contains(vec1);
      assertFalse(boolean0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(vec1.isEmpty());
      assertEquals(613, vec1.size());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3905, 0, 2, (-300), 2365).when(comparator1).compare(anyInt() , anyInt());
      vec1.sortUnique(comparator1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = integer1.intValue();
      assertEquals(0, int0);
      assertTrue(integer1.equals((Object)integer0));
      
      int int1 = integer0.intValue();
      assertEquals(0, int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(int1 == int0);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      
      int int2 = integer2.intValue();
      assertEquals(0, int2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = 992;
      Integer integer3 = new Integer(992);
      assertEquals(992, (int)integer3);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      int int4 = integer3.intValue();
      assertEquals(992, int4);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int3));
      assertTrue(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int4));
      assertNotNull(integer4);
      
      int int5 = integer4.intValue();
      assertEquals(0, int5);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int3));
      assertTrue(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int4));
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      
      vec0.growTo(2, (Integer) 0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2732, vec0);
      assertNotNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2732, vec1.size());
      
      String string0 = vec1.toString();
      assertNotNull(string0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2732, vec1.size());
      
      boolean boolean0 = vec0.equals("~`L");
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-5191), (-5191), 1391, (-5191), 1361).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertEquals(3, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<String> vec2 = vec1.get(240);
      assertNotNull(vec2);
      assertSame(vec0, vec2);
      assertSame(vec2, vec0);
      assertEquals(3, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(447);
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      //  // Unstable assertion: assertNotNull(vec1);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(673, vec1);
      //  // Unstable assertion: assertNotNull(vec2);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertFalse(vec2.isEmpty());
      //  // Unstable assertion: assertEquals(673, vec2.size());
      
      String string0 = vec2.toString();
      //  // Unstable assertion: assertEqualsstring0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertFalse(vec2.isEmpty());
      //  // Unstable assertion: assertEquals(673, vec2.size());
      
      int int0 = vec0.size();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>();
      //  // Unstable assertion: assertNotNull(vec3);
      //  // Unstable assertion: assertTrue(vec3.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec3.size());
      
      String[] stringArray0 = new String[5];
      stringArray
      stringArray
      stringArray
      stringArray0[3] = "p#UK&yhGn[h|;";
      stringArray
      Vec<String> vec4 = new Vec<String>(stringArray0);
      //  // Unstable assertion: assertNotNull(vec4);
      //  // Unstable assertion: assertEquals(5, stringArray0.length);
      //  // Unstable assertion: assertFalse(vec4.isEmpty());
      //  // Unstable assertion: assertEquals(5, vec4.size());
      
      // Undeclared exception!
      try { 
        vec4.removeFromLast
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "_% vrPm~|_7";
      stringArray0[2] = "org.sat4j.core.Vec";
      stringArray0[3] = "";
      stringArray0[4] = "8462w.\"";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(5, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      
      vec0.hashCode();
      assertEquals(5, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      String string0 = Integer.toBinaryString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      integerArray0[0] = (Integer) 0;
      String string1 = Integer.toBinaryString(1352);
      assertEquals("10101001000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      integerArray0[1] = (Integer) 1352;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      String string2 = Integer.toBinaryString((-1730));
      assertEquals("11111111111111111111100100111110", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Integer.toBinaryString((-1730));
      assertEquals("11111111111111111111100100111110", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      integerArray0[3] = (Integer) (-1730);
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      String string4 = Integer.toBinaryString(2737);
      assertEquals("101010110001", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Integer.toBinaryString(2737);
      assertEquals("101010110001", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = Integer.toBinaryString((-480));
      assertEquals("11111111111111111111111000100000", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = Integer.toBinaryString((-480));
      assertEquals("11111111111111111111111000100000", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = Integer.toBinaryString(0);
      assertEquals("0", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      integerArray0[5] = (Integer) 0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(6, integerArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(6, vec0.size());
      
      vec0.removeFromLast((Integer) int0);
      assertEquals(6, integerArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Comparable<Integer>> vec1 = new Vec<Comparable<Integer>>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      IVec<Comparable<Integer>> iVec0 = vec1.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      vec1.moveTo((IVec<Comparable<Integer>>) vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirst("org.sat4j.core.ReadOnlyVec");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      int int0 = vec0.indexOf("");
      assertEquals((-1), int0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer integer0 = Integer.valueOf((-4797));
      assertEquals((-4797), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1128));
      assertEquals((-1128), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(767);
      assertEquals(767, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(767);
      assertEquals(767, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      String string0 = integer3.toString();
      assertEquals("767", string0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(string0);
      
      vec0.insertFirstWithShifting(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertNotNull(vec1);
      assertEquals(0, readOnlyVecArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.shrinkTo(1162);
      assertEquals(0, readOnlyVecArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1162, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>(767);
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(1162);
      assertFalse(vec3.equals((Object)vec1));
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      vec3.growTo((-1199), readOnlyVec0);
      assertFalse(vec3.equals((Object)vec1));
      assertNotSame(vec3, vec1);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals((-1199), vec3.size());
      assertFalse(vec3.isEmpty());
      
      vec3.sortUnique((Comparator<ReadOnlyVec<Object>>) null);
      assertFalse(vec3.equals((Object)vec1));
      assertNotSame(vec3, vec1);
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      
      vec2.hashCode();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>();
      assertNotNull(vec4);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      
      boolean boolean0 = vec4.equals(vec1);
      assertFalse(boolean0);
      assertFalse(vec1.equals((Object)vec3));
      assertNotSame(vec1, vec3);
      assertEquals(0, readOnlyVecArray0.length);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1162, vec1.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "";
      Vec<String> vec0 = null;
      try {
        vec0 = new Vec<String>((-2929));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertEquals(1391, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<String> vec2 = vec1.get(240);
      assertNotNull(vec2);
      assertSame(vec0, vec2);
      assertSame(vec2, vec0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1391, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(2, (ReadOnlyVec<String>) null);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      IVec<ReadOnlyVec<String>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      int int0 = vec0.size();
      assertEquals(2, int0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertEquals(1391, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertEquals(3, stringArray0.length);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.get(1391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-485);
      Integer integer0 = new Integer((-485));
      assertEquals((-485), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = integer0.intValue();
      assertEquals((-485), int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      integerArray0[0] = (Integer) (-485);
      int int2 = 15;
      String string0 = Integer.toBinaryString(15);
      assertEquals("1111", string0);
      assertNotNull(string0);
      
      String string1 = Integer.toBinaryString(15);
      assertEquals("1111", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      integerArray0[1] = (Integer) 15;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(2, integerArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.remove(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Iterator<Vec<String>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(1, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Integer integer0 = new Integer(613);
      assertEquals(613, (int)integer0);
      assertNotNull(integer0);
      
      vec1.insertFirstWithShifting(integer0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<String> vec2 = new Vec<String>(613, "ZJrv^KI-i](c_");
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(613, vec2.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 613, (-1212), (-1212), 0).when(comparator0).compare(anyString() , anyString());
      vec2.sortUnique(comparator0);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(3199);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      // Undeclared exception!
      try { 
        vec3.get(3199);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(1, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VG";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(1, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      vec1.insertFirstWithShifting("Fb+XrjB);P<(./u7");
      assertEquals(1, stringArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Vec<Integer>> vec2 = new Vec<Vec<Integer>>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      int int0 = vec1.indexOf("VG");
      assertEquals(1, int0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      
      int int1 = vec1.size();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 3);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      assertNotNull(readOnlyVec0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(2, readOnlyVec0.size());
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertNotNull(readOnlyVec1);
      assertEquals(1, stringArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(2, readOnlyVec0.size());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec1);
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertNotNull(readOnlyVec2);
      assertEquals(1, stringArray0.length);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, readOnlyVec2.size());
      assertFalse(readOnlyVec2.isEmpty());
      
      readOnlyVecArray0[2] = readOnlyVec2;
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertNotNull(vec3);
      assertEquals(3, readOnlyVecArray0.length);
      assertEquals(3, vec3.size());
      assertFalse(vec3.isEmpty());
      
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ReadOnlyVec<String>> comparator0 = Comparator.comparingInt((ToIntFunction<? super ReadOnlyVec<String>>) toIntFunction0);
      assertNotNull(comparator0);
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ReadOnlyVec<String>> comparator1 = comparator0.thenComparingLong(toLongFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertNotNull(comparator1);
      
      // Undeclared exception!
      try { 
        vec3.selectionSort((-2833), 2, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertEquals(1391, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Vec<Integer> vec2 = new Vec<Integer>(1391);
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<String> vec3 = new Vec<String>(stringArray0);
      assertTrue(vec3.equals((Object)vec0));
      assertNotNull(vec3);
      assertEquals(3, stringArray0.length);
      assertFalse(vec3.isEmpty());
      assertEquals(3, vec3.size());
      
      boolean boolean0 = vec3.isEmpty();
      assertFalse(boolean0);
      assertTrue(vec3.equals((Object)vec0));
      assertNotSame(vec3, vec0);
      assertEquals(3, stringArray0.length);
      assertFalse(vec3.isEmpty());
      assertEquals(3, vec3.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = 0;
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec0.ensure(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = Integer.valueOf(2233);
      assertEquals(2233, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(2233);
      assertEquals(2233, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(2233);
      assertEquals(2233, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      int int1 = 747;
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.copyTo((IVec<Integer>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      String string0 = Integer.toBinaryString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 1352;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      String string1 = Integer.toBinaryString((-1730));
      assertEquals("11111111111111111111100100111110", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Integer.toBinaryString((-1730));
      assertEquals("11111111111111111111100100111110", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      integerArray0[3] = (Integer) (-1730);
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      String string3 = Integer.toBinaryString(2737);
      assertEquals("101010110001", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Integer.toBinaryString(2737);
      assertEquals("101010110001", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = Integer.toBinaryString((-480));
      assertEquals("11111111111111111111111000100000", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = Integer.toBinaryString((-480));
      assertEquals("11111111111111111111111000100000", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = Integer.toBinaryString(0);
      assertEquals("0", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      integerArray0[5] = (Integer) 0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.removeFromLast((Integer) int0);
      assertEquals(6, integerArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>(237);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      IVec<Object> iVec0 = vec1.push("11111111111111111111111000100000");
      assertNotNull(iVec0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(iVec0);
      assertNotNull(readOnlyVec0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(int0, readOnlyVec0);
      assertNotNull(vec2);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<ReadOnlyVec<Object>> comparator1 = Comparator.nullsLast((Comparator<? super ReadOnlyVec<Object>>) comparator0);
      assertNotNull(comparator1);
      
      vec2.selectionSort(1352, (-417), comparator1);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<";
      stringArray0[1] = "";
      stringArray0[2] = "101010110001";
      stringArray0[3] = "11111111111111111111100100111110";
      stringArray0[4] = "11111111111111111111100100111110";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[7] = "11111111111111111111100100111110";
      stringArray0[8] = "0";
      Vec<String> vec3 = new Vec<String>(stringArray0);
      assertNotNull(vec3);
      assertEquals(9, stringArray0.length);
      assertFalse(vec3.isEmpty());
      assertEquals(9, vec3.size());
      
      boolean boolean0 = vec3.isEmpty();
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      assertFalse(vec3.isEmpty());
      assertEquals(9, vec3.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      Vec<String> vec0 = new Vec<String>(1391, "-V|{Gao");
      assertNotNull(vec0);
      assertEquals(1391, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.shrinkTo(1370);
      assertEquals(1370, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(1373, 1350, comparator0);
      assertEquals(1370, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = vec0.indexOf("-V|{Gao");
      assertEquals(0, int0);
      assertEquals(1370, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "s8&4)-glS`B!Ng$\"G.H";
      stringArray0[1] = "*";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(2, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      vec0.growTo(0, "*");
      assertEquals(2, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(2, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec1 = null;
      try {
        vec1 = new Vec<Integer>((-1555), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec0 = new Vec<Object>(0, object0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(15, vec0);
      assertNotNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, (long)15, 1969L, (-3809L), 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Vec<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Vec<Object>>) toLongFunction0);
      assertNotNull(comparator0);
      
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-2019), 0, (-2405), (-1)).when(toIntFunction0).applyAsInt(any());
      Comparator<Vec<Object>> comparator1 = comparator0.thenComparingInt(toIntFunction0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertNotNull(comparator1);
      
      vec1.sort(comparator1);
      assertFalse(comparator0.equals((Object)comparator1));
      assertFalse(comparator1.equals((Object)comparator0));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      
      vec1.shrink(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(15, vec1.size());
      
      Vec<String> vec2 = new Vec<String>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      IVec<String> iVec0 = new Vec<String>(0);
      assertNotNull(iVec0);
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-4299));
      assertEquals((-4299), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = integer0.toString();
      assertEquals("-4299", string0);
      assertNotNull(string0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1411);
      assertEquals(1411, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = vec0.size();
      assertEquals(2, int0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d_+Ay.";
      stringArray0[1] = ",";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String string0 = vec0.toString();
      assertEquals("d_+Ay.,,", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3160)).when(comparator0).compare(anyString() , anyString());
      vec0.sort(comparator0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Integer> vec2 = new Vec<Integer>(613);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<String> vec3 = new Vec<String>(613);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<Vec<String>> vec4 = new Vec<Vec<String>>(3589, vec3);
      assertNotNull(vec4);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertFalse(vec4.isEmpty());
      assertEquals(3589, vec4.size());
      
      vec4.insertFirst(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertFalse(vec4.isEmpty());
      assertEquals(3590, vec4.size());
      
      Iterator<Integer> iterator1 = vec2.iterator();
      assertNotNull(iterator1);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<String> vec5 = new Vec<String>();
      assertTrue(vec5.equals((Object)vec3));
      assertNotNull(vec5);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      
      boolean boolean0 = vec4.contains(vec5);
      assertTrue(boolean0);
      assertTrue(vec3.equals((Object)vec5));
      assertTrue(vec5.equals((Object)vec3));
      assertNotSame(vec3, vec5);
      assertNotSame(vec5, vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertFalse(vec4.isEmpty());
      assertEquals(3590, vec4.size());
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      
      Iterator<String> iterator2 = vec5.iterator();
      assertTrue(vec5.equals((Object)vec3));
      assertNotNull(iterator2);
      assertNotSame(vec5, vec3);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.sat4j.core.Vec$1";
      stringArray0[2] = "org.sat4j.core.Vec$1";
      stringArray0[3] = "+BP[n";
      stringArray0[4] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(5, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      
      vec0.pop();
      assertEquals(5, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(4, vec0.size());
      
      vec0.clear();
      assertEquals(5, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = (-1946);
      vec0.insertFirst("'G~6,6PrXY");
      assertEquals(5, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1946));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(613);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<String> vec2 = new Vec<String>(613, "");
      assertFalse(vec2.equals((Object)vec1));
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(613, vec2.size());
      
      int int0 = vec2.indexOf("");
      assertEquals(0, int0);
      assertFalse(vec2.equals((Object)vec1));
      assertNotSame(vec2, vec1);
      assertFalse(vec2.isEmpty());
      assertEquals(613, vec2.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      String string0 = "?y7j\"AUS\\ljx3~J!}$";
      Vec<String> vec0 = new Vec<String>(0, "?y7j\"AUSljx3~J!}$");
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.ensure(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.unsafePush("?y7j\"AUSljx3~J!}$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.shrinkTo(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Iterator<Vec<String>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = 0;
      Vec<String> vec1 = new Vec<String>(0);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      boolean boolean0 = vec0.contains(vec1);
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        vec1.moveTo(0, (-264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -264
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String string0 = "org.sat4j.core.Vec$1";
      Vec<String> vec1 = new Vec<String>(1, "org.sat4j.core.Vec$1");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = "";
      int int0 = 134;
      // Undeclared exception!
      try { 
        vec1.unsafePush("org.sat4j.core.Vec$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.ensure(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      int int0 = vec0.indexOf(readOnlyVec0);
      assertEquals((-1), int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-77));
      assertEquals((-77), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(2092);
      assertEquals(2092, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      int int1 = integer1.intValue();
      assertEquals(2092, int1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      
      integerArray0[1] = (Integer) 2092;
      Vec<Integer> vec2 = new Vec<Integer>(integerArray0);
      assertNotNull(vec2);
      assertEquals(2, integerArray0.length);
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
      
      int int2 = vec2.hashCode();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec3 = new Vec<Object>(3078, object0);
      assertNotNull(vec3);
      assertFalse(vec3.isEmpty());
      assertEquals(3078, vec3.size());
      
      Iterator<Object> iterator0 = vec3.iterator();
      assertNotNull(iterator0);
      assertFalse(vec3.isEmpty());
      assertEquals(3078, vec3.size());
      
      Object object1 = vec3.delete(1207);
      assertNotNull(object1);
      assertSame(object1, object0);
      assertSame(object0, object1);
      assertFalse(vec3.isEmpty());
      assertEquals(3077, vec3.size());
      
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec3);
      assertNotNull(readOnlyVec1);
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(3077, readOnlyVec1.size());
      assertFalse(vec3.isEmpty());
      assertEquals(3077, vec3.size());
      
      Vec<ReadOnlyVec<Object>> vec4 = new Vec<ReadOnlyVec<Object>>(1634, readOnlyVec1);
      assertNotNull(vec4);
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(3077, readOnlyVec1.size());
      assertEquals(1634, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(3077, vec3.size());
      
      ReadOnlyVec<Object> readOnlyVec2 = vec4.last();
      assertNotNull(readOnlyVec2);
      assertSame(readOnlyVec1, readOnlyVec2);
      assertSame(readOnlyVec2, readOnlyVec1);
      assertSame(object0, object1);
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(3077, readOnlyVec1.size());
      assertEquals(1634, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(3077, readOnlyVec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(3077, vec3.size());
      
      // Undeclared exception!
      try { 
        vec1.unsafePush("G!>UnV}m_bs]A;O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-V|{Gao";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1391, vec0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2917), 1627, (-3461), (-2917), 1391).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      assertEquals(3, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<String> vec2 = vec1.get(240);
      assertNotNull(vec2);
      assertSame(vec0, vec2);
      assertSame(vec2, vec0);
      assertEquals(3, stringArray0.length);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1391, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = Integer.valueOf(871);
      assertEquals(871, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(871);
      assertEquals(871, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = integer1.intValue();
      assertEquals(871, int0);
      assertTrue(integer1.equals((Object)integer0));
      
      int int1 = integer0.intValue();
      assertEquals(871, int1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      vec0.set(0, (Integer) 871);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(2732);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2732);
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      String string0 = vec2.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.remove("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(2730);
      assertTrue(vec1.equals((Object)vec0));
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2730, vec0);
      assertTrue(vec0.equals((Object)vec1));
      assertNotNull(vec2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2730, vec2.size());
      assertFalse(vec2.isEmpty());
      
      vec2.insertFirstWithShifting(vec0);
      assertTrue(vec0.equals((Object)vec1));
      assertNotSame(vec0, vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      
      String string0 = vec2.toString();
      assertTrue(vec0.equals((Object)vec1));
      assertNotNull(string0);
      assertNotSame(vec0, vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Object> vec3 = new Vec<Object>(2721);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      vec3.insertFirstWithShifting(string0);
      assertTrue(vec0.equals((Object)vec1));
      assertNotSame(vec0, vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec0.ensure(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.equals((Object)vec0));
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>();
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      String string0 = vec3.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "BbnD8";
      objectArray0[1] = (Object) ",";
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      objectArray0[2] = (Object) vec0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertFalse(vec1.equals((Object)vec0));
      assertNotNull(vec1);
      assertEquals(4, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5);
      Vec<String> vec2 = new Vec<String>(0);
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      vecArray0[0] = vec2;
      Vec<String> vec3 = new Vec<String>(0, "BbnD8");
      assertTrue(vec3.equals((Object)vec2));
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      vecArray0[1] = vec3;
      Vec<String> vec4 = new Vec<String>();
      assertTrue(vec4.equals((Object)vec3));
      assertTrue(vec4.equals((Object)vec2));
      assertNotNull(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      vecArray0[2] = vec4;
      Vec<String> vec5 = new Vec<String>(711, "0");
      assertFalse(vec5.equals((Object)vec4));
      assertFalse(vec5.equals((Object)vec3));
      assertFalse(vec5.equals((Object)vec2));
      assertNotNull(vec5);
      assertFalse(vec5.isEmpty());
      assertEquals(711, vec5.size());
      
      vecArray0[3] = vec5;
      Vec<String> vec6 = new Vec<String>();
      assertFalse(vec6.equals((Object)vec5));
      assertTrue(vec6.equals((Object)vec3));
      assertTrue(vec6.equals((Object)vec4));
      assertTrue(vec6.equals((Object)vec2));
      assertNotNull(vec6);
      assertEquals(0, vec6.size());
      assertTrue(vec6.isEmpty());
      
      vecArray0[4] = vec6;
      // Undeclared exception!
      try { 
        vec1.copyTo(vecArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(2732);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ej|\u0005y)pzI";
      stringArray0[2] = "0d'H5|yBaK";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(3, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(3, vec1.size());
      
      vec1.insertFirst("z4|\"");
      assertEquals(3, stringArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.indexOf("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.unsafePush(")vIVL|y@P}");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(2730);
      assertFalse(vec1.equals((Object)vec0));
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2730, vec0);
      assertFalse(vec0.equals((Object)vec1));
      assertNotNull(vec2);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2730, vec2.size());
      assertFalse(vec2.isEmpty());
      
      vec2.insertFirstWithShifting(vec0);
      assertFalse(vec0.equals((Object)vec1));
      assertNotSame(vec0, vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      
      String string0 = vec2.toString();
      assertFalse(vec0.equals((Object)vec1));
      assertNotNull(string0);
      assertNotSame(vec0, vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Comparable<String>> vec3 = new Vec<Comparable<String>>(2730);
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      int int0 = vec3.size();
      assertEquals(0, int0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 6);
      Vec<Object> vec4 = new Vec<Object>(1389);
      assertNotNull(vec4);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec4);
      assertNotNull(readOnlyVec0);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec4);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertNotNull(readOnlyVec1);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec0);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertNotNull(readOnlyVec2);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      
      readOnlyVecArray0[2] = readOnlyVec2;
      IVec<Object> iVec0 = vec4.push(string0);
      assertFalse(vec0.equals((Object)vec1));
      assertNotNull(iVec0);
      assertNotSame(vec0, vec1);
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec4.size());
      assertFalse(vec4.isEmpty());
      
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(iVec0);
      assertFalse(vec0.equals((Object)vec1));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertNotNull(readOnlyVec3);
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, readOnlyVec3.size());
      assertFalse(readOnlyVec3.isEmpty());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec4.size());
      assertFalse(vec4.isEmpty());
      
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec2);
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertNotNull(readOnlyVec4);
      assertFalse(readOnlyVec4.isEmpty());
      assertEquals(1, readOnlyVec4.size());
      assertEquals(1, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1, readOnlyVec2.size());
      
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(iVec0);
      assertFalse(vec0.equals((Object)vec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec0));
      assertNotNull(readOnlyVec5);
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(2731, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(readOnlyVec5.isEmpty());
      assertEquals(1, readOnlyVec5.size());
      assertEquals(1, vec4.size());
      assertFalse(vec4.isEmpty());
      
      readOnlyVecArray0[5] = readOnlyVec5;
      Vec<ReadOnlyVec<Object>> vec5 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertNotNull(vec5);
      assertEquals(6, readOnlyVecArray0.length);
      assertFalse(vec5.isEmpty());
      assertEquals(6, vec5.size());
      
      vec5.remove(readOnlyVec4);
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertNotSame(readOnlyVec4, readOnlyVec1);
      assertNotSame(readOnlyVec4, readOnlyVec3);
      assertNotSame(readOnlyVec4, readOnlyVec5);
      assertNotSame(readOnlyVec4, readOnlyVec2);
      assertNotSame(readOnlyVec4, readOnlyVec0);
      assertNotSame(readOnlyVec0, readOnlyVec1);
      assertNotSame(readOnlyVec0, readOnlyVec3);
      assertNotSame(readOnlyVec0, readOnlyVec4);
      assertNotSame(readOnlyVec0, readOnlyVec2);
      assertNotSame(readOnlyVec0, readOnlyVec5);
      assertNotSame(readOnlyVec2, readOnlyVec4);
      assertNotSame(readOnlyVec2, readOnlyVec5);
      assertNotSame(readOnlyVec2, readOnlyVec0);
      assertNotSame(readOnlyVec2, readOnlyVec1);
      assertNotSame(readOnlyVec2, readOnlyVec3);
      assertEquals(6, readOnlyVecArray0.length);
      assertFalse(readOnlyVec4.isEmpty());
      assertEquals(1, readOnlyVec4.size());
      assertFalse(vec5.isEmpty());
      assertEquals(5, vec5.size());
      assertEquals(1, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(1, readOnlyVec2.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirstWithShifting("");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(613);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<String> iVec0 = vec0.push("le[");
      assertNotNull(iVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      Iterator<String> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.insertFirst("~HAM5>0GH(?p<^fMGG");
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      int int0 = 0;
      vec0.moveTo(0, 0);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.ensure((-1));
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      int int1 = 4150;
      vec1.clear();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.clear();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Integer integer0 = new Integer(4150);
      assertEquals(4150, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int2 = vec1.indexOf(integer0);
      assertEquals((-1), int2);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.selectionSort(4150, 4150, (Comparator<Integer>) null);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>(4150);
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Object[] objectArray0 = vec2.toArray();
      assertNotNull(objectArray0);
      assertEquals(4150, objectArray0.length);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<Vec<Object>> vec3 = null;
      try {
        vec3 = new Vec<Vec<Object>>((-1), vec2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(1, "org.sat4j.core.Vec$1");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      vec0.insertFirst(vec1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Vec<String> vec2 = new Vec<String>();
      assertFalse(vec2.equals((Object)vec1));
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      vec0.insertFirst(vec2);
      assertFalse(vec2.equals((Object)vec1));
      assertNotSame(vec2, vec1);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<Object> vec3 = new Vec<Object>();
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      int int0 = vec3.size();
      assertEquals(0, int0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Vec<Integer> vec4 = new Vec<Integer>(0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(vec4);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      
      // Undeclared exception!
      try { 
        vec4.shrinkTo((-204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1361, vec0);
      assertNotNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1361, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.get((-154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(70, vec0);
      assertNotNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(70, vec1.size());
      
      vec1.growTo(938, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(938, vec1.size());
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 6);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      Vec<Integer> vec2 = new Vec<Integer>(547, (Integer) null);
      assertNotNull(vec2);
      assertEquals(547, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec2.sort(0, 1352, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 676
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      int int1 = 2691;
      Integer integer0 = Integer.valueOf(2691);
      assertEquals(2691, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int2 = 0;
      Comparator<Integer> comparator0 = null;
      vec0.sort(0, 0, (Comparator<Integer>) null);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 7);
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertNotNull(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(readOnlyVec0);
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertNotNull(readOnlyVec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec1);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertNotNull(readOnlyVec2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec1);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertNotNull(readOnlyVec3);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec3.isEmpty());
      assertEquals(0, readOnlyVec3.size());
      
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec3);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertNotNull(readOnlyVec4);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec3.isEmpty());
      assertEquals(0, readOnlyVec3.size());
      assertEquals(0, readOnlyVec4.size());
      assertTrue(readOnlyVec4.isEmpty());
      
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(readOnlyVec4);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertNotNull(readOnlyVec5);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec3.isEmpty());
      assertEquals(0, readOnlyVec3.size());
      assertEquals(0, readOnlyVec4.size());
      assertTrue(readOnlyVec4.isEmpty());
      assertEquals(0, readOnlyVec5.size());
      assertTrue(readOnlyVec5.isEmpty());
      
      readOnlyVecArray0[5] = readOnlyVec5;
      ReadOnlyVec<Object> readOnlyVec6 = new ReadOnlyVec<Object>(readOnlyVec2);
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec5));
      assertNotNull(readOnlyVec6);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec6.isEmpty());
      assertEquals(0, readOnlyVec6.size());
      
      readOnlyVecArray0[6] = readOnlyVec6;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertNotNull(vec1);
      assertEquals(7, readOnlyVecArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(7, vec1.size());
      
      ReadOnlyVec<Object> readOnlyVec7 = vec1.delete(0);
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec6));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec3));
      assertNotNull(readOnlyVec7);
      assertNotSame(readOnlyVec7, readOnlyVec5);
      assertNotSame(readOnlyVec7, readOnlyVec3);
      assertNotSame(readOnlyVec7, readOnlyVec1);
      assertSame(readOnlyVec7, readOnlyVec0);
      assertNotSame(readOnlyVec7, readOnlyVec2);
      assertNotSame(readOnlyVec7, readOnlyVec4);
      assertNotSame(readOnlyVec7, readOnlyVec6);
      assertEquals(7, readOnlyVecArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertEquals(0, readOnlyVec7.size());
      assertTrue(readOnlyVec7.isEmpty());
      
      int int0 = 0;
      Vec<String> vec2 = null;
      try {
        vec2 = new Vec<String>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = integer0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      
      Vec<Integer> vec0 = new Vec<Integer>(1943, integer0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1943, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(858, vec0);
      assertNotNull(vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(1943, vec0.size());
      assertEquals(858, vec1.size());
      assertFalse(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.remove("0");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 858
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer((-1794));
      assertEquals((-1794), (int)integer0);
      assertNotNull(integer0);
      
      objectArray0[0] = (Object) integer0;
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Integer integer1 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String string0 = integer1.toString();
      assertEquals("-1", string0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(string0);
      
      vec1.unsafePush(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      vec1.shrink(1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<Object>> vec2 = null;
      try {
        vec2 = new Vec<Vec<Object>>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(55, vec0);
      //  // Unstable assertion: assertNotNull(vec1);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(55, vec1.size());
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      
      vec1.growTo(938, vec0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(938, vec1.size());
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 6);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      vecArray0[4] = vec0;
      vecArray0[5] = vec0;
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(vecArray0);
      //  // Unstable assertion: assertFalse(vec2.equals((Object)vec1));
      //  // Unstable assertion: assertNotNull(vec2);
      //  // Unstable assertion: assertEquals(6, vecArray0.length);
      //  // Unstable assertion: assertEquals(6, vec2.size());
      //  // Unstable assertion: assertFalse(vec2.isEmpty());
      
      String string0 = vec2.toString();
      //  // Unstable assertion: assertEquals(",,,,,", string0);
      //  // Unstable assertion: assertFalse(vec2.equals((Object)vec1));
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertNotSame(vec2, vec1);
      //  // Unstable assertion: assertEquals(6, vecArray0.length);
      //  // Unstable assertion: assertEquals(6, vec2.size());
      //  // Unstable assertion: assertFalse(vec2.isEmpty());
      
      Vec<Comparable<String>> vec3 = new Vec<Comparable<String>>(1316, ",,,,,");
      //  // Unstable assertion: assertNotNull(vec3);
      //  // Unstable assertion: assertEquals(1316, vec3.size());
      //  // Unstable assertion: assertFalse(vec3.isEmpty());
      
      IVec<Comparable<String>> iVec0 = vec3.push(",,,,,");
      //  // Unstable assertion: assertNotNull(iVec0);
      //  // Unstable assertion: assertEquals(1317, vec3.size());
      //  // Unstable assertion: assertFalse(vec3.isEmpty());
      //  // Unstable assertion: assertFalse(iVec0.isEmpty());
      //  // Unstable assertion: assertEquals(1317, iVec0.size());
      
      // Undeclared exception!
      try { 
        vec3.remove(",,,,,");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectArray0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.clear();
      Vec<Integer> vec1 = new Vec<Integer>(2329);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(2329, 2329, comparator0);
      assertTrue(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      vec0.iterator();
      Vec<String> vec1 = new Vec<String>(0);
      vec0.contains(vec1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      Vec<String> vec2 = vec0.get(0);
      assertNull(vec2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1548;
      Vec<Integer> vec0 = new Vec<Integer>(1548);
      vec0.ensure(101);
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1548, vec1);
      Integer integer0 = Integer.valueOf(3966);
      integer0.toString();
      vec0.insertFirst(integer0);
      vec2.pop();
      vec2.removeFromLast(vec1);
      vec2.contains(vec1);
      vec1.contains(vec2);
      String string0 = "P$.&mAKbna2\"[W~6";
      Vec<String> vec3 = new Vec<String>(101, "P$.&mAKbna2\"[W~6");
      // Undeclared exception!
      try { 
        vec1.shrinkTo((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.isEmpty();
      Vec<Integer> vec1 = new Vec<Integer>(0);
      vec0.ensure(0);
      Integer.valueOf(2233);
      Integer.valueOf(2233);
      Integer.valueOf(2233);
      vec1.iterator();
      vec1.iterator();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingDouble((ToDoubleFunction<? super Vec<Object>>) toDoubleFunction0);
      Vec<String> vec3 = new Vec<String>(0);
      vec3.clone();
      vec3.indexOf("Lg669O");
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 6);
      Vec<Integer> vec4 = new Vec<Integer>();
      vecArray0[0] = vec4;
      vecArray0[1] = vec1;
      vecArray0[2] = vec1;
      vecArray0[3] = vec1;
      vecArray0[4] = vec1;
      vecArray0[5] = vec1;
      Vec<Vec<Integer>> vec5 = new Vec<Vec<Integer>>(vecArray0);
      Comparator<Vec<Integer>> comparator0 = (Comparator<Vec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec5.sortUnique(comparator0);
      vec3.toString();
      Vec<Object> vec6 = new Vec<Object>();
      Vec<Object> vec7 = new Vec<Object>(2233);
      vec6.equals(vec7);
      IVec<Object> iVec0 = vec7.push(vec5);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(iVec0);
      Vec<ReadOnlyVec<Object>> vec8 = null;
      try {
        vec8 = new Vec<ReadOnlyVec<Object>>((-1), readOnlyVec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Integer> vec1 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec1.copyTo((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer.toBinaryString(0);
      integerArray0[0] = (Integer) 0;
      Integer.toBinaryString(1352);
      integerArray0[1] = (Integer) 1352;
      Integer integer0 = new Integer(int0);
      integerArray0[2] = integer0;
      Integer.toBinaryString((-1730));
      Integer.toBinaryString((-1730));
      integerArray0[3] = (Integer) (-1730);
      Integer integer1 = new Integer(0);
      integerArray0[4] = integer1;
      Integer.toBinaryString(2737);
      Integer.toBinaryString(2737);
      Integer.toBinaryString((-480));
      Integer.toBinaryString((-480));
      Integer.toBinaryString(0);
      integerArray0[5] = (Integer) 0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.insertFirstWithShifting((Integer) null);
      assertEquals(7, vec0.size());
      
      vec0.removeFromLast(integerArray0[1]);
      assertEquals(6, vec0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>(447);
      Vec<Object> vec1 = new Vec<Object>();
      vec1.shrinkTo(673);
      vec1.ensure((-1174));
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(673, vec1);
      vec2.growTo(1316, vec1);
      // Undeclared exception!
      try { 
        vec2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 15;
      Vec<Object> vec0 = new Vec<Object>(15);
      int int1 = (-2392);
      int int2 = 0;
      Vec<String> vec1 = new Vec<String>(2078, "@fk7.04Vg3");
      vec1.get(0);
      vec0.insertFirst("@fk7.04Vg3");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort((-2392), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1196
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(654);
      // Undeclared exception!
      try { 
        vec0.shrink(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }
}
