/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:00:15 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.LearnedConstraintsEvaluationType;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinWatchCard_ESTest extends MinWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      vecInt0.insertFirst(2899);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1839));
      minWatchCard0.undo(0);
      minWatchCard0.getVocabulary();
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 3624);
      minWatchCard0.equals(vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.calcReason((-1826), vecInt0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, 1341);
      noLearningNoHeuristics0.claBumpActivity(minWatchCard0);
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly(1341, iVecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams0 = new SearchParams((-1645));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt0);
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt1);
      IVecInt iVecInt2 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt2);
      IVecInt iVecInt3 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt3);
      IVecInt iVecInt4 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt4);
      levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-1645));
      minWatchCard0.calcReason((-1645), vecInt0);
      Lits lits0 = new Lits();
      lits0.resetPool();
      MinWatchCard.linearisation((ILits) null, vecInt0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      minWatchCard0.getActivity();
      minWatchCard0.computeWatches();
      minWatchCard0.computeWatches();
      minWatchCard0.simplify();
      minWatchCard0.size();
      Object object0 = new Object();
      minWatchCard0.equals((Object) null);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      lubyRestarts0.toString();
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, 1341);
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly(1341, iVecInt0, iVecInt0);
      minWatchCard0.canBePropagatedMultipleTimes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, true, Integer.MAX_VALUE);
      minWatchCard0.equals(lits0);
      minWatchCard0.toString();
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      iLogAble0.log("`~FB&v");
      iLogAble0.log("`~FB&v");
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      mixedDataStructureSingleWL0.setUnitPropagationListener(solver0);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 1341;
      intArray0[2] = 32;
      intArray0[3] = 1341;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      arminRestarts0.onBackjumpToRootLevel();
      lubyRestarts0.newLearnedClause((Constr) null, 32);
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0);
      solver1.getVocabulary();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-529));
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.assertConstraint(solver1);
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.getActivity();
      minWatchCard0.register();
      // Undeclared exception!
      try { 
        minWatchCard0.get(580);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 580
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, false).when(iLits0).isFalsified(anyInt());
      int int0 = 2922;
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 2922);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(int0);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(0);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, 1341);
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly(1341, iVecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, (IVecInt) null, (-259));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1348);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1348);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, 1348);
      lubyRestarts0.reset();
      minWatchCard0.getActivity();
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      doReturn("T)`qMjdYu-E", "T)`qMjdYu-E", "org.sat4j.tools.ConflictDepthTracing", "YM$Lz", "F\"3").when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3679);
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 1.0, (-763), 305);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.getVocabulary();
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      varOrderHeap0.setLits((ILits) null);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap1, 1201);
      BasicLauncher<ManyCore<Minimal4CardinalityModel>> basicLauncher0 = new BasicLauncher<ManyCore<Minimal4CardinalityModel>>((ASolverFactory<ManyCore<Minimal4CardinalityModel>>) null);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.toString((VarMapper) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isSatisfied(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(iLits0).isFalsified(anyInt());
      int int0 = 2922;
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      int int1 = 0;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).get(anyInt());
      doReturn(2922, 0, 0, 0).when(iVecInt0).size();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, (-2363));
      // Undeclared exception!
      try { 
        minWatchCard0.get((-1627));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1627
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Lits lits0 = new Lits();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      lits0.getFromPool(2875);
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 5750);
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 5750);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, randomWalkDecorator0, eMARestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) eMARestarts0, learnedConstraintsEvaluationType0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 500);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, 1187);
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly((-1), iVecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(948);
      Lits lits1 = new Lits();
      lits1.getFromPool(0);
      vecInt0.insertFirst((-976));
      lits0.resetPool();
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(lits1, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -976
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(0);
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[5];
      intArray0[0] = 2922;
      intArray0[1] = 2922;
      intArray0[2] = 0;
      intArray0[3] = 2922;
      intArray0[4] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      arminRestarts0.onBackjumpToRootLevel();
      arminRestarts0.newLearnedClause((Constr) null, 0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, arminRestarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, arminRestarts0, iLogAble0);
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(2922);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(104, 104, 104, 2900, (-3696)).when(iLits0).getLevel(anyInt());
      doReturn(true, false, true, false, true).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3600).when(iVecInt0).size();
      int int0 = 2899;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 2899);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-65));
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-65));
      minWatchCard0.normalize();
      minWatchCard0.getAssertionLevel(vecInt0, (-1547));
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-65));
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-5908);
      intArray0[2] = 0;
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, varOrderHeap0, eMARestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) eMARestarts0, learnedConstraintsEvaluationType0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1187);
      minWatchCard0.simplify();
      int int0 = minWatchCard0.getAssertionLevel(iVecInt0, (-974));
      assertEquals((-1), int0);
      
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly((-1), iVecInt0, iVecInt0);
      boolean boolean0 = minWatchCard0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      
      minWatchCard0.hashCode();
      assertEquals(1187, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-65));
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-65));
      minWatchCard0.normalize();
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      MinWatchCard.minWatchCardNew(solver0, iLits0, vecInt0, true, (-1));
      minWatchCard0.computePropagation(solver0);
      minWatchCard0.getActivity();
      minWatchCard0.calcReason((-805), vecInt0);
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-2129));
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-2129));
      minWatchCard0.normalize();
      MinWatchCard minWatchCard1 = new MinWatchCard((ILits) null, vecInt0, (-2129));
      VecInt vecInt1 = new VecInt();
      minWatchCard0.calcReasonOnTheFly((-2129), vecInt0, vecInt1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = null;
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, (IVecInt) null, true, (-1646));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      vecInt0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard1.remove((UnitPropagationListener) null);
      minWatchCard0.rescaleBy(0);
      minWatchCard1.getAssertionLevel(vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      int int0 = 2891;
      VecInt vecInt0 = new VecInt(2891, 2891);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(mandatoryLiteralListener0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-768), 0).when(iVecInt0).size();
      int int0 = (-1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits1 = cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap1);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits1, iVecInt0, true, 2199);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      pureOrder0.varDecayActivity();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      IVecInt iVecInt1 = solver0.createBlockingClauseForCurrentModel();
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      ILits iLits1 = solver0.getVocabulary();
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits1, iVecInt1, 0);
      minWatchCard0.simplify();
      minWatchCard1.getAssertionLevel(iVecInt1, (-89));
      minWatchCard1.getActivity();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.init((SearchParams) null, solverStats0);
      lubyRestarts0.onRestart();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, varOrderHeap0, lubyRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, restartStrategy0);
      minWatchCard0.assertConstraintIfNeeded(solver1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-65));
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-65));
      minWatchCard0.normalize();
      minWatchCard0.getAssertionLevel(vecInt0, (-1542));
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      ILits iLits1 = cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      MinWatchCard.minWatchCardNew(solver0, iLits1, vecInt0, true, (-1));
      minWatchCard0.computePropagation(solver0);
      minWatchCard0.getActivity();
      minWatchCard0.calcReason((-805), vecInt0);
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0, 0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3679);
      DotSearchTracing<ManyCore<Minimal4CardinalityModel>> dotSearchTracing0 = new DotSearchTracing<ManyCore<Minimal4CardinalityModel>>("O;'");
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-786.8), 3768);
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 3768);
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, varOrderHeap0, eMARestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) eMARestarts0, learnedConstraintsEvaluationType0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      levelBasedVarOrderHeap1.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 3768);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, (-5908));
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly((-5908), iVecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ILits iLits0 = null;
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation((ILits) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-2));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt1 = vecInt0.push(2);
      minWatchCard0.getAssertionLevel(iVecInt1, 2);
      minWatchCard0.undo((-2));
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 2922);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(2922);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int int0 = 1341;
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(32, 1341);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 1341);
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-5531));
      boolean boolean0 = MinWatchCard.ATLEAST;
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard1.toConstraint();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2891).when(iVecInt0).size();
      int int0 = 0;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(mandatoryLiteralListener0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0, 0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1841);
      minWatchCard0.calcReason(1841, vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(1672);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.getVocabulary();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn("", "", "", "", "").when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3679);
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.init((SearchParams) null, solverStats0);
      lubyRestarts0.onRestart();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, varOrderHeap0, lubyRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, restartStrategy0);
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      positiveLiteralSelectionStrategy0.updateVarAtDecisionLevel(0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      SearchParams searchParams0 = new SearchParams(0.0, 0, 0.0, 1341);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1341;
      intArray0[4] = 0;
      intArray0[5] = 1341;
      intArray0[6] = 1341;
      intArray0[1] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, glucose21Restarts0);
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, (IVecInt) null, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Lits lits0 = new Lits();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(32, 32);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 32);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-805));
      minWatchCard0.normalize();
      int int0 = new Integer(1341);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits0, vecInt0, true, 23);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(3679);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Lits lits0 = new Lits();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.unsafePush(32);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 0;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      minWatchCard0.equals(minWatchCard0);
      minWatchCard0.normalize();
      minWatchCard0.calcReasonOnTheFly(0, vecInt0, (IVecInt) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      int int0 = 2922;
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, false, 2922);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      vecInt0.insertFirst(2899);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 2915);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2898
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      int int0 = 0;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(mandatoryLiteralListener0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-5908);
      intArray0[2] = 0;
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, eMARestarts0, mUSLauncher0);
      mixedDataStructureSingleWL0.setUnitPropagationListener(solver0);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      arminRestarts0.onBackjumpToRootLevel();
      arminRestarts0.newLearnedClause((Constr) null, 0);
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, arminRestarts0);
      ILits iLits0 = solver1.getVocabulary();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.getActivity();
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3624);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 3624);
      minWatchCard0.equals(vecInt0);
      UnitPropagationListener unitPropagationListener0 = null;
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-65));
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-65));
      minWatchCard0.normalize();
      minWatchCard0.getAssertionLevel(vecInt0, (-1542));
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      ILits iLits1 = cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits1, vecInt0, false, 2896);
      MinWatchCard minWatchCard2 = new MinWatchCard(iLits1, vecInt0, true, 154);
      Object object0 = new Object();
      minWatchCard2.equals(object0);
      minWatchCard1.toString();
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int int0 = 1341;
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      lubyRestarts0.setFactor((-454));
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        mixedDataStructureSingleWL0.learnConstraint(minWatchCard0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.incActivity(888.864606);
      minWatchCard0.setActivity(2668.40908);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Lits lits0 = new Lits();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 1);
      minWatchCard0.undo(1);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-5908);
      intArray0[2] = 0;
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, eMARestarts0, mUSLauncher0);
      mixedDataStructureSingleWL0.setUnitPropagationListener(solver0);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      arminRestarts0.onBackjumpToRootLevel();
      arminRestarts0.newLearnedClause((Constr) null, 0);
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, arminRestarts0);
      ILits iLits0 = solver1.getVocabulary();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.getActivity();
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-65));
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(vecInt0, (-65));
      minWatchCard0.normalize();
      minWatchCard0.getAssertionLevel(vecInt0, (-1542));
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      ILits iLits1 = cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      MinWatchCard.minWatchCardNew(solver0, iLits1, vecInt0, true, (-1));
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      MinWatchCard minWatchCard2 = minWatchCard0.computePropagation(solver0);
      SearchParams searchParams0 = new SearchParams(33);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, lubyRestarts0);
      minWatchCard1.remove(solver1);
      minWatchCard2.locked();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, false, 0);
      minWatchCard0.equals(minWatchCard1);
      minWatchCard1.toString();
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = MinWatchCard.ATMOST;
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-17), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      int[] intArray0 = new int[1];
      Object object0 = new Object();
      minWatchCard0.equals(object0);
      intArray0[0] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.copyTo((IVecInt) vecInt1);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-619));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      minWatchCard0.forwardActivity((-1901.502));
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.getVocabulary();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 3624);
      minWatchCard0.equals(vecInt0);
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-361)).when(iVecInt0).size();
      int int0 = 0;
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard0.assertConstraint((UnitPropagationListener) null);
      minWatchCard0.remove((UnitPropagationListener) null);
      minWatchCard0.assertConstraint((UnitPropagationListener) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isFalsified(anyInt());
      doReturn(true, true, true, true, true).when(iLits0).isSatisfied(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      minWatchCard0.register();
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      int int0 = 2922;
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 2922);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3679);
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-5531));
      boolean boolean0 = MinWatchCard.ATLEAST;
      minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard0.size();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn("", "7ETJ|6J:SlrBx()", ":2k}BC[|!w", "' \"K6#yH&)%x|]", "").when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 5);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(5);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.toString();
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
      minWatchCard0.toConstraint();
      minWatchCard0.toConstraint();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false, false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      int int0 = 0;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 2922);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      VecInt vecInt0 = new VecInt();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard1 = new MinWatchCard((ILits) null, vecInt0, 1359);
      minWatchCard0.equals((Object) null);
      minWatchCard1.getActivity();
      minWatchCard1.calcReason((-1826), vecInt0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 0;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      minWatchCard0.equals(minWatchCard0);
      minWatchCard0.normalize();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool(0);
      MinWatchCard.linearisation(lits0, vecInt0);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      int int0 = 891;
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, 891);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int int0 = 1341;
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      minWatchCard0.getAssertionLevel(iVecInt0, 1341);
      minWatchCard0.normalize();
      minWatchCard0.getAssertionLevel(iVecInt0, 1341);
      try { 
        MinWatchCard.minWatchCardNew(solver0, (ILits) null, iVecInt0, true, 562);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      int int0 = 0;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(mandatoryLiteralListener0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-619));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      minWatchCard0.forwardActivity((-1901.502));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-619));
      DotSearchTracing<ManyCore<Minimal4CardinalityModel>> dotSearchTracing0 = new DotSearchTracing<ManyCore<Minimal4CardinalityModel>>("O;'");
      dotSearchTracing0.adding(32);
      dotSearchTracing0.cleaning();
      dotSearchTracing0.conflictFound((IConstr) minWatchCard0, (-619), 32);
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      Integer integer0 = new Integer(1341);
      Integer integer1 = IVisualizationTool.NOTGOOD;
      minWatchCard0.assertConstraint(solver0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      vecInt0.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard1.remove((UnitPropagationListener) null);
      minWatchCard1.calcReason((-1), vecInt0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = 0;
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool(0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      int int1 = 1227;
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, true, 1227);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool((-1));
      lits0.getFromPool((-1));
      lits0.isImplied(3);
      VecInt vecInt0 = new VecInt(2015);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      VecInt vecInt1 = new VecInt(3, 0);
      vecInt1.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, (-1));
      minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard0.remove((UnitPropagationListener) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard0.remove((UnitPropagationListener) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iLits0).getLevel(anyInt());
      doReturn(true, false, true, false, true).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      int int0 = 3679;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      // Undeclared exception!
      minWatchCard0.computeWatches();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Lits lits0 = new Lits();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 1);
      minWatchCard0.undo(1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      minWatchCard0.toString();
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
      minWatchCard0.toConstraint();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      minWatchCard0.computeWatches();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt1 = vecInt0.push(2);
      minWatchCard0.getAssertionLevel(iVecInt1, 2);
      minWatchCard0.undo(0);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      minWatchCard0.computePropagation((UnitPropagationListener) null);
      minWatchCard0.remove((UnitPropagationListener) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isSatisfied(anyInt());
      doReturn(true, true, true, true, true).when(iLits0).isUnassigned(anyInt());
      doReturn("hiGH", "hiGH", "hiGH", "hiGH", "").when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3679);
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-181.0), (-620.155395236765), 0.0, 2859);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.getVocabulary();
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      varOrderHeap1.setLits((ILits) null);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator((VarOrderHeap) null, (-2830));
      BasicLauncher<ManyCore<Minimal4CardinalityModel>> basicLauncher0 = new BasicLauncher<ManyCore<Minimal4CardinalityModel>>((ASolverFactory<ManyCore<Minimal4CardinalityModel>>) null);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.simplify();
      minWatchCard0.toString((VarMapper) null);
      minWatchCard0.locked();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Lits lits0 = new Lits();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      lits0.getFromPool(2875);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(5750);
      int int0 = 2894;
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 2894);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder(2875);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1438.54);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, randomWalkDecorator0, fixedPeriodRestarts0);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo(1597);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      minWatchCard0.simplify();
      minWatchCard0.size();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      minWatchCard0.equals(integer0);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Lits lits0 = new Lits();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 1);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, iVecInt0, true, 1);
      minWatchCard1.hashCode();
      minWatchCard0.toString();
      // Undeclared exception!
      try { 
        minWatchCard0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Lits lits0 = new Lits();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      lits0.getFromPool(2875);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(5750);
      int int0 = 2894;
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 2894);
      int int1 = 1597;
      int int2 = (-515);
      VecInt vecInt1 = new VecInt(1188, (-515));
      // Undeclared exception!
      try { 
        vecInt1.unsafeGet(5000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5000
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 0;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, false, 32);
      minWatchCard0.equals(minWatchCard1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1341);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1341);
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.getVocabulary();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(false, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      minWatchCard0.assertConstraintIfNeeded(unitPropagationListener0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3679);
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 1.0, (-763), 305);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.getVocabulary();
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      varOrderHeap0.setLits((ILits) null);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap1, 1201);
      BasicLauncher<ManyCore<Minimal4CardinalityModel>> basicLauncher0 = new BasicLauncher<ManyCore<Minimal4CardinalityModel>>((ASolverFactory<ManyCore<Minimal4CardinalityModel>>) null);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.simplify();
      minWatchCard0.toString((VarMapper) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = mock(IPhaseSelectionStrategy.class, new ViolatedAssumptionAnswer());
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-762));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-1691));
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-2371));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-3670));
      minWatchCard0.toString((VarMapper) null);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      int int0 = (-1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap1);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, lubyRestarts0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, false, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isImplied(0);
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool((-1839));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      minWatchCard0.calcReason((-1), vecInt0);
      lits0.resetPool();
      MinWatchCard.linearisation(lits0, vecInt0);
      minWatchCard0.getActivity();
      minWatchCard0.degree = 3679;
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MAX_VALUE);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, false, 32);
      minWatchCard0.equals(minWatchCard1);
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isSatisfied(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2922).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(18);
      LubyRestarts lubyRestarts0 = new LubyRestarts(760);
      DotSearchTracing<ManyCore<Minimal4CardinalityModel>> dotSearchTracing0 = new DotSearchTracing<ManyCore<Minimal4CardinalityModel>>(" ");
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      boolean boolean0 = minWatchCard0.simplify();
      assertFalse(boolean0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(iVecInt0).size();
      int int0 = 3679;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 3679);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      MandatoryLiteralListener mandatoryLiteralListener0 = mock(MandatoryLiteralListener.class, new ViolatedAssumptionAnswer());
      minWatchCard0.learnt();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(mandatoryLiteralListener0, 3679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
