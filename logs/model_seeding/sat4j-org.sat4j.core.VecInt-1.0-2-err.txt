[MASTER] 00:52:35.075 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 00:56:54.281 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1550361414238/org/sat4j/core/VecInt_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1550361414238/org/sat4j/core/VecInt_67_tmp__ESTest_scaffolding.java]]
[MASTER] 00:56:54.281 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 00:56:54.281 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 00:56:54.292 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 121
[MASTER] 00:56:54.292 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 135
[MASTER] 00:56:54.303 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1550361414238/org/sat4j/core/VecInt_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sat Feb 16 23:56:54 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.Comparator;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: import org.sat4j.specs.IteratorInt;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class VecInt_67_tmp__ESTest extends VecInt_67_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       VecInt vecInt0 = new VecInt(1, 0);
24:       assertNotNull(vecInt0);
25:       assertFalse(vecInt0.isEmpty());
26:       assertEquals(1, vecInt0.size());
27:       assertEquals(0, vecInt0.last());
28:       
29:       int int0 = vecInt0.containsAt(3320);
30:       assertEquals((-1), int0);
31:       assertFalse(vecInt0.isEmpty());
32:       assertEquals(1, vecInt0.size());
33:       assertEquals(0, vecInt0.last());
34:       
35:       vecInt0.sort(0, 1, (Comparator<Integer>) null);
36:       assertFalse(vecInt0.isEmpty());
37:       assertEquals(1, vecInt0.size());
38:       assertEquals(0, vecInt0.last());
39:       
40:       VecInt vecInt1 = new VecInt(3320);
41:       assertNotNull(vecInt1);
42:       assertFalse(vecInt1.equals((Object)vecInt0));
43:       assertEquals(0, vecInt1.size());
44:       assertTrue(vecInt1.isEmpty());
45:       
46:       IteratorInt iteratorInt0 = vecInt1.iterator();
47:       assertNotSame(vecInt1, vecInt0);
48:       assertNotNull(iteratorInt0);
49:       assertFalse(vecInt1.equals((Object)vecInt0));
50:       assertEquals(0, vecInt1.size());
51:       assertTrue(vecInt1.isEmpty());
52:       
53:       VecInt vecInt2 = new VecInt(0);
54:       assertNotNull(vecInt2);
55:       assertTrue(vecInt2.equals((Object)vecInt1));
56:       assertFalse(vecInt2.equals((Object)vecInt0));
57:       assertEquals(0, vecInt2.size());
58:       assertTrue(vecInt2.isEmpty());
59:       
60:       VecInt vecInt3 = new VecInt(1, (-840));
61:       assertNotNull(vecInt3);
62:       assertFalse(vecInt3.equals((Object)vecInt2));
63:       assertFalse(vecInt3.equals((Object)vecInt0));
64:       assertFalse(vecInt3.equals((Object)vecInt1));
65:       assertEquals(1, vecInt3.size());
66:       assertFalse(vecInt3.isEmpty());
67:       assertEquals((-840), vecInt3.last());
68:       
69:       vecInt1.clear();
70:       assertNotSame(vecInt1, vecInt0);
71:       assertNotSame(vecInt1, vecInt3);
72:       assertNotSame(vecInt1, vecInt2);
73:       assertTrue(vecInt1.equals((Object)vecInt2));
74:       assertFalse(vecInt1.equals((Object)vecInt0));
75:       assertFalse(vecInt1.equals((Object)vecInt3));
76:       assertEquals(0, vecInt1.size());
77:       assertTrue(vecInt1.isEmpty());
78:       
79:       boolean boolean0 = vecInt1.contains(1);
80:       assertFalse(boolean0);
81:       assertNotSame(vecInt1, vecInt0);
82:       assertNotSame(vecInt1, vecInt3);
83:       assertNotSame(vecInt1, vecInt2);
84:       assertTrue(vecInt1.equals((Object)vecInt2));
85:       assertFalse(vecInt1.equals((Object)vecInt0));
86:       assertFalse(vecInt1.equals((Object)vecInt3));
87:       assertEquals(0, vecInt1.size());
88:       assertTrue(vecInt1.isEmpty());
89:       
90:       vecInt1.growTo((-557), 1);
91:       assertNotSame(vecInt1, vecInt0);
92:       assertNotSame(vecInt1, vecInt3);
93:       assertNotSame(vecInt1, vecInt2);
94:       assertTrue(vecInt1.equals((Object)vecInt2));
95:       assertFalse(vecInt1.equals((Object)vecInt0));
96:       assertFalse(vecInt1.equals((Object)vecInt3));
97:       assertEquals(0, vecInt1.size());
98:       assertTrue(vecInt1.isEmpty());
99:       
100:       IVecInt[] iVecIntArray0 = vecInt1.subset(1);
101:       assertNotSame(vecInt1, vecInt0);
102:       assertNotSame(vecInt1, vecInt3);
103:       assertNotSame(vecInt1, vecInt2);
104:       assertEquals(0, iVecIntArray0.length);
105:       assertNotNull(iVecIntArray0);
106:       assertTrue(vecInt1.equals((Object)vecInt2));
107:       assertFalse(vecInt1.equals((Object)vecInt0));
108:       assertFalse(vecInt1.equals((Object)vecInt3));
109:       assertEquals(0, vecInt1.size());
110:       assertTrue(vecInt1.isEmpty());
111:       
112:       VecInt vecInt4 = new VecInt();
113:       assertNotNull(vecInt4);
114:       assertTrue(vecInt4.equals((Object)vecInt2));
115:       assertFalse(vecInt4.equals((Object)vecInt3));
116:       assertFalse(vecInt4.equals((Object)vecInt0));
117:       assertTrue(vecInt4.equals((Object)vecInt1));
118:       assertEquals(0, vecInt4.size());
119:       assertTrue(vecInt4.isEmpty());
120:       
121:       int int1 = VecInt.access$000(vecInt4);
122:       assertEquals(0, int1);
123:       assertNotSame(vecInt4, vecInt1);
124:       assertNotSame(vecInt4, vecInt3);
125:       assertNotSame(vecInt4, vecInt0);
126:       assertNotSame(vecInt4, vecInt2);
127:       assertTrue(vecInt4.equals((Object)vecInt2));
128:       assertFalse(vecInt4.equals((Object)vecInt3));
129:       assertFalse(vecInt4.equals((Object)vecInt0));
130:       assertTrue(vecInt4.equals((Object)vecInt1));
131:       assertFalse(int1 == int0);
132:       assertEquals(0, vecInt4.size());
133:       assertTrue(vecInt4.isEmpty());
134:       
135:       int[] intArray0 = VecInt.access$100(vecInt4);
136:       assertNotSame(vecInt4, vecInt1);
137:       assertNotSame(vecInt4, vecInt3);
138:       assertNotSame(vecInt4, vecInt0);
139:       assertNotSame(vecInt4, vecInt2);
140:       assertEquals(5, intArray0.length);
141:       assertNotNull(intArray0);
142:       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
143:       assertTrue(vecInt4.equals((Object)vecInt2));
144:       assertFalse(vecInt4.equals((Object)vecInt3));
145:       assertFalse(vecInt4.equals((Object)vecInt0));
146:       assertTrue(vecInt4.equals((Object)vecInt1));
147:       assertEquals(0, vecInt4.size());
148:       assertTrue(vecInt4.isEmpty());
149:       
150:       int int2 = vecInt4.size();
151:       assertEquals(0, int2);
152:       assertNotSame(vecInt4, vecInt1);
153:       assertNotSame(vecInt4, vecInt3);
154:       assertNotSame(vecInt4, vecInt0);
155:       assertNotSame(vecInt4, vecInt2);
156:       assertTrue(vecInt4.equals((Object)vecInt2));
157:       assertFalse(vecInt4.equals((Object)vecInt3));
158:       assertFalse(vecInt4.equals((Object)vecInt0));
159:       assertTrue(vecInt4.equals((Object)vecInt1));
160:       assertTrue(int2 == int1);
161:       assertFalse(int2 == int0);
162:       assertEquals(0, vecInt4.size());
163:       assertTrue(vecInt4.isEmpty());
164:   }
165: }
RegularFileObject[/tmp/EvoSuite_67_1550361414238/org/sat4j/core/VecInt_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sat Feb 16 23:56:54 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_67_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.specs.IteratorInt",
82:       "org.sat4j.core.VecInt$1",
83:       "org.sat4j.specs.IVecInt",
84:       "org.sat4j.core.EmptyVecInt",
85:       "org.sat4j.core.VecInt"
86:     );
87:   } 
88: 
89:   private static void resetClasses() {
90:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
91: 
92:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
93:       "org.sat4j.core.EmptyVecInt",
94:       "org.sat4j.core.VecInt",
95:       "org.sat4j.core.VecInt$1",
96:       "org.sat4j.core.EmptyVecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 00:56:54.307 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt(1, 0);
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(0, vecInt0.last());

int int0 = vecInt0.containsAt(3320);
assertEquals((-1), int0);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(0, vecInt0.last());

vecInt0.sort(0, 1, (Comparator<Integer>) null);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(0, vecInt0.last());

VecInt vecInt1 = new VecInt(3320);
assertNotNull(vecInt1);
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

IteratorInt iteratorInt0 = vecInt1.iterator();
assertNotSame(vecInt1, vecInt0);
assertNotNull(iteratorInt0);
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

VecInt vecInt2 = new VecInt(0);
assertNotNull(vecInt2);
assertTrue(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());

VecInt vecInt3 = new VecInt(1, (-840));
assertNotNull(vecInt3);
assertFalse(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt0));
assertFalse(vecInt3.equals((Object)vecInt1));
assertEquals(1, vecInt3.size());
assertFalse(vecInt3.isEmpty());
assertEquals((-840), vecInt3.last());

vecInt1.clear();
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt2);
assertTrue(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)vecInt3));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

boolean boolean0 = vecInt1.contains(1);
assertFalse(boolean0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt2);
assertTrue(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)vecInt3));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

vecInt1.growTo((-557), 1);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt2);
assertTrue(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)vecInt3));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

IVecInt[] iVecIntArray0 = vecInt1.subset(1);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt2);
assertEquals(0, iVecIntArray0.length);
assertNotNull(iVecIntArray0);
assertTrue(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)vecInt3));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

VecInt vecInt4 = new VecInt();
assertNotNull(vecInt4);
assertTrue(vecInt4.equals((Object)vecInt2));
assertFalse(vecInt4.equals((Object)vecInt3));
assertFalse(vecInt4.equals((Object)vecInt0));
assertTrue(vecInt4.equals((Object)vecInt1));
assertEquals(0, vecInt4.size());
assertTrue(vecInt4.isEmpty());

int int1 = VecInt.access$000(vecInt4);
assertEquals(0, int1);
assertNotSame(vecInt4, vecInt1);
assertNotSame(vecInt4, vecInt3);
assertNotSame(vecInt4, vecInt0);
assertNotSame(vecInt4, vecInt2);
assertTrue(vecInt4.equals((Object)vecInt2));
assertFalse(vecInt4.equals((Object)vecInt3));
assertFalse(vecInt4.equals((Object)vecInt0));
assertTrue(vecInt4.equals((Object)vecInt1));
assertFalse(int1 == int0);
assertEquals(0, vecInt4.size());
assertTrue(vecInt4.isEmpty());

int[] intArray0 = VecInt.access$100(vecInt4);
assertNotSame(vecInt4, vecInt1);
assertNotSame(vecInt4, vecInt3);
assertNotSame(vecInt4, vecInt0);
assertNotSame(vecInt4, vecInt2);
assertEquals(5, intArray0.length);
assertNotNull(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertTrue(vecInt4.equals((Object)vecInt2));
assertFalse(vecInt4.equals((Object)vecInt3));
assertFalse(vecInt4.equals((Object)vecInt0));
assertTrue(vecInt4.equals((Object)vecInt1));
assertEquals(0, vecInt4.size());
assertTrue(vecInt4.isEmpty());

int int2 = vecInt4.size();
assertEquals(0, int2);
assertNotSame(vecInt4, vecInt1);
assertNotSame(vecInt4, vecInt3);
assertNotSame(vecInt4, vecInt0);
assertNotSame(vecInt4, vecInt2);
assertTrue(vecInt4.equals((Object)vecInt2));
assertFalse(vecInt4.equals((Object)vecInt3));
assertFalse(vecInt4.equals((Object)vecInt0));
assertTrue(vecInt4.equals((Object)vecInt1));
assertTrue(int2 == int1);
assertFalse(int2 == int0);
assertEquals(0, vecInt4.size());
assertTrue(vecInt4.isEmpty());


